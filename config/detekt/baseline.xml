<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:AnimeScreenModel.kt$AnimeScreenModel$(selectedItem.selected &amp;&amp; selected) || (!selectedItem.selected &amp;&amp; !selected)</ID>
    <ID>ComplexCondition:ExternalIntents.kt$ExternalIntents$episode.seen &amp;&amp; (!preserveWatchPos || (preserveWatchPos &amp;&amp; isEpisodeWatched))</ID>
    <ID>ComplexCondition:ExternalIntents.kt$ExternalIntents$tracker != null &amp;&amp; tracker.isLoggedIn &amp;&amp; tracker is AnimeTracker &amp;&amp; episodeNumber &gt; track.lastEpisodeSeen</ID>
    <ID>ComplexCondition:GestureHandler.kt$GestureHandler$SeekState.mode == SeekState.LOCKED || SeekState.mode != SeekState.DOUBLE_TAP || activity.player.timePos == null || activity.player.duration == null</ID>
    <ID>ComplexCondition:MainActivity.kt$MainActivity$( currentScreen is BrowseMangaSourceScreen || (currentScreen is MangaScreen &amp;&amp; currentScreen.fromSource) ) || ( currentScreen is BrowseAnimeSourceScreen || (currentScreen is AnimeScreen &amp;&amp; currentScreen.fromSource) )</ID>
    <ID>ComplexCondition:MangaScreenModel.kt$MangaScreenModel$(selectedItem.selected &amp;&amp; selected) || (!selectedItem.selected &amp;&amp; !selected)</ID>
    <ID>ComplexCondition:ReaderNavigationOverlayView.kt$ReaderNavigationOverlayView$isVisible || (!showOnStart &amp;&amp; firstLaunch) || navigation is DisabledNavigation</ID>
    <ID>ComplexCondition:ReaderPageImageView.kt$ReaderPageImageView$config != null &amp;&amp; config!!.landscapeZoom &amp;&amp; config!!.minimumScaleType == SCALE_TYPE_CENTER_INSIDE &amp;&amp; sWidth &gt; sHeight &amp;&amp; scale == minScale</ID>
    <ID>ComposableParamOrder:ChapterSettingsDialog.kt$ChapterSettingsDialog</ID>
    <ID>ComposableParamOrder:CommonEntryItem.kt$EntryComfortableGridItem</ID>
    <ID>ComposableParamOrder:CommonEntryItem.kt$EntryListItem</ID>
    <ID>ComposableParamOrder:EpisodeSettingsDialog.kt$EpisodeSettingsDialog</ID>
    <ID>ComposableParamOrder:LazyLibraryGrid.kt$LazyLibraryGrid</ID>
    <ID>ComposableParamOrder:PlayerDialog.kt$PlayerDialog</ID>
    <ID>ComposableParamOrder:PlayerSettingsScreenModel.kt$PlayerSettingsScreenModel$ToggleableRow</ID>
    <ID>ComposableParamOrder:StorageScreenContent.kt$StorageScreenContent</ID>
    <ID>ComposableParamOrder:SwitchPreferenceWidget.kt$SwitchPreferenceWidget</ID>
    <ID>ComposableParamOrder:TrackingPreferenceWidget.kt$TrackingPreferenceWidget</ID>
    <ID>ComposableParamOrder:TriStateListDialog.kt$TriStateListDialog</ID>
    <ID>CompositionLocalAllowlist:Navigator.kt$LocalBackPress</ID>
    <ID>CompositionLocalAllowlist:PreferenceItem.kt$LocalPreferenceHighlighted</ID>
    <ID>CompositionLocalAllowlist:PreferenceItem.kt$LocalPreferenceMinHeight</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val average_score: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val image_url_lge: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val publishing_status: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val remote_id: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val start_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val title_user_pref: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALAnime$val total_episodes: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val average_score: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val image_url_lge: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val publishing_status: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val remote_id: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val start_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val title_user_pref: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALManga$val total_chapters: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserAnime$val completed_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserAnime$val episodes_seen: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserAnime$val library_id: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserAnime$val list_status: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserAnime$val score_raw: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserAnime$val start_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val chapters_read: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val completed_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val library_id: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val list_status: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val score_raw: Int</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$ALUserManga$val start_date_fuzzy: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:AnilistModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:AnimeExtensionDetailsScreenModel.kt$AnimeExtensionDetailsScreenModel.State$private val _sources: ImmutableList&lt;AnimeExtensionSourceItem&gt;? = null</ID>
    <ID>ConstructorParameterNaming:BackupAnime.kt$BackupAnime$@ProtoNumber(103) var viewer_flags: Int = 0</ID>
    <ID>ConstructorParameterNaming:BackupManga.kt$BackupManga$@ProtoNumber(103) var viewer_flags: Int? = null</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$Collection$val ep_status: Int? = 0</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$Collection$val vol_status: Int? = 0</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val created_at: Long = System.currentTimeMillis() / 1000</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val refresh_token: String?</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:BangumiModels.kt$OAuth$val user_id: Long?</ID>
    <ID>ConstructorParameterNaming:KavitaModels.kt$SeriesDto$val thumbnail_url: String? = ""</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val created_at: Long</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val refresh_token: String?</ID>
    <ID>ConstructorParameterNaming:KitsuModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:MangaExtensionDetailsScreenModel.kt$MangaExtensionDetailsScreenModel.State$private val _sources: ImmutableList&lt;MangaExtensionSourceItem&gt;? = null</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val created_at: Long = System.currentTimeMillis()</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val refresh_token: String</ID>
    <ID>ConstructorParameterNaming:MyAnimeListModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val created_at: Long</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val expires_in: Long</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val refresh_token: String?</ID>
    <ID>ConstructorParameterNaming:ShikimoriModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:SimklModels.kt$OAuth$val access_token: String</ID>
    <ID>ConstructorParameterNaming:SimklModels.kt$OAuth$val token_type: String</ID>
    <ID>ConstructorParameterNaming:WebViewScreenModel.kt$WebViewScreenModel$private val AnimeSourceManager: AnimeSourceManager = Injekt.get()</ID>
    <ID>ConstructorParameterNaming:WebViewScreenModel.kt$WebViewScreenModel$private val MangaSourceManager: MangaSourceManager = Injekt.get()</ID>
    <ID>CyclomaticComplexMethod:AniChartApi.kt$AniChartApi$internal suspend fun loadAiringTime( anime: Anime, trackItems: List&lt;AnimeTrackItem&gt;, manualFetch: Boolean, ): Pair&lt;Int, Long&gt;</ID>
    <ID>CyclomaticComplexMethod:AnilistModels.kt$fun DomainAnimeTrack.toAnilistScore(): String</ID>
    <ID>CyclomaticComplexMethod:AnilistModels.kt$fun DomainMangaTrack.toAnilistScore(): String</ID>
    <ID>CyclomaticComplexMethod:AnimeDownloadCache.kt$AnimeDownloadCache$private fun renewCache()</ID>
    <ID>CyclomaticComplexMethod:AnimeDownloader.kt$AnimeDownloader$private fun ffmpegDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, ): UniFile</ID>
    <ID>CyclomaticComplexMethod:AnimeDownloader.kt$AnimeDownloader$private suspend fun attemptDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, safe: Boolean, ): UniFile</ID>
    <ID>CyclomaticComplexMethod:AnimeDownloader.kt$AnimeDownloader$private suspend fun httpDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, threadNumber: Int, safeDownload: Boolean, ): UniFile</ID>
    <ID>CyclomaticComplexMethod:AnimeExtensionLoader.kt$AnimeExtensionLoader$private fun loadExtension(context: Context, extensionInfo: AnimeExtensionInfo): AnimeLoadResult</ID>
    <ID>CyclomaticComplexMethod:AnimeExtensionsScreen.kt$@Composable private fun AnimeExtensionContent( state: AnimeExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (AnimeExtension) -&gt; Unit, onOpenWebView: (AnimeExtension.Available) -&gt; Unit, onClickItemCancel: (AnimeExtension) -&gt; Unit, onInstallExtension: (AnimeExtension.Available) -&gt; Unit, onUninstallExtension: (AnimeExtension) -&gt; Unit, onUpdateExtension: (AnimeExtension.Installed) -&gt; Unit, onTrustExtension: (AnimeExtension.Untrusted) -&gt; Unit, onOpenExtension: (AnimeExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:AnimeExtensionsScreen.kt$@Composable private fun AnimeExtensionItemContent( extension: AnimeExtension, installStep: InstallStep, modifier: Modifier = Modifier, )</ID>
    <ID>CyclomaticComplexMethod:AnimeInfoHeader.kt$@Composable private fun ColumnScope.AnimeContentInfo( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>CyclomaticComplexMethod:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$private fun AnimeLibraryMap.applySort( // Map&lt;MangaId, List&lt;Track&gt;&gt; trackMap: Map&lt;Long, List&lt;AnimeTrack&gt;&gt;, ): AnimeLibraryMap</ID>
    <ID>CyclomaticComplexMethod:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$private suspend fun AnimeLibraryMap.applyFilters( trackMap: Map&lt;Long, List&lt;AnimeTrack&gt;&gt;, loggedInTrackers: Map&lt;Long, TriState&gt;, ): AnimeLibraryMap</ID>
    <ID>CyclomaticComplexMethod:AnimeLibraryTab.kt$AnimeLibraryTab$@OptIn(ExperimentalMaterial3Api::class) @Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$private suspend fun addAnimeToQueue(categoryId: Long)</ID>
    <ID>CyclomaticComplexMethod:AnimeScreen.kt$AnimeScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:AnimeScreenModel.kt$AnimeScreenModel$fun toggleSelection( item: EpisodeList.Item, selected: Boolean, userSelected: Boolean = false, fromLongPress: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:AnimeSourcesScreenModel.kt$AnimeSourcesScreenModel$private fun collectLatestAnimeSources(sources: List&lt;AnimeSource&gt;)</ID>
    <ID>CyclomaticComplexMethod:AnimeUpdatesScreenModel.kt$AnimeUpdatesScreenModel$fun toggleSelection( item: AnimeUpdatesItem, selected: Boolean, userSelected: Boolean = false, fromLongPress: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:BrowseAnimeSourceScreen.kt$@Composable fun BrowseAnimeSourceContent( source: AnimeSource?, animeList: LazyPagingItems&lt;StateFlow&lt;Anime&gt;&gt;, columns: GridCells, displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onLocalAnimeSourceHelpClick: () -&gt; Unit, onAnimeClick: (Anime) -&gt; Unit, onAnimeLongClick: (Anime) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:BrowseAnimeSourceScreen.kt$BrowseAnimeSourceScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:BrowseAnimeSourceScreenModel.kt$BrowseAnimeSourceScreenModel$fun searchGenre(genreName: String)</ID>
    <ID>CyclomaticComplexMethod:BrowseMangaSourceScreen.kt$@Composable fun BrowseSourceContent( source: MangaSource?, mangaList: LazyPagingItems&lt;StateFlow&lt;Manga&gt;&gt;, columns: GridCells, displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onLocalSourceHelpClick: () -&gt; Unit, onMangaClick: (Manga) -&gt; Unit, onMangaLongClick: (Manga) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:BrowseMangaSourceScreen.kt$BrowseMangaSourceScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:BrowseMangaSourceScreenModel.kt$BrowseMangaSourceScreenModel$fun searchGenre(genreName: String)</ID>
    <ID>CyclomaticComplexMethod:DownloadsTab.kt$DownloadsTab$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:EntryBottomActionMenu.kt$@Composable fun EntryBottomActionMenu( visible: Boolean, isManga: Boolean, modifier: Modifier = Modifier, onBookmarkClicked: (() -&gt; Unit)? = null, onRemoveBookmarkClicked: (() -&gt; Unit)? = null, onMarkAsViewedClicked: (() -&gt; Unit)? = null, onMarkAsUnviewedClicked: (() -&gt; Unit)? = null, onMarkPreviousAsViewedClicked: (() -&gt; Unit)? = null, onDownloadClicked: (() -&gt; Unit)? = null, onDeleteClicked: (() -&gt; Unit)? = null, onExternalClicked: (() -&gt; Unit)? = null, onInternalClicked: (() -&gt; Unit)? = null, )</ID>
    <ID>CyclomaticComplexMethod:GestureHandler.kt$GestureHandler$override fun onScroll( e1: MotionEvent?, e2: MotionEvent, distanceX: Float, distanceY: Float, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:GetAnimeSourcesWithFavoriteCount.kt$GetAnimeSourcesWithFavoriteCount$private fun sortFn( direction: SetMigrateSorting.Direction, sorting: SetMigrateSorting.Mode, ): java.util.Comparator&lt;Pair&lt;AnimeSource, Long&gt;&gt;</ID>
    <ID>CyclomaticComplexMethod:GetMangaSourcesWithFavoriteCount.kt$GetMangaSourcesWithFavoriteCount$private fun sortFn( direction: SetMigrateSorting.Direction, sorting: SetMigrateSorting.Mode, ): java.util.Comparator&lt;Pair&lt;Source, Long&gt;&gt;</ID>
    <ID>CyclomaticComplexMethod:HomeScreen.kt$HomeScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>CyclomaticComplexMethod:MainActivity.kt$MainActivity$private fun handleIntentAction(intent: Intent, navigator: Navigator): Boolean</ID>
    <ID>CyclomaticComplexMethod:MangaDownloadCache.kt$MangaDownloadCache$private fun renewCache()</ID>
    <ID>CyclomaticComplexMethod:MangaExtensionLoader.kt$MangaExtensionLoader$private fun loadMangaExtension(context: Context, extensionInfo: MangaExtensionInfo): MangaLoadResult</ID>
    <ID>CyclomaticComplexMethod:MangaExtensionsScreen.kt$@Composable private fun ExtensionContent( state: MangaExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (MangaExtension) -&gt; Unit, onOpenWebView: (MangaExtension.Available) -&gt; Unit, onClickItemCancel: (MangaExtension) -&gt; Unit, onInstallExtension: (MangaExtension.Available) -&gt; Unit, onUninstallExtension: (MangaExtension) -&gt; Unit, onUpdateExtension: (MangaExtension.Installed) -&gt; Unit, onTrustExtension: (MangaExtension.Untrusted) -&gt; Unit, onOpenExtension: (MangaExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:MangaExtensionsScreen.kt$@Composable private fun ExtensionItemContent( extension: MangaExtension, installStep: InstallStep, modifier: Modifier = Modifier, )</ID>
    <ID>CyclomaticComplexMethod:MangaInfoHeader.kt$@Composable private fun ColumnScope.MangaContentInfo( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>CyclomaticComplexMethod:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$private fun MangaLibraryMap.applySort( // Map&lt;MangaId, List&lt;Track&gt;&gt; trackMap: Map&lt;Long, List&lt;MangaTrack&gt;&gt;, ): MangaLibraryMap</ID>
    <ID>CyclomaticComplexMethod:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$private suspend fun MangaLibraryMap.applyFilters( trackMap: Map&lt;Long, List&lt;MangaTrack&gt;&gt;, loggedInTrackers: Map&lt;Long, TriState&gt;, ): MangaLibraryMap</ID>
    <ID>CyclomaticComplexMethod:MangaLibraryTab.kt$MangaLibraryTab$@OptIn(ExperimentalMaterial3Api::class) @Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$private suspend fun addMangaToQueue(categoryId: Long)</ID>
    <ID>CyclomaticComplexMethod:MangaScreen.kt$MangaScreen$@Composable override fun Content()</ID>
    <ID>CyclomaticComplexMethod:MangaScreenModel.kt$MangaScreenModel$fun toggleSelection( item: ChapterList.Item, selected: Boolean, userSelected: Boolean = false, fromLongPress: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:MangaSourcesScreenModel.kt$MangaSourcesScreenModel$private fun collectLatestSources(sources: List&lt;Source&gt;)</ID>
    <ID>CyclomaticComplexMethod:MangaUpdatesScreenModel.kt$MangaUpdatesScreenModel$fun toggleSelection( item: MangaUpdatesItem, selected: Boolean, userSelected: Boolean = false, fromLongPress: Boolean = false, )</ID>
    <ID>CyclomaticComplexMethod:MigrateAnimeDialog.kt$MigrateAnimeDialogScreenModel$private suspend fun migrateAnimeInternal( oldSource: AnimeSource?, newSource: AnimeSource, oldAnime: Anime, newAnime: Anime, sourceEpisodes: List&lt;SEpisode&gt;, replace: Boolean, flags: Int, )</ID>
    <ID>CyclomaticComplexMethod:MigrateMangaDialog.kt$MigrateMangaDialogScreenModel$private suspend fun migrateMangaInternal( oldSource: MangaSource?, newSource: MangaSource, oldManga: Manga, newManga: Manga, sourceChapters: List&lt;SChapter&gt;, replace: Boolean, flags: Int, )</ID>
    <ID>CyclomaticComplexMethod:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, playerPreferences: PlayerPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>CyclomaticComplexMethod:NotificationReceiver.kt$NotificationReceiver$override fun onReceive(context: Context, intent: Intent)</ID>
    <ID>CyclomaticComplexMethod:PagerViewer.kt$PagerViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>CyclomaticComplexMethod:PagerViewerAdapter.kt$PagerViewerAdapter$fun setChapters(chapters: ViewerChapters, forceTransition: Boolean)</ID>
    <ID>CyclomaticComplexMethod:PlayerActivity.kt$PlayerActivity$@SuppressLint("ClickableViewAccessibility") override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>CyclomaticComplexMethod:PlayerActivity.kt$PlayerActivity$@SuppressLint("SourceLockedOrientationActivity") internal suspend fun fileLoaded()</ID>
    <ID>CyclomaticComplexMethod:PlayerActivity.kt$PlayerActivity$fun doubleTapSeek( time: Int, event: MotionEvent? = null, isDoubleTap: Boolean = true, videoChapterText: String? = null, chapterSeek: String? = null, )</ID>
    <ID>CyclomaticComplexMethod:PlayerActivity.kt$PlayerActivity$private fun updateChapters(stamps: List&lt;Stamp&gt;? = null, duration: Int? = null)</ID>
    <ID>CyclomaticComplexMethod:PlayerViewModel.kt$PlayerViewModel$private fun filterEpisodeList(episodes: List&lt;Episode&gt;): List&lt;Episode&gt;</ID>
    <ID>CyclomaticComplexMethod:PreferenceItem.kt$@Composable internal fun PreferenceItem( item: Preference.PreferenceItem&lt;*&gt;, highlightKey: String?, )</ID>
    <ID>CyclomaticComplexMethod:ReaderActivity.kt$ReaderActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>CyclomaticComplexMethod:ReaderActivity.kt$ReaderActivity$private fun initializeMenu()</ID>
    <ID>CyclomaticComplexMethod:SyncChaptersWithSource.kt$SyncChaptersWithSource$suspend fun await( rawSourceChapters: List&lt;SChapter&gt;, manga: Manga, source: MangaSource, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Chapter&gt;</ID>
    <ID>CyclomaticComplexMethod:SyncEpisodesWithSource.kt$SyncEpisodesWithSource$suspend fun await( rawSourceEpisodes: List&lt;SEpisode&gt;, anime: Anime, source: AnimeSource, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Episode&gt;</ID>
    <ID>CyclomaticComplexMethod:TriStateListDialog.kt$@SuppressLint("ComposeParameterOrder") @Composable fun &lt;T&gt; TriStateListDialog( title: String, message: String? = null, items: List&lt;T&gt;, initialChecked: List&lt;T&gt;, initialInversed: List&lt;T&gt;, itemLabel: @Composable (T) -&gt; String, onDismissRequest: () -&gt; Unit, onValueChanged: (newIncluded: List&lt;T&gt;, newExcluded: List&lt;T&gt;) -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>CyclomaticComplexMethod:WebtoonViewer.kt$WebtoonViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:AnimeExtensionsScreenModel.kt$AnimeExtensionsScreenModel$(_updates, _installed, _available, _untrusted)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:AnimeInfoHeader.kt$(shrunk, expanded, actual, scrim)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:MangaExtensionsScreenModel.kt$MangaExtensionsScreenModel$(_updates, _installed, _available, _untrusted)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:MangaInfoHeader.kt$(shrunk, expanded, actual, scrim)</ID>
    <ID>EmptyCatchBlock:RarPageLoader.kt$RarPageLoader${ }</ID>
    <ID>EmptyFunctionBlock:IgnoreFirstSpinnerListener.kt$IgnoreFirstSpinnerListener${ }</ID>
    <ID>EmptyFunctionBlock:PlayerObserver.kt$PlayerObserver${}</ID>
    <ID>EmptyFunctionBlock:SimpleSeekBarListener.kt$SimpleSeekBarListener${ }</ID>
    <ID>ExplicitItLambdaParameter:AnimeDownloader.kt$AnimeDownloader${ it: AnimeDownload -&gt; it.source !is UnmeteredSource }</ID>
    <ID>ExplicitItLambdaParameter:AnimeLibraryTab.kt$AnimeLibraryTab${ it: LibraryAnime -&gt; scope.launchIO { val episode = screenModel.getNextUnseenEpisode(it.anime) if (episode != null) openEpisode(episode) } Unit }</ID>
    <ID>ExplicitItLambdaParameter:ColorFilterPage.kt${ index, it -&gt; FilterChip( selected = colorFilterMode == index, onClick = { screenModel.preferences.colorFilterMode().set(index) }, label = { Text(stringResource(it.first)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:MangaDownloader.kt$MangaDownloader${ it: MangaDownload -&gt; it.source !is UnmeteredSource }</ID>
    <ID>ExplicitItLambdaParameter:MangaLibraryTab.kt$MangaLibraryTab${ it: LibraryManga -&gt; scope.launchIO { val chapter = screenModel.getNextUnreadChapter(it.manga) if (chapter != null) { context.startActivity( ReaderActivity.newIntent( context, chapter.mangaId, chapter.id, ), ) } else { snackbarHostState.showSnackbar( context.stringResource(MR.strings.no_next_chapter), ) } } Unit }</ID>
    <ID>ExplicitItLambdaParameter:PlayerActivity.kt$PlayerActivity${ i, it -&gt; if (i == 0 &amp;&amp; it.time &lt; 1.0) { VideoChapter( it.index, it.title, 0.0, ) } else { it } }</ID>
    <ID>ExplicitItLambdaParameter:PlayerActivity.kt$PlayerActivity${ i, it -&gt; val startTime = if (i == 0 &amp;&amp; it.interval.startTime &lt; 1.0) { 0.0 } else { it.interval.startTime } val startChapter = VideoChapter( index = -2, // Index -2 is used to indicate that this is an AniSkip chapter title = it.skipType.getString(), time = startTime, ) val nextStart = sortedAniskipStamps.getOrNull(i + 1)?.interval?.startTime val isNotLastChapter = abs(it.interval.endTime - (duration?.toDouble() ?: -2.0)) &gt; 1.0 val isNotAdjacent = nextStart == null || (abs(it.interval.endTime - nextStart) &gt; 1.0) if (isNotLastChapter &amp;&amp; isNotAdjacent) { val endChapter = VideoChapter( index = -1, title = null, time = it.interval.endTime, ) return@mapIndexed listOf(startChapter, endChapter) } else { listOf(startChapter) } }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = imageScaleType == index + 1, onClick = { screenModel.preferences.imageScaleType().set(index + 1) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = selected == index, onClick = { onSelect(index) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:ReadingModePage.kt${ index, it -&gt; FilterChip( selected = zoomStart == index + 1, onClick = { screenModel.preferences.zoomStart().set(index + 1) }, label = { Text(stringResource(it)) }, ) }</ID>
    <ID>ExplicitItLambdaParameter:SettingsReaderScreen.kt$SettingsReaderScreen${ index, it -&gt; index + 1 to stringResource(it) }</ID>
    <ID>ExplicitItLambdaParameter:SettingsReaderScreen.kt$SettingsReaderScreen${ index, it -&gt; index to stringResource(it) }</ID>
    <ID>ForEachOnRange:EntryBottomActionMenu.kt$0..&lt;5</ID>
    <ID>ForEachOnRange:EntryBottomActionMenu.kt$0..&lt;9</ID>
    <ID>ForbiddenComment:AddAnimeTracks.kt$AddAnimeTracks$// TODO: merge into [SyncChapterProgressWithTrack]?</ID>
    <ID>ForbiddenComment:AddAnimeTracks.kt$AddAnimeTracks$// TODO: update all trackers based on common data</ID>
    <ID>ForbiddenComment:AddMangaTracks.kt$AddMangaTracks$// TODO: merge into [SyncChapterProgressWithTrack]?</ID>
    <ID>ForbiddenComment:AddMangaTracks.kt$AddMangaTracks$// TODO: update all trackers based on common data</ID>
    <ID>ForbiddenComment:Anime.kt$// TODO: move these into the domain model</ID>
    <ID>ForbiddenComment:AnimeCoverScreenModel.kt$AnimeCoverScreenModel$// TODO: Handle animated cover</ID>
    <ID>ForbiddenComment:AnimeDownloader.kt$AnimeDownloader$// TODO: show warnings in stable</ID>
    <ID>ForbiddenComment:AnimeDownloader.kt$AnimeDownloader$// TODO: support other file formats!!</ID>
    <ID>ForbiddenComment:AnimeInfoHeader.kt$// TODO: show something better when using custom interval</ID>
    <ID>ForbiddenComment:AnimeLibrarySettingsDialog.kt$// TODO: re-enable when custom intervals are ready for stable</ID>
    <ID>ForbiddenComment:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$// TODO: surface skipped reasons to user?</ID>
    <ID>ForbiddenComment:AnimeTracker.kt$AnimeTracker$// TODO: Store all scores as 10 point in the future maybe?</ID>
    <ID>ForbiddenComment:AnimeTracker.kt$AnimeTracker$// TODO: move this to an interactor, and update all trackers based on common data</ID>
    <ID>ForbiddenComment:BackupRestorer.kt$BackupRestorer$// TODO: optionally trigger online library + tracker update</ID>
    <ID>ForbiddenComment:BangumiApi.kt$BangumiApi$// TODO: get user readed chapter here</ID>
    <ID>ForbiddenComment:BrowseTab.kt$BrowseTab$// TODO: Find a way to let it open Global Anime/Manga Search depending on what Tab(e.g. Anime/Manga Source Tab) is open</ID>
    <ID>ForbiddenComment:CategoryDialogs.kt$// TODO: https://issuetracker.google.com/issues/204502668</ID>
    <ID>ForbiddenComment:Chapter.kt$// TODO: Remove when all deps are migrated</ID>
    <ID>ForbiddenComment:DisplayExtensions.kt$// TODO: move the logic to `isTabletUi()` when main activity is rewritten in Compose</ID>
    <ID>ForbiddenComment:Episode.kt$// TODO: Remove when all deps are migrated</ID>
    <ID>ForbiddenComment:ExtensionReposDialogs.kt$// TODO: https://issuetracker.google.com/issues/204502668</ID>
    <ID>ForbiddenComment:GlobalAnimeSearchToolbar.kt$// TODO: make this UX better; it only applies when triggering a new search</ID>
    <ID>ForbiddenComment:GlobalMangaSearchToolbar.kt$// TODO: make this UX better; it only applies when triggering a new search</ID>
    <ID>ForbiddenComment:HomeScreen.kt$HomeScreen$// TODO: https://issuetracker.google.com/u/0/issues/316327367</ID>
    <ID>ForbiddenComment:LibraryTabs.kt$// TODO: use default when width is fixed upstream</ID>
    <ID>ForbiddenComment:MainActivity.kt$MainActivity$// TODO: replace with ComponentActivity#enableEdgeToEdge</ID>
    <ID>ForbiddenComment:Manga.kt$// TODO: move these into the domain model</ID>
    <ID>ForbiddenComment:MangaCoverScreenModel.kt$MangaCoverScreenModel$// TODO: Handle animated cover</ID>
    <ID>ForbiddenComment:MangaInfoHeader.kt$// TODO: show something better when using custom interval</ID>
    <ID>ForbiddenComment:MangaLibrarySettingsDialog.kt$// TODO: re-enable when custom intervals are ready for stable</ID>
    <ID>ForbiddenComment:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$// TODO: surface skipped reasons to user?</ID>
    <ID>ForbiddenComment:MangaLibraryUpdateNotifier.kt$MangaLibraryUpdateNotifier.Companion$// TODO: Change when implemented on Aniyomi website</ID>
    <ID>ForbiddenComment:MangaTracker.kt$MangaTracker$// TODO: Store all scores as 10 point in the future maybe?</ID>
    <ID>ForbiddenComment:PictureInPictureHandler.kt$// TODO: https://developer.android.com/develop/ui/views/picture-in-picture#setautoenterenabled</ID>
    <ID>ForbiddenComment:PlayerActivity.kt$PlayerActivity$// TODO: I think this is a bad hack.</ID>
    <ID>ForbiddenComment:PlayerActivity.kt$PlayerActivity$// TODO: Move into function once compose is implemented</ID>
    <ID>ForbiddenComment:PlayerActivity.kt$PlayerActivity$// TODO: exception java.util.ConcurrentModificationException:</ID>
    <ID>ForbiddenComment:PlayerDialog.kt$// TODO: (Merge_Change) stringResource "MR.strings.action_ok" to be replaced with</ID>
    <ID>ForbiddenComment:PlayerSettingsSheet.kt$// TODO: (Merge_Change) below two Columns to be switched to using 'SettingsChipRow'</ID>
    <ID>ForbiddenComment:PlayerSettingsSheet.kt$// TODO: Shift to MPV-Lib</ID>
    <ID>ForbiddenComment:PreferenceItem.kt$// TODO: use different composable?</ID>
    <ID>ForbiddenComment:ReaderPreferences.kt$ReaderPreferences$// TODO: default this to true if reader long strip ever goes stable</ID>
    <ID>ForbiddenComment:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$// TODO: allow private option in stable versions once URL handling is more fleshed out</ID>
    <ID>FunctionNaming:AnimeDownloader.kt$AnimeDownloader$private fun _clearQueue()</ID>
    <ID>FunctionNaming:MangaDownloader.kt$MangaDownloader$private fun _clearQueue()</ID>
    <ID>FunctionParameterNaming:AnimeScreen.kt$AnimeScreen$anime_: Anime?</ID>
    <ID>FunctionParameterNaming:AnimeScreen.kt$AnimeScreen$source_: AnimeSource?</ID>
    <ID>FunctionParameterNaming:MangaScreen.kt$MangaScreen$manga_: Manga?</ID>
    <ID>FunctionParameterNaming:MangaScreen.kt$MangaScreen$source_: MangaSource?</ID>
    <ID>FunctionParameterNaming:ShikimoriApi.kt$ShikimoriApi$user_id: String</ID>
    <ID>ImplicitDefaultLocale:AnimeScreen.kt$String.format( "%d:%02d", TimeUnit.MILLISECONDS.toMinutes(milliseconds), TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds)), )</ID>
    <ID>ImplicitDefaultLocale:AnimeScreen.kt$String.format( "%d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(milliseconds), TimeUnit.MILLISECONDS.toMinutes(milliseconds) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(milliseconds)), TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds)), )</ID>
    <ID>ImplicitDefaultLocale:AnimeScreen.kt$String.format( "Airing in %02dd %02dh %02dm %02ds", TimeUnit.MILLISECONDS.toDays(milliseconds), TimeUnit.MILLISECONDS.toHours(milliseconds) - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(milliseconds)), TimeUnit.MILLISECONDS.toMinutes(milliseconds) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(milliseconds)), TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds)), )</ID>
    <ID>ImplicitDefaultLocale:AnimeUpdatesUiItem.kt$String.format( "%d:%02d", TimeUnit.MILLISECONDS.toMinutes(milliseconds), TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds)), )</ID>
    <ID>ImplicitDefaultLocale:AnimeUpdatesUiItem.kt$String.format( "%d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(milliseconds), TimeUnit.MILLISECONDS.toMinutes(milliseconds) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(milliseconds)), TimeUnit.MILLISECONDS.toSeconds(milliseconds) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(milliseconds)), )</ID>
    <ID>ImplicitDefaultLocale:SubtitleColorPage.kt$String.format("%02X", toAlpha(this))</ID>
    <ID>ImplicitDefaultLocale:SubtitleColorPage.kt$String.format("%02X", toBlue(this))</ID>
    <ID>ImplicitDefaultLocale:SubtitleColorPage.kt$String.format("%02X", toGreen(this))</ID>
    <ID>ImplicitDefaultLocale:SubtitleColorPage.kt$String.format("%02X", toRed(this))</ID>
    <ID>ImplicitDefaultLocale:SubtitleColorPage.kt$String.format("%03d", argb.toValue(colorCode))</ID>
    <ID>InstanceOfCheckForException:AnimeDownloader.kt$AnimeDownloader$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AnimeMetadataUpdateJob.kt$AnimeMetadataUpdateJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AnimeScreenModel.kt$AnimeScreenModel$e is HttpException</ID>
    <ID>InstanceOfCheckForException:AnimeScreenModel.kt$AnimeScreenModel$e is NoEpisodesException</ID>
    <ID>InstanceOfCheckForException:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$e is StreamResetException</ID>
    <ID>InstanceOfCheckForException:BackupRestoreJob.kt$BackupRestoreJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:HttpPageLoader.kt$HttpPageLoader$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaDownloader.kt$MangaDownloader$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaDownloader.kt$MangaDownloader$error is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaMetadataUpdateJob.kt$MangaMetadataUpdateJob$e is CancellationException</ID>
    <ID>InstanceOfCheckForException:MangaScreenModel.kt$MangaScreenModel$e is HttpException</ID>
    <ID>InstanceOfCheckForException:MangaScreenModel.kt$MangaScreenModel$e is NoChaptersException</ID>
    <ID>InstanceOfCheckForException:ReaderViewModel.kt$ReaderViewModel$e is CancellationException</ID>
    <ID>LargeClass:AnimeDownloader.kt$AnimeDownloader</ID>
    <ID>LargeClass:AnimeScreenModel.kt$AnimeScreenModel : StateScreenModel</ID>
    <ID>LargeClass:MangaScreenModel.kt$MangaScreenModel : StateScreenModel</ID>
    <ID>LargeClass:PlayerActivity.kt$PlayerActivity : BaseActivity</ID>
    <ID>LongMethod:AboutScreen.kt$AboutScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:AdvancedPlayerSettingsScreen.kt$AdvancedPlayerSettingsScreen$@SuppressLint("InlinedApi") @Composable override fun getPreferences(): List&lt;Preference&gt;</ID>
    <ID>LongMethod:AnilistApi.kt$AnilistApi$suspend fun findLibAnime(track: AnimeTrack, userid: Int): AnimeTrack?</ID>
    <ID>LongMethod:AnilistApi.kt$AnilistApi$suspend fun findLibManga(track: MangaTrack, userid: Int): MangaTrack?</ID>
    <ID>LongMethod:AnimeCategoryTab.kt$@Composable fun Screen.animeCategoryTab(): TabContent</ID>
    <ID>LongMethod:AnimeCoverDialog.kt$@Composable fun AnimeCoverDialog( coverDataProvider: () -&gt; Anime, isCustomCover: Boolean, snackbarHostState: SnackbarHostState, onShareClick: () -&gt; Unit, onSaveClick: () -&gt; Unit, onEditClick: ((EditCoverAction) -&gt; Unit)?, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeDownloadCache.kt$AnimeDownloadCache$private fun renewCache()</ID>
    <ID>LongMethod:AnimeDownloader.kt$AnimeDownloader$private fun downloadVideoExternal( video: Video, source: AnimeHttpSource, tmpDir: UniFile, filename: String, ): UniFile</ID>
    <ID>LongMethod:AnimeDownloader.kt$AnimeDownloader$private suspend fun httpDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, threadNumber: Int, safeDownload: Boolean, ): UniFile</ID>
    <ID>LongMethod:AnimeEpisodeListItem.kt$@Composable fun AnimeEpisodeListItem( title: String, date: String?, watchProgress: String?, scanlator: String?, seen: Boolean, bookmark: Boolean, selected: Boolean, downloadIndicatorEnabled: Boolean, downloadStateProvider: () -&gt; AnimeDownload.State, downloadProgressProvider: () -&gt; Int, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit, onDownloadClick: ((EpisodeDownloadAction) -&gt; Unit)?, onEpisodeSwipe: (LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:AnimeExtensionDetailsScreen.kt$@Composable fun AnimeExtensionDetailsScreen( navigateUp: () -&gt; Unit, state: AnimeExtensionDetailsScreenModel.State, onClickSourcePreferences: (sourceId: Long) -&gt; Unit, onClickEnableAll: () -&gt; Unit, onClickDisableAll: () -&gt; Unit, onClickClearCookies: () -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickSource: (sourceId: Long) -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeExtensionDetailsScreen.kt$@Composable private fun DetailsHeader( extension: AnimeExtension, onClickAgeRating: () -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickAppInfo: (() -&gt; Unit)?, )</ID>
    <ID>LongMethod:AnimeExtensionLoader.kt$AnimeExtensionLoader$private fun loadExtension(context: Context, extensionInfo: AnimeExtensionInfo): AnimeLoadResult</ID>
    <ID>LongMethod:AnimeExtensionsScreen.kt$@Composable private fun AnimeExtensionContent( state: AnimeExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (AnimeExtension) -&gt; Unit, onOpenWebView: (AnimeExtension.Available) -&gt; Unit, onClickItemCancel: (AnimeExtension) -&gt; Unit, onInstallExtension: (AnimeExtension.Available) -&gt; Unit, onUninstallExtension: (AnimeExtension) -&gt; Unit, onUpdateExtension: (AnimeExtension.Installed) -&gt; Unit, onTrustExtension: (AnimeExtension.Untrusted) -&gt; Unit, onOpenExtension: (AnimeExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeExtensionsScreen.kt$@Composable private fun AnimeExtensionItemActions( extension: AnimeExtension, installStep: InstallStep, modifier: Modifier = Modifier, onClickItemCancel: (AnimeExtension) -&gt; Unit = {}, onClickItemAction: (AnimeExtension) -&gt; Unit = {}, onClickItemSecondaryAction: (AnimeExtension) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:AnimeHistoryTab.kt$@Composable fun Screen.animeHistoryTab( context: Context, fromMore: Boolean, ): TabContent</ID>
    <ID>LongMethod:AnimeInfoHeader.kt$@Composable fun ExpandableAnimeDescription( defaultExpandState: Boolean, description: String?, tagsProvider: () -&gt; List&lt;String&gt;?, onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:AnimeInfoHeader.kt$@Composable private fun AnimeSummary( expandedDescription: String, shrunkDescription: String, expanded: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:AnimeInfoHeader.kt$@Composable private fun ColumnScope.AnimeContentInfo( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>LongMethod:AnimeLibraryContent.kt$@Composable fun AnimeLibraryContent( categories: List&lt;Category&gt;, searchQuery: String?, selection: List&lt;LibraryAnime&gt;, contentPadding: PaddingValues, currentPage: () -&gt; Int, hasActiveFilters: Boolean, showPageTabs: Boolean, onChangeCurrentPage: (Int) -&gt; Unit, onAnimeClicked: (Long) -&gt; Unit, onContinueWatchingClicked: ((LibraryAnime) -&gt; Unit)?, onToggleSelection: (LibraryAnime) -&gt; Unit, onToggleRangeSelection: (LibraryAnime) -&gt; Unit, onRefresh: (Category?) -&gt; Boolean, onGlobalSearchClicked: () -&gt; Unit, getNumberOfAnimeForCategory: (Category) -&gt; Int?, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getAnimeLibraryForPage: (Int) -&gt; List&lt;AnimeLibraryItem&gt;, )</ID>
    <ID>LongMethod:AnimeLibraryPager.kt$@Composable fun AnimeLibraryPager( state: PagerState, contentPadding: PaddingValues, hasActiveFilters: Boolean, selectedAnime: List&lt;LibraryAnime&gt;, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getLibraryForPage: (Int) -&gt; List&lt;AnimeLibraryItem&gt;, onClickAnime: (LibraryAnime) -&gt; Unit, onLongClickAnime: (LibraryAnime) -&gt; Unit, onClickContinueWatching: ((LibraryAnime) -&gt; Unit)?, )</ID>
    <ID>LongMethod:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$private fun AnimeLibraryMap.applySort( // Map&lt;MangaId, List&lt;Track&gt;&gt; trackMap: Map&lt;Long, List&lt;AnimeTrack&gt;&gt;, ): AnimeLibraryMap</ID>
    <ID>LongMethod:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$private suspend fun AnimeLibraryMap.applyFilters( trackMap: Map&lt;Long, List&lt;AnimeTrack&gt;&gt;, loggedInTrackers: Map&lt;Long, TriState&gt;, ): AnimeLibraryMap</ID>
    <ID>LongMethod:AnimeLibrarySettingsDialog.kt$@Composable private fun ColumnScope.DisplayPage( screenModel: AnimeLibrarySettingsScreenModel, )</ID>
    <ID>LongMethod:AnimeLibrarySettingsDialog.kt$@Composable private fun ColumnScope.FilterPage( screenModel: AnimeLibrarySettingsScreenModel, )</ID>
    <ID>LongMethod:AnimeLibraryTab.kt$AnimeLibraryTab$@OptIn(ExperimentalMaterial3Api::class) @Composable override fun Content()</ID>
    <ID>LongMethod:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$private suspend fun addAnimeToQueue(categoryId: Long)</ID>
    <ID>LongMethod:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$private suspend fun updateEpisodeList()</ID>
    <ID>LongMethod:AnimeScreen.kt$@Composable fun AnimeScreen( state: AnimeScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, isTabletUi: Boolean, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, showNextEpisodeAirTime: Boolean, alwaysUseExternalPlayer: Boolean, onBackClicked: () -&gt; Unit, onEpisodeClicked: (episode: Episode, alt: Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueWatching: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditFetchIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, changeAnimeSkipIntro: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, // For episode swipe onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, // Episode selection onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllEpisodeSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable fun AnimeScreenLargeImpl( state: AnimeScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, showNextEpisodeAirTime: Boolean, alwaysUseExternalPlayer: Boolean, onBackClicked: () -&gt; Unit, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueWatching: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, changeAnimeSkipIntro: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, // For swipe actions onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, // Episode selection onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllEpisodeSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeScreen.kt$@OptIn(ExperimentalMaterial3Api::class) @Composable private fun AnimeScreenSmallImpl( state: AnimeScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, showNextEpisodeAirTime: Boolean, alwaysUseExternalPlayer: Boolean, onBackClicked: () -&gt; Unit, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueWatching: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, changeAnimeSkipIntro: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, // For episode swipe onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, // Episode selection onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllEpisodeSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeScreen.kt$AnimeScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:AnimeScreen.kt$private fun LazyListScope.sharedEpisodeItems( anime: Anime, episodes: List&lt;EpisodeList&gt;, isAnyEpisodeSelected: Boolean, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeSourceSearchScreen.kt$AnimeSourceSearchScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:AnimeTrackInfoDialog.kt$AnimeTrackInfoDialogHomeScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:AnimeTrackInfoDialog.kt$TrackDateRemoverScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:AnimeTrackInfoDialog.kt$TrackerAnimeRemoveScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:AnimeTrackInfoDialogHome.kt$@Composable private fun TrackInfoItem( title: String, tracker: Tracker, status: StringResource?, onStatusClick: () -&gt; Unit, episodes: String, onEpisodesClick: () -&gt; Unit, score: String?, onScoreClick: (() -&gt; Unit)?, startDate: String?, onStartDateClick: (() -&gt; Unit)?, endDate: String?, onEndDateClick: (() -&gt; Unit)?, onNewSearch: () -&gt; Unit, onOpenInBrowser: () -&gt; Unit, onRemoved: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeTrackerSearch.kt$@Composable fun AnimeTrackerSearch( query: TextFieldValue, onQueryChange: (TextFieldValue) -&gt; Unit, onDispatchQuery: () -&gt; Unit, queryResult: Result&lt;List&lt;AnimeTrackSearch&gt;&gt;?, selected: AnimeTrackSearch?, onSelectedChange: (AnimeTrackSearch) -&gt; Unit, onConfirmSelection: () -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeTrackerSearch.kt$@Composable private fun SearchResultItem( trackSearch: AnimeTrackSearch, selected: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:AnimeUpdatesTab.kt$@Composable fun Screen.animeUpdatesTab( context: Context, fromMore: Boolean, ): TabContent</ID>
    <ID>LongMethod:AnimeUpdatesUiItem.kt$@Composable private fun AnimeUpdatesUiItem( update: AnimeUpdatesWithRelations, selected: Boolean, watchProgress: String?, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onClickCover: (() -&gt; Unit)?, onDownloadEpisode: ((EpisodeDownloadAction) -&gt; Unit)?, // Download Indicator downloadStateProvider: () -&gt; AnimeDownload.State, downloadProgressProvider: () -&gt; Int, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:AnimeUpdatesUiItem.kt$internal fun LazyListScope.animeUpdatesUiItems( uiModels: List&lt;AnimeUpdatesUiModel&gt;, selectionMode: Boolean, onUpdateSelected: (AnimeUpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onClickCover: (AnimeUpdatesItem) -&gt; Unit, onClickUpdate: (AnimeUpdatesItem, altPlayer: Boolean) -&gt; Unit, onDownloadEpisode: (List&lt;AnimeUpdatesItem&gt;, EpisodeDownloadAction) -&gt; Unit, )</ID>
    <ID>LongMethod:AppBar.kt$@Composable fun AppBarActions( actions: ImmutableList&lt;AppBar.AppBarAction&gt;, )</ID>
    <ID>LongMethod:AppBar.kt$@Composable fun SearchToolbar( searchQuery: String?, onChangeSearchQuery: (String?) -&gt; Unit, modifier: Modifier = Modifier, titleContent: @Composable () -&gt; Unit = {}, navigateUp: (() -&gt; Unit)? = null, searchEnabled: Boolean = true, placeholderText: String? = null, onSearch: (String) -&gt; Unit = {}, onClickCloseSearch: () -&gt; Unit = { onChangeSearchQuery(null) }, actions: @Composable RowScope.() -&gt; Unit = {}, scrollBehavior: TopAppBarScrollBehavior? = null, visualTransformation: VisualTransformation = VisualTransformation.None, interactionSource: MutableInteractionSource = remember { MutableInteractionSource() }, )</ID>
    <ID>LongMethod:AppModule.kt$AppModule$override fun InjektRegistrar.registerInjectables()</ID>
    <ID>LongMethod:AppThemePreferenceWidget.kt$@Composable fun AppThemePreviewItem( selected: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:BrowseAnimeSourceScreen.kt$@Composable fun BrowseAnimeSourceContent( source: AnimeSource?, animeList: LazyPagingItems&lt;StateFlow&lt;Anime&gt;&gt;, columns: GridCells, displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onLocalAnimeSourceHelpClick: () -&gt; Unit, onAnimeClick: (Anime) -&gt; Unit, onAnimeLongClick: (Anime) -&gt; Unit, )</ID>
    <ID>LongMethod:BrowseAnimeSourceScreen.kt$BrowseAnimeSourceScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:BrowseAnimeSourceToolbar.kt$@Composable fun BrowseAnimeSourceToolbar( searchQuery: String?, onSearchQueryChange: (String?) -&gt; Unit, source: AnimeSource?, displayMode: LibraryDisplayMode, onDisplayModeChange: (LibraryDisplayMode) -&gt; Unit, navigateUp: () -&gt; Unit, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onSettingsClick: () -&gt; Unit, onSearch: (String) -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior? = null, )</ID>
    <ID>LongMethod:BrowseMangaSourceScreen.kt$@Composable fun BrowseSourceContent( source: MangaSource?, mangaList: LazyPagingItems&lt;StateFlow&lt;Manga&gt;&gt;, columns: GridCells, displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onLocalSourceHelpClick: () -&gt; Unit, onMangaClick: (Manga) -&gt; Unit, onMangaLongClick: (Manga) -&gt; Unit, )</ID>
    <ID>LongMethod:BrowseMangaSourceScreen.kt$BrowseMangaSourceScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:BrowseMangaSourceToolbar.kt$@Composable fun BrowseMangaSourceToolbar( searchQuery: String?, onSearchQueryChange: (String?) -&gt; Unit, source: MangaSource?, displayMode: LibraryDisplayMode, onDisplayModeChange: (LibraryDisplayMode) -&gt; Unit, navigateUp: () -&gt; Unit, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onSettingsClick: () -&gt; Unit, onSearch: (String) -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior? = null, )</ID>
    <ID>LongMethod:CategoryDialogs.kt$@Composable fun ChangeCategoryDialog( initialSelection: ImmutableList&lt;CheckboxState&lt;Category&gt;&gt;, onDismissRequest: () -&gt; Unit, onEditCategories: () -&gt; Unit, onConfirm: (List&lt;Long&gt;, List&lt;Long&gt;) -&gt; Unit, )</ID>
    <ID>LongMethod:CategoryListItem.kt$@Composable fun CategoryListItem( category: Category, canMoveUp: Boolean, canMoveDown: Boolean, onMoveUp: (Category) -&gt; Unit, onMoveDown: (Category) -&gt; Unit, onRename: () -&gt; Unit, onHide: () -&gt; Unit, onDelete: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:ChapterDownloadIndicator.kt$@Composable private fun DownloadingIndicator( enabled: Boolean, downloadState: MangaDownload.State, downloadProgressProvider: () -&gt; Int, onClick: (ChapterDownloadAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:ChapterNavigator.kt$@Composable fun ChapterNavigator( isRtl: Boolean, onNextChapter: () -&gt; Unit, enabledNext: Boolean, onPreviousChapter: () -&gt; Unit, enabledPrevious: Boolean, currentPage: Int, totalPages: Int, onSliderValueChange: (Int) -&gt; Unit, )</ID>
    <ID>LongMethod:ChapterSettingsDialog.kt$@Composable fun ChapterSettingsDialog( onDismissRequest: () -&gt; Unit, manga: Manga? = null, onDownloadFilterChanged: (TriState) -&gt; Unit, onUnreadFilterChanged: (TriState) -&gt; Unit, onBookmarkedFilterChanged: (TriState) -&gt; Unit, scanlatorFilterActive: Boolean, onScanlatorFilterClicked: (() -&gt; Unit), onSortModeChanged: (Long) -&gt; Unit, onDisplayModeChanged: (Long) -&gt; Unit, onSetAsDefault: (applyToExistingManga: Boolean) -&gt; Unit, onResetToDefault: () -&gt; Unit, )</ID>
    <ID>LongMethod:ClearAnimeDatabaseScreen.kt$ClearAnimeDatabaseScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:ClearDatabaseScreen.kt$ClearDatabaseScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:ColorFilterPage.kt$@Composable internal fun ColumnScope.ColorFilterPage(screenModel: ReaderSettingsScreenModel)</ID>
    <ID>LongMethod:CreateBackupScreen.kt$CreateBackupScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:DomainModule.kt$DomainModule$override fun InjektRegistrar.registerInjectables()</ID>
    <ID>LongMethod:DownloadsTab.kt$DownloadsTab$@Composable override fun Content()</ID>
    <ID>LongMethod:DownloadsTab.kt$DownloadsTab$@Composable private fun AnimeActions( animeScreenModel: AnimeDownloadQueueScreenModel, animeDownloadList: List&lt;AnimeDownloadHeaderItem&gt;, )</ID>
    <ID>LongMethod:DownloadsTab.kt$DownloadsTab$@Composable private fun MangaActions( mangaScreenModel: MangaDownloadQueueScreenModel, mangaDownloadList: List&lt;MangaDownloadHeaderItem&gt;, )</ID>
    <ID>LongMethod:EditTextPreferenceWidget.kt$@Composable fun EditTextPreferenceWidget( title: String, subtitle: String?, icon: ImageVector?, value: String, onConfirm: suspend (String) -&gt; Boolean, singleLine: Boolean = true, canBeBlank: Boolean = false, )</ID>
    <ID>LongMethod:EntryBottomActionMenu.kt$@Composable fun EntryBottomActionMenu( visible: Boolean, isManga: Boolean, modifier: Modifier = Modifier, onBookmarkClicked: (() -&gt; Unit)? = null, onRemoveBookmarkClicked: (() -&gt; Unit)? = null, onMarkAsViewedClicked: (() -&gt; Unit)? = null, onMarkAsUnviewedClicked: (() -&gt; Unit)? = null, onMarkPreviousAsViewedClicked: (() -&gt; Unit)? = null, onDownloadClicked: (() -&gt; Unit)? = null, onDeleteClicked: (() -&gt; Unit)? = null, onExternalClicked: (() -&gt; Unit)? = null, onInternalClicked: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:EntryBottomActionMenu.kt$@Composable fun LibraryBottomActionMenu( visible: Boolean, onChangeCategoryClicked: () -&gt; Unit, onMarkAsViewedClicked: () -&gt; Unit, onMarkAsUnviewedClicked: () -&gt; Unit, onDownloadClicked: ((DownloadAction) -&gt; Unit)?, onDeleteClicked: () -&gt; Unit, isManga: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:EntryToolbar.kt$@Composable fun EntryToolbar( title: String, titleAlphaProvider: () -&gt; Float, hasFilters: Boolean, onBackClicked: () -&gt; Unit, onClickFilter: () -&gt; Unit, onClickShare: (() -&gt; Unit)?, onClickDownload: ((DownloadAction) -&gt; Unit)?, onClickEditCategory: (() -&gt; Unit)?, onClickRefresh: () -&gt; Unit, onClickMigrate: (() -&gt; Unit)?, onClickSettings: (() -&gt; Unit)?, // Anime only changeAnimeSkipIntro: (() -&gt; Unit)?, // For action mode actionModeCounter: Int, onSelectAll: () -&gt; Unit, onInvertSelection: () -&gt; Unit, isManga: Boolean, modifier: Modifier = Modifier, backgroundAlphaProvider: () -&gt; Float = titleAlphaProvider, )</ID>
    <ID>LongMethod:EpisodeDownloadIndicator.kt$@Composable private fun DownloadingIndicator( enabled: Boolean, downloadState: AnimeDownload.State, downloadProgressProvider: () -&gt; Int, onClick: (EpisodeDownloadAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:EpisodeListDialog.kt$@Composable private fun EpisodeListItem( episode: Episode, isCurrentEpisode: Boolean, title: String, date: String?, onBookmarkClicked: (Long?, Boolean) -&gt; Unit, onEpisodeClicked: (Long?) -&gt; Unit, )</ID>
    <ID>LongMethod:EpisodeOptionsDialogScreen.kt$@Composable private fun VideoList( useExternalDownloader: Boolean, episode: Episode, anime: Anime, videoList: List&lt;Video&gt;, )</ID>
    <ID>LongMethod:GlobalAnimeSearchToolbar.kt$@Composable fun GlobalAnimeSearchToolbar( searchQuery: String?, progress: Int, total: Int, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, sourceFilter: AnimeSourceFilter, onChangeSearchFilter: (AnimeSourceFilter) -&gt; Unit, onlyShowHasResults: Boolean, onToggleResults: () -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior, )</ID>
    <ID>LongMethod:GlobalMangaSearchToolbar.kt$@Composable fun GlobalMangaSearchToolbar( searchQuery: String?, progress: Int, total: Int, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, sourceFilter: MangaSourceFilter, onChangeSearchFilter: (MangaSourceFilter) -&gt; Unit, onlyShowHasResults: Boolean, onToggleResults: () -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior, )</ID>
    <ID>LongMethod:HomeScreen.kt$HomeScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:HomeScreen.kt$HomeScreen$@Composable private fun NavigationIconItem(tab: eu.kanade.presentation.util.Tab)</ID>
    <ID>LongMethod:ItemsDialogs.kt$@Composable fun SetIntervalDialog( interval: Int, nextUpdate: Instant?, onDismissRequest: () -&gt; Unit, isManga: Boolean, onValueChanged: ((Int) -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MainActivity.kt$MainActivity$private fun handleIntentAction(intent: Intent, navigator: Navigator): Boolean</ID>
    <ID>LongMethod:MangaCategoryTab.kt$@Composable fun Screen.mangaCategoryTab(): TabContent</ID>
    <ID>LongMethod:MangaChapterListItem.kt$@Composable fun MangaChapterListItem( title: String, date: String?, readProgress: String?, scanlator: String?, read: Boolean, bookmark: Boolean, selected: Boolean, downloadIndicatorEnabled: Boolean, downloadStateProvider: () -&gt; MangaDownload.State, downloadProgressProvider: () -&gt; Int, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit, onDownloadClick: ((ChapterDownloadAction) -&gt; Unit)?, onChapterSwipe: (LibraryPreferences.ChapterSwipeAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:MangaCoverDialog.kt$@Composable fun MangaCoverDialog( coverDataProvider: () -&gt; Manga, isCustomCover: Boolean, snackbarHostState: SnackbarHostState, onShareClick: () -&gt; Unit, onSaveClick: () -&gt; Unit, onEditClick: ((EditCoverAction) -&gt; Unit)?, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaDownloadCache.kt$MangaDownloadCache$private fun renewCache()</ID>
    <ID>LongMethod:MangaDownloader.kt$MangaDownloader$private suspend fun downloadChapter(download: MangaDownload)</ID>
    <ID>LongMethod:MangaExtensionDetailsScreen.kt$@Composable fun MangaExtensionDetailsScreen( navigateUp: () -&gt; Unit, state: MangaExtensionDetailsScreenModel.State, onClickSourcePreferences: (sourceId: Long) -&gt; Unit, onClickEnableAll: () -&gt; Unit, onClickDisableAll: () -&gt; Unit, onClickClearCookies: () -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickSource: (sourceId: Long) -&gt; Unit, )</ID>
    <ID>LongMethod:MangaExtensionDetailsScreen.kt$@Composable private fun DetailsHeader( extension: MangaExtension, onClickAgeRating: () -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickAppInfo: (() -&gt; Unit)?, )</ID>
    <ID>LongMethod:MangaExtensionLoader.kt$MangaExtensionLoader$private fun loadMangaExtension(context: Context, extensionInfo: MangaExtensionInfo): MangaLoadResult</ID>
    <ID>LongMethod:MangaExtensionsScreen.kt$@Composable private fun ExtensionContent( state: MangaExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (MangaExtension) -&gt; Unit, onOpenWebView: (MangaExtension.Available) -&gt; Unit, onClickItemCancel: (MangaExtension) -&gt; Unit, onInstallExtension: (MangaExtension.Available) -&gt; Unit, onUninstallExtension: (MangaExtension) -&gt; Unit, onUpdateExtension: (MangaExtension.Installed) -&gt; Unit, onTrustExtension: (MangaExtension.Untrusted) -&gt; Unit, onOpenExtension: (MangaExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaExtensionsScreen.kt$@Composable private fun ExtensionItemActions( extension: MangaExtension, installStep: InstallStep, modifier: Modifier = Modifier, onClickItemCancel: (MangaExtension) -&gt; Unit = {}, onClickItemAction: (MangaExtension) -&gt; Unit = {}, onClickItemSecondaryAction: (MangaExtension) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:MangaHistoryTab.kt$@Composable fun Screen.mangaHistoryTab( context: Context, fromMore: Boolean, ): TabContent</ID>
    <ID>LongMethod:MangaInfoHeader.kt$@Composable fun ExpandableMangaDescription( defaultExpandState: Boolean, description: String?, tagsProvider: () -&gt; List&lt;String&gt;?, onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:MangaInfoHeader.kt$@Composable private fun ColumnScope.MangaContentInfo( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>LongMethod:MangaInfoHeader.kt$@Composable private fun MangaSummary( expandedDescription: String, shrunkDescription: String, expanded: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:MangaLibraryContent.kt$@Composable fun MangaLibraryContent( categories: List&lt;Category&gt;, searchQuery: String?, selection: List&lt;LibraryManga&gt;, contentPadding: PaddingValues, currentPage: () -&gt; Int, hasActiveFilters: Boolean, showPageTabs: Boolean, onChangeCurrentPage: (Int) -&gt; Unit, onMangaClicked: (Long) -&gt; Unit, onContinueReadingClicked: ((LibraryManga) -&gt; Unit)?, onToggleSelection: (LibraryManga) -&gt; Unit, onToggleRangeSelection: (LibraryManga) -&gt; Unit, onRefresh: (Category?) -&gt; Boolean, onGlobalSearchClicked: () -&gt; Unit, getNumberOfMangaForCategory: (Category) -&gt; Int?, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getLibraryForPage: (Int) -&gt; List&lt;MangaLibraryItem&gt;, )</ID>
    <ID>LongMethod:MangaLibraryPager.kt$@Composable fun MangaLibraryPager( state: PagerState, contentPadding: PaddingValues, hasActiveFilters: Boolean, selectedManga: List&lt;LibraryManga&gt;, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getLibraryForPage: (Int) -&gt; List&lt;MangaLibraryItem&gt;, onClickManga: (LibraryManga) -&gt; Unit, onLongClickManga: (LibraryManga) -&gt; Unit, onClickContinueReading: ((LibraryManga) -&gt; Unit)?, )</ID>
    <ID>LongMethod:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$private fun MangaLibraryMap.applySort( // Map&lt;MangaId, List&lt;Track&gt;&gt; trackMap: Map&lt;Long, List&lt;MangaTrack&gt;&gt;, ): MangaLibraryMap</ID>
    <ID>LongMethod:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$private suspend fun MangaLibraryMap.applyFilters( trackMap: Map&lt;Long, List&lt;MangaTrack&gt;&gt;, loggedInTrackers: Map&lt;Long, TriState&gt;, ): MangaLibraryMap</ID>
    <ID>LongMethod:MangaLibrarySettingsDialog.kt$@Composable private fun ColumnScope.DisplayPage( screenModel: MangaLibrarySettingsScreenModel, )</ID>
    <ID>LongMethod:MangaLibrarySettingsDialog.kt$@Composable private fun ColumnScope.FilterPage( screenModel: MangaLibrarySettingsScreenModel, )</ID>
    <ID>LongMethod:MangaLibraryTab.kt$MangaLibraryTab$@OptIn(ExperimentalMaterial3Api::class) @Composable override fun Content()</ID>
    <ID>LongMethod:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$private suspend fun addMangaToQueue(categoryId: Long)</ID>
    <ID>LongMethod:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$private suspend fun updateChapterList()</ID>
    <ID>LongMethod:MangaScreen.kt$@Composable fun MangaScreen( state: MangaScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, isTabletUi: Boolean, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onBackClicked: () -&gt; Unit, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueReading: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditFetchIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, // For chapter swipe onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, // Chapter selection onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllChapterSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaScreen.kt$@Composable fun MangaScreenLargeImpl( state: MangaScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onBackClicked: () -&gt; Unit, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueReading: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, // For swipe actions onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, // Chapter selection onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllChapterSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaScreen.kt$@Composable private fun MangaScreenSmallImpl( state: MangaScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onBackClicked: () -&gt; Unit, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueReading: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, // For chapter swipe onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, // Chapter selection onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllChapterSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaScreen.kt$MangaScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:MangaScreen.kt$private fun LazyListScope.sharedChapterItems( manga: Manga, chapters: List&lt;ChapterList&gt;, isAnyChapterSelected: Boolean, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, )</ID>
    <ID>LongMethod:MangaSourceSearchScreen.kt$MangaSourceSearchScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:MangaSourcesTab.kt$@Composable fun Screen.mangaSourcesTab(): TabContent</ID>
    <ID>LongMethod:MangaTrackInfoDialog.kt$MangaTrackInfoDialogHomeScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:MangaTrackInfoDialog.kt$TrackDateRemoverScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:MangaTrackInfoDialog.kt$TrackerMangaRemoveScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:MangaTrackInfoDialogHome.kt$@Composable private fun TrackInfoItem( title: String, tracker: Tracker, status: StringResource?, onStatusClick: () -&gt; Unit, chapters: String, onChaptersClick: () -&gt; Unit, score: String?, onScoreClick: (() -&gt; Unit)?, startDate: String?, onStartDateClick: (() -&gt; Unit)?, endDate: String?, onEndDateClick: (() -&gt; Unit)?, onNewSearch: () -&gt; Unit, onOpenInBrowser: () -&gt; Unit, onRemoved: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaTrackerSearch.kt$@Composable fun MangaTrackerSearch( query: TextFieldValue, onQueryChange: (TextFieldValue) -&gt; Unit, onDispatchQuery: () -&gt; Unit, queryResult: Result&lt;List&lt;MangaTrackSearch&gt;&gt;?, selected: MangaTrackSearch?, onSelectedChange: (MangaTrackSearch) -&gt; Unit, onConfirmSelection: () -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaTrackerSearch.kt$@Composable private fun SearchResultItem( trackSearch: MangaTrackSearch, selected: Boolean, onClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:MangaUpdatesTab.kt$@Composable fun Screen.mangaUpdatesTab( context: Context, fromMore: Boolean, ): TabContent</ID>
    <ID>LongMethod:MangaUpdatesUiItem.kt$@Composable private fun MangaUpdatesUiItem( update: MangaUpdatesWithRelations, selected: Boolean, readProgress: String?, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onClickCover: (() -&gt; Unit)?, onDownloadChapter: ((ChapterDownloadAction) -&gt; Unit)?, // Download Indicator downloadStateProvider: () -&gt; MangaDownload.State, downloadProgressProvider: () -&gt; Int, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:MangaUpdatesUiItem.kt$internal fun LazyListScope.mangaUpdatesUiItems( uiModels: List&lt;MangaUpdatesUiModel&gt;, selectionMode: Boolean, onUpdateSelected: (MangaUpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onClickCover: (MangaUpdatesItem) -&gt; Unit, onClickUpdate: (MangaUpdatesItem) -&gt; Unit, onDownloadChapter: (List&lt;MangaUpdatesItem&gt;, ChapterDownloadAction) -&gt; Unit, )</ID>
    <ID>LongMethod:MigrateAnimeDialog.kt$@Composable internal fun MigrateAnimeDialog( oldAnime: Anime, newAnime: Anime, screenModel: MigrateAnimeDialogScreenModel, onDismissRequest: () -&gt; Unit, onClickTitle: () -&gt; Unit, onPopScreen: () -&gt; Unit, )</ID>
    <ID>LongMethod:MigrateAnimeDialog.kt$MigrateAnimeDialogScreenModel$private suspend fun migrateAnimeInternal( oldSource: AnimeSource?, newSource: AnimeSource, oldAnime: Anime, newAnime: Anime, sourceEpisodes: List&lt;SEpisode&gt;, replace: Boolean, flags: Int, )</ID>
    <ID>LongMethod:MigrateMangaDialog.kt$@Composable internal fun MigrateMangaDialog( oldManga: Manga, newManga: Manga, screenModel: MigrateMangaDialogScreenModel, onDismissRequest: () -&gt; Unit, onClickTitle: () -&gt; Unit, onPopScreen: () -&gt; Unit, )</ID>
    <ID>LongMethod:MigrateMangaDialog.kt$MigrateMangaDialogScreenModel$private suspend fun migrateMangaInternal( oldSource: MangaSource?, newSource: MangaSource, oldManga: Manga, newManga: Manga, sourceChapters: List&lt;SChapter&gt;, replace: Boolean, flags: Int, )</ID>
    <ID>LongMethod:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, playerPreferences: PlayerPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>LongMethod:MoreScreen.kt$@Composable fun MoreScreen( downloadQueueStateProvider: () -&gt; DownloadQueueState, downloadedOnly: Boolean, onDownloadedOnlyChange: (Boolean) -&gt; Unit, incognitoMode: Boolean, onIncognitoModeChange: (Boolean) -&gt; Unit, isFDroid: Boolean, navStyle: NavStyle, onClickAlt: () -&gt; Unit, onClickDownloadQueue: () -&gt; Unit, onClickCategories: () -&gt; Unit, onClickStats: () -&gt; Unit, onClickStorage: () -&gt; Unit, onClickDataAndStorage: () -&gt; Unit, onClickSettings: () -&gt; Unit, onClickAbout: () -&gt; Unit, )</ID>
    <ID>LongMethod:NotificationReceiver.kt$NotificationReceiver$override fun onReceive(context: Context, intent: Intent)</ID>
    <ID>LongMethod:Notifications.kt$Notifications$fun createChannels(context: Context)</ID>
    <ID>LongMethod:PlayerActivity.kt$PlayerActivity$@SuppressLint("ClickableViewAccessibility") override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PlayerActivity.kt$PlayerActivity$@SuppressLint("SourceLockedOrientationActivity") internal suspend fun fileLoaded()</ID>
    <ID>LongMethod:PlayerActivity.kt$PlayerActivity$fun doubleTapSeek( time: Int, event: MotionEvent? = null, isDoubleTap: Boolean = true, videoChapterText: String? = null, chapterSeek: String? = null, )</ID>
    <ID>LongMethod:PlayerActivity.kt$PlayerActivity$private fun updateChapters(stamps: List&lt;Stamp&gt;? = null, duration: Int? = null)</ID>
    <ID>LongMethod:PlayerSettingsSheet.kt$@Composable fun PlayerSettingsSheet( screenModel: PlayerSettingsScreenModel, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:PreferenceItem.kt$@Composable internal fun PreferenceItem( item: Preference.PreferenceItem&lt;*&gt;, highlightKey: String?, )</ID>
    <ID>LongMethod:ReaderActivity.kt$ReaderActivity$override fun onCreate(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:ReaderActivity.kt$ReaderActivity$private fun initializeMenu()</ID>
    <ID>LongMethod:ReaderAppBars.kt$@Composable fun ReaderAppBars( visible: Boolean, fullscreen: Boolean, mangaTitle: String?, chapterTitle: String?, navigateUp: () -&gt; Unit, onClickTopAppBar: () -&gt; Unit, bookmarked: Boolean, onToggleBookmarked: () -&gt; Unit, onOpenInWebView: (() -&gt; Unit)?, onShare: (() -&gt; Unit)?, viewer: Viewer?, onNextChapter: () -&gt; Unit, enabledNext: Boolean, onPreviousChapter: () -&gt; Unit, enabledPrevious: Boolean, currentPage: Int, totalPages: Int, onSliderValueChange: (Int) -&gt; Unit, readingMode: ReadingMode, onClickReadingMode: () -&gt; Unit, orientation: ReaderOrientation, onClickOrientation: () -&gt; Unit, cropEnabled: Boolean, onClickCropBorder: () -&gt; Unit, onClickSettings: () -&gt; Unit, )</ID>
    <ID>LongMethod:ReadingModePage.kt$@Composable private fun ColumnScope.PagerViewerSettings(screenModel: ReaderSettingsScreenModel)</ID>
    <ID>LongMethod:ScanlatorFilterDialog.kt$@Composable fun ScanlatorFilterDialog( availableScanlators: Set&lt;String&gt;, excludedScanlators: Set&lt;String&gt;, onDismissRequest: () -&gt; Unit, onConfirm: (Set&lt;String&gt;) -&gt; Unit, )</ID>
    <ID>LongMethod:ScreenshotOptionsSheet.kt$@Composable fun ScreenshotOptionsSheet( screenModel: PlayerSettingsScreenModel, cachePath: String, onSetAsCover: (() -&gt; InputStream) -&gt; Unit, onShare: (() -&gt; InputStream) -&gt; Unit, onSave: (() -&gt; InputStream) -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$@Composable private fun getDataSaverGroup(): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$@Composable private fun getExtensionsGroup( basePreferences: BasePreferences, ): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$@Composable private fun getNetworkGroup( networkPreferences: NetworkPreferences, ): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsAppearanceScreen.kt$SettingsAppearanceScreen$@Composable private fun getDisplayGroup( uiPreferences: UiPreferences, ): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsBrowseScreen.kt$SettingsBrowseScreen$@Composable override fun getPreferences(): List&lt;Preference&gt;</ID>
    <ID>LongMethod:SettingsDataScreen.kt$SettingsDataScreen$@Composable private fun getBackupAndRestoreGroup(backupPreferences: BackupPreferences): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsDownloadScreen.kt$SettingsDownloadScreen$@Composable override fun getPreferences(): List&lt;Preference&gt;</ID>
    <ID>LongMethod:SettingsDownloadScreen.kt$SettingsDownloadScreen$@Composable private fun getAutoDownloadGroup( downloadPreferences: DownloadPreferences, allAnimeCategories: ImmutableList&lt;Category&gt;, allMangaCategories: ImmutableList&lt;Category&gt;, ): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsLibraryScreen.kt$SettingsLibraryScreen$@Composable private fun getCategoriesGroup( navigator: Navigator, allCategories: List&lt;Category&gt;, allAnimeCategories: List&lt;Category&gt;, libraryPreferences: LibraryPreferences, ): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsLibraryScreen.kt$SettingsLibraryScreen$@Composable private fun getGlobalUpdateGroup( allMangaCategories: List&lt;Category&gt;, allAnimeCategories: List&lt;Category&gt;, libraryPreferences: LibraryPreferences, ): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsMainScreen.kt$SettingsMainScreen$@Composable fun Content(twoPane: Boolean)</ID>
    <ID>LongMethod:SettingsPlayerScreen.kt$SettingsPlayerScreen$@Composable private fun getOrientationGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsPlayerScreen.kt$SettingsPlayerScreen$@Composable private fun getSeekingGroup(playerPreferences: PlayerPreferences): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsReaderScreen.kt$SettingsReaderScreen$@Composable private fun getPagedGroup(readerPreferences: ReaderPreferences): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsReaderScreen.kt$SettingsReaderScreen$@Composable private fun getWebtoonGroup(readerPreferences: ReaderPreferences): Preference.PreferenceGroup</ID>
    <ID>LongMethod:SettingsSearchScreen.kt$@Composable private fun SearchResult( searchKey: String, modifier: Modifier = Modifier, listState: LazyListState = rememberLazyListState(), contentPadding: PaddingValues = PaddingValues(), onItemClick: (SearchResultItem) -&gt; Unit, )</ID>
    <ID>LongMethod:SettingsSearchScreen.kt$SettingsSearchScreen$@Composable override fun Content()</ID>
    <ID>LongMethod:SettingsTrackingScreen.kt$SettingsTrackingScreen$@Composable override fun getPreferences(): List&lt;Preference&gt;</ID>
    <ID>LongMethod:SettingsTrackingScreen.kt$SettingsTrackingScreen$@Composable private fun TrackingLoginDialog( tracker: Tracker, uNameStringRes: StringResource, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongMethod:SourceFilterAnimeDialog.kt$@Composable private fun FilterItem(filter: AnimeFilter&lt;*&gt;, onUpdate: () -&gt; Unit)</ID>
    <ID>LongMethod:SourceFilterMangaDialog.kt$@Composable private fun FilterItem(filter: Filter&lt;*&gt;, onUpdate: () -&gt; Unit)</ID>
    <ID>LongMethod:StorageItem.kt$@Composable fun StorageItem( item: StorageItem, isManga: Boolean, modifier: Modifier = Modifier, onDelete: (Long) -&gt; Unit, )</ID>
    <ID>LongMethod:StorageStep.kt$StorageStep$@Composable override fun Content()</ID>
    <ID>LongMethod:StreamsCatalogSheet.kt$@Composable private fun StreamsPageBuilder( externalTrackCode: String?, stream: PlayerViewModel.VideoStreams.Stream, openContentFd: (Uri) -&gt; String?, onTrackSelected: (Int) -&gt; Unit, )</ID>
    <ID>LongMethod:SubtitleColorPage.kt$@Composable private fun SubtitleColors( screenModel: PlayerSettingsScreenModel, )</ID>
    <ID>LongMethod:SubtitleDelayPage.kt$@Composable fun StreamsDelayPage( screenModel: PlayerSettingsScreenModel, )</ID>
    <ID>LongMethod:SubtitleFontPage.kt$@Composable private fun SubtitleFont( screenModel: PlayerSettingsScreenModel, )</ID>
    <ID>LongMethod:SyncChaptersWithSource.kt$SyncChaptersWithSource$suspend fun await( rawSourceChapters: List&lt;SChapter&gt;, manga: Manga, source: MangaSource, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Chapter&gt;</ID>
    <ID>LongMethod:SyncEpisodesWithSource.kt$SyncEpisodesWithSource$suspend fun await( rawSourceEpisodes: List&lt;SEpisode&gt;, anime: Anime, source: AnimeSource, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Episode&gt;</ID>
    <ID>LongMethod:TabbedScreen.kt$@Composable fun TabbedScreen( titleRes: StringResource?, tabs: ImmutableList&lt;TabContent&gt;, modifier: Modifier = Modifier, startIndex: Int? = null, mangaSearchQuery: String? = null, onChangeMangaSearchQuery: (String?) -&gt; Unit = {}, scrollable: Boolean = false, animeSearchQuery: String? = null, onChangeAnimeSearchQuery: (String?) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:TriStateListDialog.kt$@SuppressLint("ComposeParameterOrder") @Composable fun &lt;T&gt; TriStateListDialog( title: String, message: String? = null, items: List&lt;T&gt;, initialChecked: List&lt;T&gt;, initialInversed: List&lt;T&gt;, itemLabel: @Composable (T) -&gt; String, onDismissRequest: () -&gt; Unit, onValueChanged: (newIncluded: List&lt;T&gt;, newExcluded: List&lt;T&gt;) -&gt; Unit, )</ID>
    <ID>LongMethod:WebViewScreenContent.kt$@Composable fun WebViewScreenContent( onNavigateUp: () -&gt; Unit, initialTitle: String?, url: String, onShare: (String) -&gt; Unit, onOpenInBrowser: (String) -&gt; Unit, onClearCookies: (String) -&gt; Unit, headers: Map&lt;String, String&gt; = emptyMap(), onUrlChange: (String) -&gt; Unit = {}, )</ID>
    <ID>LongMethod:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>LongParameterList:AnimeCategoryScreen.kt$( categories: List&lt;Category&gt;, lazyListState: LazyListState, paddingValues: PaddingValues, onClickRename: (Category) -&gt; Unit, onClickHide: (Category) -&gt; Unit, onClickDelete: (Category) -&gt; Unit, onMoveUp: (Category) -&gt; Unit, onMoveDown: (Category) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeCategoryScreen.kt$( state: AnimeCategoryScreenState.Success, onClickCreate: () -&gt; Unit, onClickRename: (Category) -&gt; Unit, onClickHide: (Category) -&gt; Unit, onClickDelete: (Category) -&gt; Unit, onClickMoveUp: (Category) -&gt; Unit, onClickMoveDown: (Category) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeCoverDialog.kt$( coverDataProvider: () -&gt; Anime, isCustomCover: Boolean, snackbarHostState: SnackbarHostState, onShareClick: () -&gt; Unit, onSaveClick: () -&gt; Unit, onEditClick: ((EditCoverAction) -&gt; Unit)?, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeCoverFetcher.kt$AnimeCoverFetcher$( private val url: String?, private val isLibraryAnime: Boolean, private val options: Options, private val coverFileLazy: Lazy&lt;File?&gt;, private val customCoverFileLazy: Lazy&lt;File&gt;, private val diskCacheKeyLazy: Lazy&lt;String&gt;, private val sourceLazy: Lazy&lt;AnimeHttpSource?&gt;, private val callFactoryLazy: Lazy&lt;Call.Factory&gt;, private val diskCacheLazy: Lazy&lt;DiskCache&gt;, )</ID>
    <ID>LongParameterList:AnimeEpisodeListItem.kt$( action: LibraryPreferences.EpisodeSwipeAction, seen: Boolean, bookmark: Boolean, downloadState: AnimeDownload.State, background: Color, onSwipe: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeEpisodeListItem.kt$( title: String, date: String?, watchProgress: String?, scanlator: String?, seen: Boolean, bookmark: Boolean, selected: Boolean, downloadIndicatorEnabled: Boolean, downloadStateProvider: () -&gt; AnimeDownload.State, downloadProgressProvider: () -&gt; Int, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit, onDownloadClick: ((EpisodeDownloadAction) -&gt; Unit)?, onEpisodeSwipe: (LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:AnimeExtensionDetailsScreen.kt$( contentPadding: PaddingValues, extension: AnimeExtension.Installed, sources: ImmutableList&lt;AnimeExtensionSourceItem&gt;, onClickSourcePreferences: (sourceId: Long) -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickSource: (sourceId: Long) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeExtensionDetailsScreen.kt$( navigateUp: () -&gt; Unit, state: AnimeExtensionDetailsScreenModel.State, onClickSourcePreferences: (sourceId: Long) -&gt; Unit, onClickEnableAll: () -&gt; Unit, onClickDisableAll: () -&gt; Unit, onClickClearCookies: () -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickSource: (sourceId: Long) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeExtensionsScreen.kt$( item: AnimeExtensionUiModel.Item, onClickItem: (AnimeExtension) -&gt; Unit, onLongClickItem: (AnimeExtension) -&gt; Unit, onClickItemCancel: (AnimeExtension) -&gt; Unit, onClickItemAction: (AnimeExtension) -&gt; Unit, modifier: Modifier = Modifier, onClickItemSecondaryAction: (AnimeExtension) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeExtensionsScreen.kt$( state: AnimeExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (AnimeExtension) -&gt; Unit, onOpenWebView: (AnimeExtension.Available) -&gt; Unit, onClickItemCancel: (AnimeExtension) -&gt; Unit, onInstallExtension: (AnimeExtension.Available) -&gt; Unit, onUninstallExtension: (AnimeExtension) -&gt; Unit, onUpdateExtension: (AnimeExtension.Installed) -&gt; Unit, onTrustExtension: (AnimeExtension.Untrusted) -&gt; Unit, onOpenExtension: (AnimeExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeExtensionsScreen.kt$( state: AnimeExtensionsScreenModel.State, contentPadding: PaddingValues, searchQuery: String?, onLongClickItem: (AnimeExtension) -&gt; Unit, onClickItemCancel: (AnimeExtension) -&gt; Unit, onOpenWebView: (AnimeExtension.Available) -&gt; Unit, onInstallExtension: (AnimeExtension.Available) -&gt; Unit, onUninstallExtension: (AnimeExtension) -&gt; Unit, onUpdateExtension: (AnimeExtension.Installed) -&gt; Unit, onTrustExtension: (AnimeExtension.Untrusted) -&gt; Unit, onOpenExtension: (AnimeExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, onRefresh: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeInfoHeader.kt$( appBarPadding: Dp, coverDataProvider: () -&gt; Anime, onCoverClick: () -&gt; Unit, title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, )</ID>
    <ID>LongParameterList:AnimeInfoHeader.kt$( favorite: Boolean, trackingCount: Int, nextUpdate: Instant?, isUserIntervalMode: Boolean, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, onEditIntervalClicked: (() -&gt; Unit)?, onEditCategory: (() -&gt; Unit)?, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:AnimeInfoHeader.kt$( isTabletUi: Boolean, appBarPadding: Dp, title: String, author: String?, artist: String?, sourceName: String, isStubSource: Boolean, coverDataProvider: () -&gt; Anime, status: Long, onCoverClick: () -&gt; Unit, doSearch: (query: String, global: Boolean) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:AnimeInfoHeader.kt$( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>LongParameterList:AnimeLibraryComfortableGrid.kt$( items: List&lt;AnimeLibraryItem&gt;, columns: Int, contentPadding: PaddingValues, selection: List&lt;LibraryAnime&gt;, onClick: (LibraryAnime) -&gt; Unit, onLongClick: (LibraryAnime) -&gt; Unit, onClickContinueWatching: ((LibraryAnime) -&gt; Unit)?, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeLibraryCompactGrid.kt$( items: List&lt;AnimeLibraryItem&gt;, showTitle: Boolean, columns: Int, contentPadding: PaddingValues, selection: List&lt;LibraryAnime&gt;, onClick: (LibraryAnime) -&gt; Unit, onLongClick: (LibraryAnime) -&gt; Unit, onClickContinueWatching: ((LibraryAnime) -&gt; Unit)?, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeLibraryContent.kt$( categories: List&lt;Category&gt;, searchQuery: String?, selection: List&lt;LibraryAnime&gt;, contentPadding: PaddingValues, currentPage: () -&gt; Int, hasActiveFilters: Boolean, showPageTabs: Boolean, onChangeCurrentPage: (Int) -&gt; Unit, onAnimeClicked: (Long) -&gt; Unit, onContinueWatchingClicked: ((LibraryAnime) -&gt; Unit)?, onToggleSelection: (LibraryAnime) -&gt; Unit, onToggleRangeSelection: (LibraryAnime) -&gt; Unit, onRefresh: (Category?) -&gt; Boolean, onGlobalSearchClicked: () -&gt; Unit, getNumberOfAnimeForCategory: (Category) -&gt; Int?, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getAnimeLibraryForPage: (Int) -&gt; List&lt;AnimeLibraryItem&gt;, )</ID>
    <ID>LongParameterList:AnimeLibraryList.kt$( items: List&lt;AnimeLibraryItem&gt;, contentPadding: PaddingValues, selection: List&lt;LibraryAnime&gt;, onClick: (LibraryAnime) -&gt; Unit, onLongClick: (LibraryAnime) -&gt; Unit, onClickContinueWatching: ((LibraryAnime) -&gt; Unit)?, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeLibraryPager.kt$( state: PagerState, contentPadding: PaddingValues, hasActiveFilters: Boolean, selectedAnime: List&lt;LibraryAnime&gt;, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getLibraryForPage: (Int) -&gt; List&lt;AnimeLibraryItem&gt;, onClickAnime: (LibraryAnime) -&gt; Unit, onLongClickAnime: (LibraryAnime) -&gt; Unit, onClickContinueWatching: ((LibraryAnime) -&gt; Unit)?, )</ID>
    <ID>LongParameterList:AnimeRestorer.kt$AnimeRestorer$( anime: Anime, episodes: List&lt;BackupEpisode&gt;, categories: List&lt;Long&gt;, backupCategories: List&lt;BackupCategory&gt;, history: List&lt;BackupAnimeHistory&gt;, tracks: List&lt;BackupAnimeTracking&gt;, )</ID>
    <ID>LongParameterList:AnimeScreen.kt$( anime: Anime, episodes: List&lt;EpisodeList&gt;, isAnyEpisodeSelected: Boolean, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeScreen.kt$( selected: List&lt;EpisodeList.Item&gt;, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, fillFraction: Float, alwaysUseExternalPlayer: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:AnimeScreen.kt$( state: AnimeScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, showNextEpisodeAirTime: Boolean, alwaysUseExternalPlayer: Boolean, onBackClicked: () -&gt; Unit, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueWatching: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, changeAnimeSkipIntro: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, // For swipe actions onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, // Episode selection onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllEpisodeSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeScreen.kt$( state: AnimeScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, showNextEpisodeAirTime: Boolean, alwaysUseExternalPlayer: Boolean, onBackClicked: () -&gt; Unit, onEpisodeClicked: (Episode, Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueWatching: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, changeAnimeSkipIntro: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, // For episode swipe onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, // Episode selection onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllEpisodeSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeScreen.kt$( state: AnimeScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, isTabletUi: Boolean, episodeSwipeStartAction: LibraryPreferences.EpisodeSwipeAction, episodeSwipeEndAction: LibraryPreferences.EpisodeSwipeAction, showNextEpisodeAirTime: Boolean, alwaysUseExternalPlayer: Boolean, onBackClicked: () -&gt; Unit, onEpisodeClicked: (episode: Episode, alt: Boolean) -&gt; Unit, onDownloadEpisode: ((List&lt;EpisodeList.Item&gt;, EpisodeDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueWatching: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditFetchIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, changeAnimeSkipIntro: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Episode&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;Episode&gt;, markAsSeen: Boolean) -&gt; Unit, onMarkPreviousAsSeenClicked: (Episode) -&gt; Unit, onMultiDeleteClicked: (List&lt;Episode&gt;) -&gt; Unit, // For episode swipe onEpisodeSwipe: (EpisodeList.Item, LibraryPreferences.EpisodeSwipeAction) -&gt; Unit, // Episode selection onEpisodeSelected: (EpisodeList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllEpisodeSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeTrackInfoDialogHome.kt$( title: String, tracker: Tracker, status: StringResource?, onStatusClick: () -&gt; Unit, episodes: String, onEpisodesClick: () -&gt; Unit, score: String?, onScoreClick: (() -&gt; Unit)?, startDate: String?, onStartDateClick: (() -&gt; Unit)?, endDate: String?, onEndDateClick: (() -&gt; Unit)?, onNewSearch: () -&gt; Unit, onOpenInBrowser: () -&gt; Unit, onRemoved: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeTrackInfoDialogHome.kt$( trackItems: List&lt;AnimeTrackItem&gt;, dateFormat: DateTimeFormatter, onStatusClick: (AnimeTrackItem) -&gt; Unit, onEpisodeClick: (AnimeTrackItem) -&gt; Unit, onScoreClick: (AnimeTrackItem) -&gt; Unit, onStartDateEdit: (AnimeTrackItem) -&gt; Unit, onEndDateEdit: (AnimeTrackItem) -&gt; Unit, onNewSearch: (AnimeTrackItem) -&gt; Unit, onOpenInBrowser: (AnimeTrackItem) -&gt; Unit, onRemoved: (AnimeTrackItem) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeTrackerSearch.kt$( query: TextFieldValue, onQueryChange: (TextFieldValue) -&gt; Unit, onDispatchQuery: () -&gt; Unit, queryResult: Result&lt;List&lt;AnimeTrackSearch&gt;&gt;?, selected: AnimeTrackSearch?, onSelectedChange: (AnimeTrackSearch) -&gt; Unit, onConfirmSelection: () -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeUpdatesScreen.kt$( selected: List&lt;AnimeUpdatesItem&gt;, onDownloadEpisode: (List&lt;AnimeUpdatesItem&gt;, EpisodeDownloadAction) -&gt; Unit, onMultiBookmarkClicked: (List&lt;AnimeUpdatesItem&gt;, bookmark: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;AnimeUpdatesItem&gt;, seen: Boolean) -&gt; Unit, onMultiDeleteClicked: (List&lt;AnimeUpdatesItem&gt;) -&gt; Unit, onOpenEpisode: (AnimeUpdatesItem, altPlayer: Boolean) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeUpdatesScreen.kt$( state: AnimeUpdatesScreenModel.State, snackbarHostState: SnackbarHostState, lastUpdated: Long, onClickCover: (AnimeUpdatesItem) -&gt; Unit, onSelectAll: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, onUpdateLibrary: () -&gt; Boolean, onDownloadEpisode: (List&lt;AnimeUpdatesItem&gt;, EpisodeDownloadAction) -&gt; Unit, onMultiBookmarkClicked: (List&lt;AnimeUpdatesItem&gt;, bookmark: Boolean) -&gt; Unit, onMultiMarkAsSeenClicked: (List&lt;AnimeUpdatesItem&gt;, seen: Boolean) -&gt; Unit, onMultiDeleteClicked: (List&lt;AnimeUpdatesItem&gt;) -&gt; Unit, onUpdateSelected: (AnimeUpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onOpenEpisode: (AnimeUpdatesItem, altPlayer: Boolean) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeUpdatesUiItem.kt$( uiModels: List&lt;AnimeUpdatesUiModel&gt;, selectionMode: Boolean, onUpdateSelected: (AnimeUpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onClickCover: (AnimeUpdatesItem) -&gt; Unit, onClickUpdate: (AnimeUpdatesItem, altPlayer: Boolean) -&gt; Unit, onDownloadEpisode: (List&lt;AnimeUpdatesItem&gt;, EpisodeDownloadAction) -&gt; Unit, )</ID>
    <ID>LongParameterList:AnimeUpdatesUiItem.kt$( update: AnimeUpdatesWithRelations, selected: Boolean, watchProgress: String?, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onClickCover: (() -&gt; Unit)?, onDownloadEpisode: ((EpisodeDownloadAction) -&gt; Unit)?, // Download Indicator downloadStateProvider: () -&gt; AnimeDownload.State, downloadProgressProvider: () -&gt; Int, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:BottomReaderBar.kt$( backgroundColor: Color, readingMode: ReadingMode, onClickReadingMode: () -&gt; Unit, orientation: ReaderOrientation, onClickOrientation: () -&gt; Unit, cropEnabled: Boolean, onClickCropBorder: () -&gt; Unit, onClickSettings: () -&gt; Unit, )</ID>
    <ID>LongParameterList:BrowseAnimeSourceScreen.kt$( source: AnimeSource?, animeList: LazyPagingItems&lt;StateFlow&lt;Anime&gt;&gt;, columns: GridCells, displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onLocalAnimeSourceHelpClick: () -&gt; Unit, onAnimeClick: (Anime) -&gt; Unit, onAnimeLongClick: (Anime) -&gt; Unit, )</ID>
    <ID>LongParameterList:BrowseAnimeSourceToolbar.kt$( searchQuery: String?, onSearchQueryChange: (String?) -&gt; Unit, source: AnimeSource?, displayMode: LibraryDisplayMode, onDisplayModeChange: (LibraryDisplayMode) -&gt; Unit, navigateUp: () -&gt; Unit, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onSettingsClick: () -&gt; Unit, onSearch: (String) -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior? = null, )</ID>
    <ID>LongParameterList:BrowseMangaSourceScreen.kt$( source: MangaSource?, mangaList: LazyPagingItems&lt;StateFlow&lt;Manga&gt;&gt;, columns: GridCells, displayMode: LibraryDisplayMode, snackbarHostState: SnackbarHostState, contentPadding: PaddingValues, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onLocalSourceHelpClick: () -&gt; Unit, onMangaClick: (Manga) -&gt; Unit, onMangaLongClick: (Manga) -&gt; Unit, )</ID>
    <ID>LongParameterList:BrowseMangaSourceToolbar.kt$( searchQuery: String?, onSearchQueryChange: (String?) -&gt; Unit, source: MangaSource?, displayMode: LibraryDisplayMode, onDisplayModeChange: (LibraryDisplayMode) -&gt; Unit, navigateUp: () -&gt; Unit, onWebViewClick: () -&gt; Unit, onHelpClick: () -&gt; Unit, onSettingsClick: () -&gt; Unit, onSearch: (String) -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior? = null, )</ID>
    <ID>LongParameterList:CategoryListItem.kt$( category: Category, canMoveUp: Boolean, canMoveDown: Boolean, onMoveUp: (Category) -&gt; Unit, onMoveDown: (Category) -&gt; Unit, onRename: () -&gt; Unit, onHide: () -&gt; Unit, onDelete: () -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:ChapterNavigator.kt$( isRtl: Boolean, onNextChapter: () -&gt; Unit, enabledNext: Boolean, onPreviousChapter: () -&gt; Unit, enabledPrevious: Boolean, currentPage: Int, totalPages: Int, onSliderValueChange: (Int) -&gt; Unit, )</ID>
    <ID>LongParameterList:ChapterSettingsDialog.kt$( downloadFilter: TriState, onDownloadFilterChanged: ((TriState) -&gt; Unit)?, unreadFilter: TriState, onUnreadFilterChanged: (TriState) -&gt; Unit, bookmarkedFilter: TriState, onBookmarkedFilterChanged: (TriState) -&gt; Unit, scanlatorFilterActive: Boolean, onScanlatorFilterClicked: (() -&gt; Unit), )</ID>
    <ID>LongParameterList:ChapterSettingsDialog.kt$( onDismissRequest: () -&gt; Unit, manga: Manga? = null, onDownloadFilterChanged: (TriState) -&gt; Unit, onUnreadFilterChanged: (TriState) -&gt; Unit, onBookmarkedFilterChanged: (TriState) -&gt; Unit, scanlatorFilterActive: Boolean, onScanlatorFilterClicked: (() -&gt; Unit), onSortModeChanged: (Long) -&gt; Unit, onDisplayModeChanged: (Long) -&gt; Unit, onSetAsDefault: (applyToExistingManga: Boolean) -&gt; Unit, onResetToDefault: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ChapterTransition.kt$( topLabel: String, topChapter: Chapter?, topChapterDownloaded: Boolean, bottomLabel: String, bottomChapter: Chapter?, bottomChapterDownloaded: Boolean, fallbackLabel: String, chapterGap: Int, )</ID>
    <ID>LongParameterList:CommonStorageScreenModel.kt$CommonStorageScreenModel$( private val downloadCacheChanges: SharedFlow&lt;Unit&gt;, private val downloadCacheIsInitializing: StateFlow&lt;Boolean&gt;, private val libraries: Flow&lt;List&lt;T&gt;&gt;, private val categories: (Boolean) -&gt; Flow&lt;List&lt;Category&gt;&gt;, private val getDownloadSize: T.() -&gt; Long, private val getDownloadCount: T.() -&gt; Int, private val getId: T.() -&gt; Long, private val getCategoryId: T.() -&gt; Long, private val getTitle: T.() -&gt; String, private val getThumbnail: T.() -&gt; String?, private val libraryPreferences: LibraryPreferences = Injekt.get(), )</ID>
    <ID>LongParameterList:EntryBottomActionMenu.kt$( visible: Boolean, onChangeCategoryClicked: () -&gt; Unit, onMarkAsViewedClicked: () -&gt; Unit, onMarkAsUnviewedClicked: () -&gt; Unit, onDownloadClicked: ((DownloadAction) -&gt; Unit)?, onDeleteClicked: () -&gt; Unit, isManga: Boolean, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:EntryToolbar.kt$( title: String, titleAlphaProvider: () -&gt; Float, hasFilters: Boolean, onBackClicked: () -&gt; Unit, onClickFilter: () -&gt; Unit, onClickShare: (() -&gt; Unit)?, onClickDownload: ((DownloadAction) -&gt; Unit)?, onClickEditCategory: (() -&gt; Unit)?, onClickRefresh: () -&gt; Unit, onClickMigrate: (() -&gt; Unit)?, onClickSettings: (() -&gt; Unit)?, // Anime only changeAnimeSkipIntro: (() -&gt; Unit)?, // For action mode actionModeCounter: Int, onSelectAll: () -&gt; Unit, onInvertSelection: () -&gt; Unit, isManga: Boolean, modifier: Modifier = Modifier, backgroundAlphaProvider: () -&gt; Float = titleAlphaProvider, )</ID>
    <ID>LongParameterList:EpisodeListDialog.kt$( displayMode: Long, currentEpisodeIndex: Int, episodeList: List&lt;Episode&gt;, dateRelativeTime: Boolean, dateFormat: DateTimeFormatter, onBookmarkClicked: (Long?, Boolean) -&gt; Unit, onEpisodeClicked: (Long?) -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:EpisodeListDialog.kt$( episode: Episode, isCurrentEpisode: Boolean, title: String, date: String?, onBookmarkClicked: (Long?, Boolean) -&gt; Unit, onEpisodeClicked: (Long?) -&gt; Unit, )</ID>
    <ID>LongParameterList:EpisodeSettingsDialog.kt$( downloadFilter: TriState, onDownloadFilterChanged: ((TriState) -&gt; Unit)?, unseenFilter: TriState, onUnseenFilterChanged: (TriState) -&gt; Unit, bookmarkedFilter: TriState, onBookmarkedFilterChanged: (TriState) -&gt; Unit, )</ID>
    <ID>LongParameterList:EpisodeSettingsDialog.kt$( onDismissRequest: () -&gt; Unit, anime: Anime? = null, onDownloadFilterChanged: (TriState) -&gt; Unit, onUnseenFilterChanged: (TriState) -&gt; Unit, onBookmarkedFilterChanged: (TriState) -&gt; Unit, onSortModeChanged: (Long) -&gt; Unit, onDisplayModeChanged: (Long) -&gt; Unit, onSetAsDefault: (applyToExistingAnime: Boolean) -&gt; Unit, )</ID>
    <ID>LongParameterList:GlobalAnimeSearchScreen.kt$( items: Map&lt;AnimeCatalogueSource, AnimeSearchItemResult&gt;, contentPadding: PaddingValues, getAnime: @Composable (Anime) -&gt; State&lt;Anime&gt;, onClickSource: (AnimeCatalogueSource) -&gt; Unit, onClickItem: (Anime) -&gt; Unit, onLongClickItem: (Anime) -&gt; Unit, fromSourceId: Long? = null, )</ID>
    <ID>LongParameterList:GlobalAnimeSearchScreen.kt$( state: AnimeSearchScreenModel.State, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, onChangeSearchFilter: (AnimeSourceFilter) -&gt; Unit, onToggleResults: () -&gt; Unit, getAnime: @Composable (Anime) -&gt; State&lt;Anime&gt;, onClickSource: (AnimeCatalogueSource) -&gt; Unit, onClickItem: (Anime) -&gt; Unit, onLongClickItem: (Anime) -&gt; Unit, )</ID>
    <ID>LongParameterList:GlobalAnimeSearchToolbar.kt$( searchQuery: String?, progress: Int, total: Int, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, sourceFilter: AnimeSourceFilter, onChangeSearchFilter: (AnimeSourceFilter) -&gt; Unit, onlyShowHasResults: Boolean, onToggleResults: () -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior, )</ID>
    <ID>LongParameterList:GlobalMangaSearchScreen.kt$( items: Map&lt;CatalogueSource, MangaSearchItemResult&gt;, contentPadding: PaddingValues, getManga: @Composable (Manga) -&gt; State&lt;Manga&gt;, onClickSource: (CatalogueSource) -&gt; Unit, onClickItem: (Manga) -&gt; Unit, onLongClickItem: (Manga) -&gt; Unit, fromSourceId: Long? = null, )</ID>
    <ID>LongParameterList:GlobalMangaSearchScreen.kt$( state: MangaSearchScreenModel.State, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, onChangeSearchFilter: (MangaSourceFilter) -&gt; Unit, onToggleResults: () -&gt; Unit, getManga: @Composable (Manga) -&gt; State&lt;Manga&gt;, onClickSource: (CatalogueSource) -&gt; Unit, onClickItem: (Manga) -&gt; Unit, onLongClickItem: (Manga) -&gt; Unit, )</ID>
    <ID>LongParameterList:GlobalMangaSearchToolbar.kt$( searchQuery: String?, progress: Int, total: Int, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, sourceFilter: MangaSourceFilter, onChangeSearchFilter: (MangaSourceFilter) -&gt; Unit, onlyShowHasResults: Boolean, onToggleResults: () -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior, )</ID>
    <ID>LongParameterList:LibraryToolbar.kt$( hasActiveFilters: Boolean, selectedCount: Int, title: LibraryToolbarTitle, onClickUnselectAll: () -&gt; Unit, onClickSelectAll: () -&gt; Unit, onClickInvertSelection: () -&gt; Unit, onClickFilter: () -&gt; Unit, onClickRefresh: () -&gt; Unit, onClickGlobalUpdate: () -&gt; Unit, onClickOpenRandomEntry: () -&gt; Unit, searchQuery: String?, onSearchQueryChange: (String?) -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior?, navigateUp: (() -&gt; Unit)? = null, )</ID>
    <ID>LongParameterList:LibraryToolbar.kt$( title: LibraryToolbarTitle, hasFilters: Boolean, searchQuery: String?, onSearchQueryChange: (String?) -&gt; Unit, onClickFilter: () -&gt; Unit, onClickRefresh: () -&gt; Unit, onClickGlobalUpdate: () -&gt; Unit, onClickOpenRandomEntry: () -&gt; Unit, scrollBehavior: TopAppBarScrollBehavior?, navigateUp: (() -&gt; Unit)?, )</ID>
    <ID>LongParameterList:ListPreferenceWidget.kt$( value: T, title: String, subtitle: String?, icon: ImageVector?, entries: Map&lt;out T, String&gt;, onValueChange: (T) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaCategoryScreen.kt$( categories: List&lt;Category&gt;, lazyListState: LazyListState, paddingValues: PaddingValues, onClickRename: (Category) -&gt; Unit, onClickHide: (Category) -&gt; Unit, onClickDelete: (Category) -&gt; Unit, onMoveUp: (Category) -&gt; Unit, onMoveDown: (Category) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaCategoryScreen.kt$( state: MangaCategoryScreenState.Success, onClickCreate: () -&gt; Unit, onClickRename: (Category) -&gt; Unit, onClickHide: (Category) -&gt; Unit, onClickDelete: (Category) -&gt; Unit, onClickMoveUp: (Category) -&gt; Unit, onClickMoveDown: (Category) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaChapterListItem.kt$( action: LibraryPreferences.ChapterSwipeAction, read: Boolean, bookmark: Boolean, downloadState: MangaDownload.State, background: Color, onSwipe: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaChapterListItem.kt$( title: String, date: String?, readProgress: String?, scanlator: String?, read: Boolean, bookmark: Boolean, selected: Boolean, downloadIndicatorEnabled: Boolean, downloadStateProvider: () -&gt; MangaDownload.State, downloadProgressProvider: () -&gt; Int, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onLongClick: () -&gt; Unit, onClick: () -&gt; Unit, onDownloadClick: ((ChapterDownloadAction) -&gt; Unit)?, onChapterSwipe: (LibraryPreferences.ChapterSwipeAction) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:MangaCoverDialog.kt$( coverDataProvider: () -&gt; Manga, isCustomCover: Boolean, snackbarHostState: SnackbarHostState, onShareClick: () -&gt; Unit, onSaveClick: () -&gt; Unit, onEditClick: ((EditCoverAction) -&gt; Unit)?, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaCoverFetcher.kt$MangaCoverFetcher$( private val url: String?, private val isLibraryManga: Boolean, private val options: Options, private val coverFileLazy: Lazy&lt;File?&gt;, private val customCoverFileLazy: Lazy&lt;File&gt;, private val diskCacheKeyLazy: Lazy&lt;String&gt;, private val sourceLazy: Lazy&lt;HttpSource?&gt;, private val callFactoryLazy: Lazy&lt;Call.Factory&gt;, private val diskCacheLazy: Lazy&lt;DiskCache&gt;, )</ID>
    <ID>LongParameterList:MangaExtensionDetailsScreen.kt$( contentPadding: PaddingValues, extension: MangaExtension.Installed, sources: ImmutableList&lt;MangaExtensionSourceItem&gt;, onClickSourcePreferences: (sourceId: Long) -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickSource: (sourceId: Long) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaExtensionDetailsScreen.kt$( navigateUp: () -&gt; Unit, state: MangaExtensionDetailsScreenModel.State, onClickSourcePreferences: (sourceId: Long) -&gt; Unit, onClickEnableAll: () -&gt; Unit, onClickDisableAll: () -&gt; Unit, onClickClearCookies: () -&gt; Unit, onClickUninstall: () -&gt; Unit, onClickSource: (sourceId: Long) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaExtensionsScreen.kt$( item: MangaExtensionUiModel.Item, onClickItem: (MangaExtension) -&gt; Unit, onLongClickItem: (MangaExtension) -&gt; Unit, onClickItemCancel: (MangaExtension) -&gt; Unit, onClickItemAction: (MangaExtension) -&gt; Unit, onClickItemSecondaryAction: (MangaExtension) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:MangaExtensionsScreen.kt$( state: MangaExtensionsScreenModel.State, contentPadding: PaddingValues, onLongClickItem: (MangaExtension) -&gt; Unit, onOpenWebView: (MangaExtension.Available) -&gt; Unit, onClickItemCancel: (MangaExtension) -&gt; Unit, onInstallExtension: (MangaExtension.Available) -&gt; Unit, onUninstallExtension: (MangaExtension) -&gt; Unit, onUpdateExtension: (MangaExtension.Installed) -&gt; Unit, onTrustExtension: (MangaExtension.Untrusted) -&gt; Unit, onOpenExtension: (MangaExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaExtensionsScreen.kt$( state: MangaExtensionsScreenModel.State, contentPadding: PaddingValues, searchQuery: String?, onLongClickItem: (MangaExtension) -&gt; Unit, onClickItemCancel: (MangaExtension) -&gt; Unit, onOpenWebView: (MangaExtension.Available) -&gt; Unit, onInstallExtension: (MangaExtension.Available) -&gt; Unit, onUninstallExtension: (MangaExtension) -&gt; Unit, onUpdateExtension: (MangaExtension.Installed) -&gt; Unit, onTrustExtension: (MangaExtension.Untrusted) -&gt; Unit, onOpenExtension: (MangaExtension.Installed) -&gt; Unit, onClickUpdateAll: () -&gt; Unit, onRefresh: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaInfoHeader.kt$( appBarPadding: Dp, coverDataProvider: () -&gt; Manga, onCoverClick: () -&gt; Unit, title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, )</ID>
    <ID>LongParameterList:MangaInfoHeader.kt$( favorite: Boolean, trackingCount: Int, nextUpdate: Instant?, isUserIntervalMode: Boolean, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, onEditIntervalClicked: (() -&gt; Unit)?, onEditCategory: (() -&gt; Unit)?, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:MangaInfoHeader.kt$( isTabletUi: Boolean, appBarPadding: Dp, title: String, author: String?, artist: String?, sourceName: String, isStubSource: Boolean, coverDataProvider: () -&gt; Manga, status: Long, onCoverClick: () -&gt; Unit, doSearch: (query: String, global: Boolean) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:MangaInfoHeader.kt$( title: String, doSearch: (query: String, global: Boolean) -&gt; Unit, author: String?, artist: String?, status: Long, sourceName: String, isStubSource: Boolean, textAlign: TextAlign? = LocalTextStyle.current.textAlign, )</ID>
    <ID>LongParameterList:MangaLibraryComfortableGrid.kt$( items: List&lt;MangaLibraryItem&gt;, columns: Int, contentPadding: PaddingValues, selection: List&lt;LibraryManga&gt;, onClick: (LibraryManga) -&gt; Unit, onLongClick: (LibraryManga) -&gt; Unit, onClickContinueReading: ((LibraryManga) -&gt; Unit)?, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaLibraryCompactGrid.kt$( items: List&lt;MangaLibraryItem&gt;, showTitle: Boolean, columns: Int, contentPadding: PaddingValues, selection: List&lt;LibraryManga&gt;, onClick: (LibraryManga) -&gt; Unit, onLongClick: (LibraryManga) -&gt; Unit, onClickContinueReading: ((LibraryManga) -&gt; Unit)?, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaLibraryContent.kt$( categories: List&lt;Category&gt;, searchQuery: String?, selection: List&lt;LibraryManga&gt;, contentPadding: PaddingValues, currentPage: () -&gt; Int, hasActiveFilters: Boolean, showPageTabs: Boolean, onChangeCurrentPage: (Int) -&gt; Unit, onMangaClicked: (Long) -&gt; Unit, onContinueReadingClicked: ((LibraryManga) -&gt; Unit)?, onToggleSelection: (LibraryManga) -&gt; Unit, onToggleRangeSelection: (LibraryManga) -&gt; Unit, onRefresh: (Category?) -&gt; Boolean, onGlobalSearchClicked: () -&gt; Unit, getNumberOfMangaForCategory: (Category) -&gt; Int?, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getLibraryForPage: (Int) -&gt; List&lt;MangaLibraryItem&gt;, )</ID>
    <ID>LongParameterList:MangaLibraryList.kt$( items: List&lt;MangaLibraryItem&gt;, contentPadding: PaddingValues, selection: List&lt;LibraryManga&gt;, onClick: (LibraryManga) -&gt; Unit, onLongClick: (LibraryManga) -&gt; Unit, onClickContinueReading: ((LibraryManga) -&gt; Unit)?, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaLibraryPager.kt$( state: PagerState, contentPadding: PaddingValues, hasActiveFilters: Boolean, selectedManga: List&lt;LibraryManga&gt;, searchQuery: String?, onGlobalSearchClicked: () -&gt; Unit, getDisplayMode: (Int) -&gt; PreferenceMutableState&lt;LibraryDisplayMode&gt;, getColumnsForOrientation: (Boolean) -&gt; PreferenceMutableState&lt;Int&gt;, getLibraryForPage: (Int) -&gt; List&lt;MangaLibraryItem&gt;, onClickManga: (LibraryManga) -&gt; Unit, onLongClickManga: (LibraryManga) -&gt; Unit, onClickContinueReading: ((LibraryManga) -&gt; Unit)?, )</ID>
    <ID>LongParameterList:MangaRestorer.kt$MangaRestorer$( manga: Manga, chapters: List&lt;BackupChapter&gt;, categories: List&lt;Long&gt;, backupCategories: List&lt;BackupCategory&gt;, history: List&lt;BackupHistory&gt;, tracks: List&lt;BackupTracking&gt;, excludedScanlators: List&lt;String&gt;, )</ID>
    <ID>LongParameterList:MangaScreen.kt$( manga: Manga, chapters: List&lt;ChapterList&gt;, isAnyChapterSelected: Boolean, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaScreen.kt$( selected: List&lt;ChapterList.Item&gt;, onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, fillFraction: Float, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:MangaScreen.kt$( state: MangaScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onBackClicked: () -&gt; Unit, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueReading: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, // For swipe actions onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, // Chapter selection onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllChapterSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaScreen.kt$( state: MangaScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onBackClicked: () -&gt; Unit, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onCopyTagToClipboard: (tag: String) -&gt; Unit, onFilterClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueReading: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, onSettingsClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, // For chapter swipe onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, // Chapter selection onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllChapterSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaScreen.kt$( state: MangaScreenModel.State.Success, snackbarHostState: SnackbarHostState, nextUpdate: Instant?, isTabletUi: Boolean, chapterSwipeStartAction: LibraryPreferences.ChapterSwipeAction, chapterSwipeEndAction: LibraryPreferences.ChapterSwipeAction, onBackClicked: () -&gt; Unit, onChapterClicked: (Chapter) -&gt; Unit, onDownloadChapter: ((List&lt;ChapterList.Item&gt;, ChapterDownloadAction) -&gt; Unit)?, onAddToLibraryClicked: () -&gt; Unit, onWebViewClicked: (() -&gt; Unit)?, onWebViewLongClicked: (() -&gt; Unit)?, onTrackingClicked: () -&gt; Unit, // For tags menu onTagSearch: (String) -&gt; Unit, onFilterButtonClicked: () -&gt; Unit, onRefresh: () -&gt; Unit, onContinueReading: () -&gt; Unit, onSearch: (query: String, global: Boolean) -&gt; Unit, // For cover dialog onCoverClicked: () -&gt; Unit, // For top action menu onShareClicked: (() -&gt; Unit)?, onDownloadActionClicked: ((DownloadAction) -&gt; Unit)?, onEditCategoryClicked: (() -&gt; Unit)?, onEditFetchIntervalClicked: (() -&gt; Unit)?, onMigrateClicked: (() -&gt; Unit)?, // For bottom action menu onMultiBookmarkClicked: (List&lt;Chapter&gt;, bookmarked: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;Chapter&gt;, markAsRead: Boolean) -&gt; Unit, onMarkPreviousAsReadClicked: (Chapter) -&gt; Unit, onMultiDeleteClicked: (List&lt;Chapter&gt;) -&gt; Unit, // For chapter swipe onChapterSwipe: (ChapterList.Item, LibraryPreferences.ChapterSwipeAction) -&gt; Unit, // Chapter selection onChapterSelected: (ChapterList.Item, Boolean, Boolean, Boolean) -&gt; Unit, onAllChapterSelected: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaTrackInfoDialogHome.kt$( title: String, tracker: Tracker, status: StringResource?, onStatusClick: () -&gt; Unit, chapters: String, onChaptersClick: () -&gt; Unit, score: String?, onScoreClick: (() -&gt; Unit)?, startDate: String?, onStartDateClick: (() -&gt; Unit)?, endDate: String?, onEndDateClick: (() -&gt; Unit)?, onNewSearch: () -&gt; Unit, onOpenInBrowser: () -&gt; Unit, onRemoved: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaTrackInfoDialogHome.kt$( trackItems: List&lt;MangaTrackItem&gt;, dateFormat: DateTimeFormatter, onStatusClick: (MangaTrackItem) -&gt; Unit, onChapterClick: (MangaTrackItem) -&gt; Unit, onScoreClick: (MangaTrackItem) -&gt; Unit, onStartDateEdit: (MangaTrackItem) -&gt; Unit, onEndDateEdit: (MangaTrackItem) -&gt; Unit, onNewSearch: (MangaTrackItem) -&gt; Unit, onOpenInBrowser: (MangaTrackItem) -&gt; Unit, onRemoved: (MangaTrackItem) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaTrackerSearch.kt$( query: TextFieldValue, onQueryChange: (TextFieldValue) -&gt; Unit, onDispatchQuery: () -&gt; Unit, queryResult: Result&lt;List&lt;MangaTrackSearch&gt;&gt;?, selected: MangaTrackSearch?, onSelectedChange: (MangaTrackSearch) -&gt; Unit, onConfirmSelection: () -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaUpdatesScreen.kt$( state: MangaUpdatesScreenModel.State, snackbarHostState: SnackbarHostState, lastUpdated: Long, onClickCover: (MangaUpdatesItem) -&gt; Unit, onSelectAll: (Boolean) -&gt; Unit, onInvertSelection: () -&gt; Unit, onUpdateLibrary: () -&gt; Boolean, onDownloadChapter: (List&lt;MangaUpdatesItem&gt;, ChapterDownloadAction) -&gt; Unit, onMultiBookmarkClicked: (List&lt;MangaUpdatesItem&gt;, bookmark: Boolean) -&gt; Unit, onMultiMarkAsReadClicked: (List&lt;MangaUpdatesItem&gt;, read: Boolean) -&gt; Unit, onMultiDeleteClicked: (List&lt;MangaUpdatesItem&gt;) -&gt; Unit, onUpdateSelected: (MangaUpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onOpenChapter: (MangaUpdatesItem) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaUpdatesUiItem.kt$( uiModels: List&lt;MangaUpdatesUiModel&gt;, selectionMode: Boolean, onUpdateSelected: (MangaUpdatesItem, Boolean, Boolean, Boolean) -&gt; Unit, onClickCover: (MangaUpdatesItem) -&gt; Unit, onClickUpdate: (MangaUpdatesItem) -&gt; Unit, onDownloadChapter: (List&lt;MangaUpdatesItem&gt;, ChapterDownloadAction) -&gt; Unit, )</ID>
    <ID>LongParameterList:MangaUpdatesUiItem.kt$( update: MangaUpdatesWithRelations, selected: Boolean, readProgress: String?, onClick: () -&gt; Unit, onLongClick: () -&gt; Unit, onClickCover: (() -&gt; Unit)?, onDownloadChapter: ((ChapterDownloadAction) -&gt; Unit)?, // Download Indicator downloadStateProvider: () -&gt; MangaDownload.State, downloadProgressProvider: () -&gt; Int, modifier: Modifier = Modifier, )</ID>
    <ID>LongParameterList:MigrateAnimeDialog.kt$( oldAnime: Anime, newAnime: Anime, screenModel: MigrateAnimeDialogScreenModel, onDismissRequest: () -&gt; Unit, onClickTitle: () -&gt; Unit, onPopScreen: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MigrateAnimeDialog.kt$MigrateAnimeDialogScreenModel$( oldSource: AnimeSource?, newSource: AnimeSource, oldAnime: Anime, newAnime: Anime, sourceEpisodes: List&lt;SEpisode&gt;, replace: Boolean, flags: Int, )</ID>
    <ID>LongParameterList:MigrateAnimeSearchScreen.kt$( state: AnimeSearchScreenModel.State, fromSourceId: Long?, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, onChangeSearchFilter: (AnimeSourceFilter) -&gt; Unit, onToggleResults: () -&gt; Unit, getAnime: @Composable (Anime) -&gt; State&lt;Anime&gt;, onClickSource: (AnimeCatalogueSource) -&gt; Unit, onClickItem: (Anime) -&gt; Unit, onLongClickItem: (Anime) -&gt; Unit, )</ID>
    <ID>LongParameterList:MigrateAnimeSourceScreen.kt$( list: ImmutableList&lt;Pair&lt;AnimeSource, Long&gt;&gt;, contentPadding: PaddingValues, onClickItem: (AnimeSource) -&gt; Unit, onLongClickItem: (AnimeSource) -&gt; Unit, sortingMode: SetMigrateSorting.Mode, onToggleSortingMode: () -&gt; Unit, sortingDirection: SetMigrateSorting.Direction, onToggleSortingDirection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MigrateMangaDialog.kt$( oldManga: Manga, newManga: Manga, screenModel: MigrateMangaDialogScreenModel, onDismissRequest: () -&gt; Unit, onClickTitle: () -&gt; Unit, onPopScreen: () -&gt; Unit, )</ID>
    <ID>LongParameterList:MigrateMangaDialog.kt$MigrateMangaDialogScreenModel$( oldSource: MangaSource?, newSource: MangaSource, oldManga: Manga, newManga: Manga, sourceChapters: List&lt;SChapter&gt;, replace: Boolean, flags: Int, )</ID>
    <ID>LongParameterList:MigrateMangaSearchScreen.kt$( state: MangaSearchScreenModel.State, fromSourceId: Long?, navigateUp: () -&gt; Unit, onChangeSearchQuery: (String?) -&gt; Unit, onSearch: (String) -&gt; Unit, onChangeSearchFilter: (MangaSourceFilter) -&gt; Unit, onToggleResults: () -&gt; Unit, getManga: @Composable (Manga) -&gt; State&lt;Manga&gt;, onClickSource: (CatalogueSource) -&gt; Unit, onClickItem: (Manga) -&gt; Unit, onLongClickItem: (Manga) -&gt; Unit, )</ID>
    <ID>LongParameterList:MigrateMangaSourceScreen.kt$( list: ImmutableList&lt;Pair&lt;Source, Long&gt;&gt;, contentPadding: PaddingValues, onClickItem: (Source) -&gt; Unit, onLongClickItem: (Source) -&gt; Unit, sortingMode: SetMigrateSorting.Mode, onToggleSortingMode: () -&gt; Unit, sortingDirection: SetMigrateSorting.Direction, onToggleSortingDirection: () -&gt; Unit, )</ID>
    <ID>LongParameterList:Migrations.kt$Migrations$( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, playerPreferences: PlayerPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, )</ID>
    <ID>LongParameterList:MoreScreen.kt$( downloadQueueStateProvider: () -&gt; DownloadQueueState, downloadedOnly: Boolean, onDownloadedOnlyChange: (Boolean) -&gt; Unit, incognitoMode: Boolean, onIncognitoModeChange: (Boolean) -&gt; Unit, isFDroid: Boolean, navStyle: NavStyle, onClickAlt: () -&gt; Unit, onClickDownloadQueue: () -&gt; Unit, onClickCategories: () -&gt; Unit, onClickStats: () -&gt; Unit, onClickStorage: () -&gt; Unit, onClickDataAndStorage: () -&gt; Unit, onClickSettings: () -&gt; Unit, onClickAbout: () -&gt; Unit, )</ID>
    <ID>LongParameterList:PictureInPictureHandler.kt$PictureInPictureHandler$( context: Context, title: String, subtitle: String, paused: Boolean, replaceWithPrevious: Boolean, pipOnExit: Boolean, videoAspect: Double, playlistCount: Int, playlistPosition: Int, )</ID>
    <ID>LongParameterList:ReaderAppBars.kt$( visible: Boolean, fullscreen: Boolean, mangaTitle: String?, chapterTitle: String?, navigateUp: () -&gt; Unit, onClickTopAppBar: () -&gt; Unit, bookmarked: Boolean, onToggleBookmarked: () -&gt; Unit, onOpenInWebView: (() -&gt; Unit)?, onShare: (() -&gt; Unit)?, viewer: Viewer?, onNextChapter: () -&gt; Unit, enabledNext: Boolean, onPreviousChapter: () -&gt; Unit, enabledPrevious: Boolean, currentPage: Int, totalPages: Int, onSliderValueChange: (Int) -&gt; Unit, readingMode: ReadingMode, onClickReadingMode: () -&gt; Unit, orientation: ReaderOrientation, onClickOrientation: () -&gt; Unit, cropEnabled: Boolean, onClickCropBorder: () -&gt; Unit, onClickSettings: () -&gt; Unit, )</ID>
    <ID>LongParameterList:ScreenshotOptionsSheet.kt$( screenModel: PlayerSettingsScreenModel, cachePath: String, onSetAsCover: (() -&gt; InputStream) -&gt; Unit, onShare: (() -&gt; InputStream) -&gt; Unit, onSave: (() -&gt; InputStream) -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:StreamsCatalogSheet.kt$( isEpisodeOnline: Boolean?, videoStreams: PlayerViewModel.VideoStreams, openContentFd: (Uri) -&gt; String?, onQualitySelected: (Int) -&gt; Unit, onSubtitleSelected: (Int) -&gt; Unit, onAudioSelected: (Int) -&gt; Unit, onSettingsClicked: () -&gt; Unit, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:SubtitleSettingsSheet.kt$( font: String, isBold: Boolean, isItalic: Boolean, textColor: Color, borderColor: Color, backgroundColor: Color, )</ID>
    <ID>LongParameterList:SyncChaptersWithSource.kt$SyncChaptersWithSource$( private val downloadManager: MangaDownloadManager, private val downloadProvider: MangaDownloadProvider, private val chapterRepository: ChapterRepository, private val shouldUpdateDbChapter: ShouldUpdateDbChapter, private val updateManga: UpdateManga, private val updateChapter: UpdateChapter, private val getChaptersByMangaId: GetChaptersByMangaId, private val getExcludedScanlators: GetExcludedScanlators, )</ID>
    <ID>LongParameterList:SyncEpisodesWithSource.kt$SyncEpisodesWithSource$( private val downloadManager: AnimeDownloadManager, private val downloadProvider: AnimeDownloadProvider, private val episodeRepository: EpisodeRepository, private val shouldUpdateDbEpisode: ShouldUpdateDbEpisode, private val updateAnime: UpdateAnime, private val updateEpisode: UpdateEpisode, private val getEpisodesByAnimeId: GetEpisodesByAnimeId, )</ID>
    <ID>LongParameterList:TrackInfoDialogSelector.kt$( selection: Int, onSelectionChange: (Int) -&gt; Unit, range: Iterable&lt;Int&gt;, onConfirm: () -&gt; Unit, onDismissRequest: () -&gt; Unit, isManga: Boolean, )</ID>
    <ID>LongParameterList:TrackInfoDialogSelector.kt$( title: String, initialSelectedDateMillis: Long, selectableDates: SelectableDates, onConfirm: (Long) -&gt; Unit, onRemove: (() -&gt; Unit)?, onDismissRequest: () -&gt; Unit, )</ID>
    <ID>LongParameterList:TriStateListDialog.kt$( title: String, message: String? = null, items: List&lt;T&gt;, initialChecked: List&lt;T&gt;, initialInversed: List&lt;T&gt;, itemLabel: @Composable (T) -&gt; String, onDismissRequest: () -&gt; Unit, onValueChanged: (newIncluded: List&lt;T&gt;, newExcluded: List&lt;T&gt;) -&gt; Unit, )</ID>
    <ID>LongParameterList:WebViewScreenContent.kt$( onNavigateUp: () -&gt; Unit, initialTitle: String?, url: String, onShare: (String) -&gt; Unit, onOpenInBrowser: (String) -&gt; Unit, onClearCookies: (String) -&gt; Unit, headers: Map&lt;String, String&gt; = emptyMap(), onUrlChange: (String) -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:WebtoonRecyclerView.kt$WebtoonRecyclerView$( fromRate: Float, toRate: Float, fromX: Float, toX: Float, fromY: Float, toY: Float, )</ID>
    <ID>LoopWithTooManyJumpStatements:AnimeDownloadStore.kt$AnimeDownloadStore$for</ID>
    <ID>LoopWithTooManyJumpStatements:AnimeUpdatesScreenModel.kt$AnimeUpdatesScreenModel$for</ID>
    <ID>LoopWithTooManyJumpStatements:Kavita.kt$Kavita$for</ID>
    <ID>LoopWithTooManyJumpStatements:MangaDownloadStore.kt$MangaDownloadStore$for</ID>
    <ID>LoopWithTooManyJumpStatements:MangaUpdatesScreenModel.kt$MangaUpdatesScreenModel$for</ID>
    <ID>LoopWithTooManyJumpStatements:PlayerActivity.kt$PlayerActivity$for</ID>
    <ID>MagicNumber:AdaptiveSheet.kt$220</ID>
    <ID>MagicNumber:AdaptiveSheet.kt$90</ID>
    <ID>MagicNumber:AniChartApi.kt$AniChartApi$1000</ID>
    <ID>MagicNumber:AniSkipApi.kt$AniSkipApi.PlayerUtils$0.15f</ID>
    <ID>MagicNumber:AniSkipApi.kt$AniSkipApi.PlayerUtils$100</ID>
    <ID>MagicNumber:AniSkipApi.kt$AniSkipApi.PlayerUtils$500</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$10</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$10.0</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$100</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$10f</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$18</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$20</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$20.0</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$25</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$25.0</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$35</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$5</ID>
    <ID>MagicNumber:Anilist.kt$Anilist$60</ID>
    <ID>MagicNumber:AnilistApi.kt$AnilistApi$31536000000</ID>
    <ID>MagicNumber:AnilistModels.kt$10</ID>
    <ID>MagicNumber:AnilistModels.kt$30</ID>
    <ID>MagicNumber:AnilistModels.kt$35</ID>
    <ID>MagicNumber:AnilistModels.kt$50</ID>
    <ID>MagicNumber:AnilistModels.kt$60</ID>
    <ID>MagicNumber:AnilistModels.kt$70</ID>
    <ID>MagicNumber:AnilistModels.kt$90</ID>
    <ID>MagicNumber:AnimeDownload.kt$AnimeDownload$100</ID>
    <ID>MagicNumber:AnimeDownload.kt$AnimeDownload.State.DOWNLOADED$3</ID>
    <ID>MagicNumber:AnimeDownload.kt$AnimeDownload.State.ERROR$4</ID>
    <ID>MagicNumber:AnimeDownloadHolder.kt$AnimeDownloadHolder$100</ID>
    <ID>MagicNumber:AnimeDownloadNotifier.kt$AnimeDownloadNotifier$100</ID>
    <ID>MagicNumber:AnimeDownloadNotifier.kt$AnimeDownloadNotifier$15</ID>
    <ID>MagicNumber:AnimeDownloadNotifier.kt$AnimeDownloadNotifier$30</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$1.01F</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$10</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$100</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$100.0</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$1000L</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$1024</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$10L</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$3</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$3600</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$3600000L</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$4</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$50</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$60</ID>
    <ID>MagicNumber:AnimeDownloader.kt$AnimeDownloader$60000L</ID>
    <ID>MagicNumber:AnimeExtensionDetailsScreen.kt$1.5f</ID>
    <ID>MagicNumber:AnimeExtensionInstallService.kt$AnimeExtensionInstallService$100</ID>
    <ID>MagicNumber:AnimeInfoHeader.kt$0.2f</ID>
    <ID>MagicNumber:AnimeInfoHeader.kt$0.65f</ID>
    <ID>MagicNumber:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$10</ID>
    <ID>MagicNumber:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$25</ID>
    <ID>MagicNumber:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$5</ID>
    <ID>MagicNumber:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$5</ID>
    <ID>MagicNumber:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob.Companion$10</ID>
    <ID>MagicNumber:AnimeLibraryUpdateNotifier.kt$AnimeLibraryUpdateNotifier$40</ID>
    <ID>MagicNumber:AnimeMetadataUpdateJob.kt$AnimeMetadataUpdateJob$5</ID>
    <ID>MagicNumber:AnimeScreen.kt$1000L</ID>
    <ID>MagicNumber:AnimeScreen.kt$3600000L</ID>
    <ID>MagicNumber:AnimeScreenModel.kt$AnimeScreenModel$10</ID>
    <ID>MagicNumber:AnimeScreenModel.kt$AnimeScreenModel$103</ID>
    <ID>MagicNumber:AnimeScreenModel.kt$AnimeScreenModel$25</ID>
    <ID>MagicNumber:AnimeScreenModel.kt$AnimeScreenModel$5</ID>
    <ID>MagicNumber:AnimeTrackInfoDialog.kt$TrackEpisodeSelectorScreen.Model$10000</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$10</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$100</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$1000L</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$100L</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$30</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$365</ID>
    <ID>MagicNumber:AnimeTrackerSearchPreviewProvider.kt$AnimeTrackerSearchPreviewProvider$40</ID>
    <ID>MagicNumber:AnimeUpdatesScreenModel.kt$AnimeUpdatesScreenModel$3</ID>
    <ID>MagicNumber:AnimeUpdatesUiItem.kt$3600000L</ID>
    <ID>MagicNumber:App.kt$App$300</ID>
    <ID>MagicNumber:App.kt$App$8</ID>
    <ID>MagicNumber:AppBar.kt$0.08f</ID>
    <ID>MagicNumber:AppBar.kt$0.12f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.3f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.5f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.6f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.7f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$0.8f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$16f</ID>
    <ID>MagicNumber:AppThemePreferenceWidget.kt$9f</ID>
    <ID>MagicNumber:AppUpdateDownloadJob.kt$AppUpdateDownloadJob.&lt;no name provided&gt;$100</ID>
    <ID>MagicNumber:AppUpdateDownloadJob.kt$AppUpdateDownloadJob.&lt;no name provided&gt;$200</ID>
    <ID>MagicNumber:AppUpdateNotifier.kt$AppUpdateNotifier$100</ID>
    <ID>MagicNumber:Backup.kt$Backup$100</ID>
    <ID>MagicNumber:Backup.kt$Backup$101</ID>
    <ID>MagicNumber:Backup.kt$Backup$102</ID>
    <ID>MagicNumber:Backup.kt$Backup$103</ID>
    <ID>MagicNumber:Backup.kt$Backup$104</ID>
    <ID>MagicNumber:Backup.kt$Backup$105</ID>
    <ID>MagicNumber:Backup.kt$Backup$106</ID>
    <ID>MagicNumber:Backup.kt$Backup$3</ID>
    <ID>MagicNumber:Backup.kt$Backup$4</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$100</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$101</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$102</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$103</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$104</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$105</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$106</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$107</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$13</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$16</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$17</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$18</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$3</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$4</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$5</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$6</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$7</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$8</ID>
    <ID>MagicNumber:BackupAnime.kt$BackupAnime$9</ID>
    <ID>MagicNumber:BackupAnimeHistory.kt$BackupAnimeHistory$3</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$10</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$100</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$11</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$3</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$4</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$5</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$6</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$7</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$8</ID>
    <ID>MagicNumber:BackupAnimeTracking.kt$BackupAnimeTracking$9</ID>
    <ID>MagicNumber:BackupCategory.kt$BackupCategory$100</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$10</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$11</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$3</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$4</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$5</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$6</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$7</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$8</ID>
    <ID>MagicNumber:BackupChapter.kt$BackupChapter$9</ID>
    <ID>MagicNumber:BackupCreateJob.kt$BackupCreateJob.Companion$10</ID>
    <ID>MagicNumber:BackupDecoder.kt$BackupDecoder$0x1f8b</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$10</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$11</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$16</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$3</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$4</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$5</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$6</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$7</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$8</ID>
    <ID>MagicNumber:BackupEpisode.kt$BackupEpisode$9</ID>
    <ID>MagicNumber:BackupHistory.kt$BackupHistory$3</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$100</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$101</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$102</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$103</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$104</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$105</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$106</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$107</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$108</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$13</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$14</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$16</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$17</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$18</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$3</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$4</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$5</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$6</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$7</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$8</ID>
    <ID>MagicNumber:BackupManga.kt$BackupManga$9</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$10</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$100</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$11</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$3</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$4</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$5</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$6</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$7</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$8</ID>
    <ID>MagicNumber:BackupTracking.kt$BackupTracking$9</ID>
    <ID>MagicNumber:Bangumi.kt$Bangumi$145</ID>
    <ID>MagicNumber:Bangumi.kt$Bangumi$153</ID>
    <ID>MagicNumber:Bangumi.kt$Bangumi$240</ID>
    <ID>MagicNumber:BangumiInterceptor.kt$BangumiInterceptor$1000</ID>
    <ID>MagicNumber:BangumiModels.kt$1000</ID>
    <ID>MagicNumber:BangumiModels.kt$3600</ID>
    <ID>MagicNumber:BangumiModels.kt$OAuth$1000</ID>
    <ID>MagicNumber:BasePreferenceWidget.kt$200</ID>
    <ID>MagicNumber:BrowseAnimeIcons.kt$0x1F888888</ID>
    <ID>MagicNumber:BrowseMangaIcons.kt$0x1F888888</ID>
    <ID>MagicNumber:ChapterDownloadIndicator.kt$0.5f</ID>
    <ID>MagicNumber:ColorFilterPage.kt$16</ID>
    <ID>MagicNumber:ColorFilterPage.kt$24</ID>
    <ID>MagicNumber:ColorFilterPage.kt$8</ID>
    <ID>MagicNumber:CommonEntryItem.kt$0.33f</ID>
    <ID>MagicNumber:CommonEntryItem.kt$0xAA000000</ID>
    <ID>MagicNumber:CommonStorageScreenModel.kt$CommonStorageScreenModel$255</ID>
    <ID>MagicNumber:ContextExtensions.kt$3</ID>
    <ID>MagicNumber:ContextExtensions.kt$50</ID>
    <ID>MagicNumber:CumulativeStorage.kt$180f</ID>
    <ID>MagicNumber:CumulativeStorage.kt$4</ID>
    <ID>MagicNumber:CurrentChapter.kt$CurrentChapter$25</ID>
    <ID>MagicNumber:DateExtensions.kt$7</ID>
    <ID>MagicNumber:DelayedAnimeTrackingUpdateJob.kt$DelayedAnimeTrackingUpdateJob$3</ID>
    <ID>MagicNumber:DelayedMangaTrackingUpdateJob.kt$DelayedMangaTrackingUpdateJob$3</ID>
    <ID>MagicNumber:DelayedMangaTrackingUpdateJob.kt$DelayedMangaTrackingUpdateJob.Companion$5</ID>
    <ID>MagicNumber:DoubleTapSecondsView.kt$DoubleTapSecondsView.CustomValueAnimator$5</ID>
    <ID>MagicNumber:DownloadsTab.kt$DownloadsTab$0.08f</ID>
    <ID>MagicNumber:DownloadsTab.kt$DownloadsTab$0.12f</ID>
    <ID>MagicNumber:DropdownMenu.kt$56</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$3</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$4</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$5</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$6</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$7</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$8</ID>
    <ID>MagicNumber:EntryBottomActionMenu.kt$9</ID>
    <ID>MagicNumber:EntryDownloadDropdownMenu.kt$10</ID>
    <ID>MagicNumber:EntryDownloadDropdownMenu.kt$25</ID>
    <ID>MagicNumber:EntryDownloadDropdownMenu.kt$5</ID>
    <ID>MagicNumber:EpisodeDownloadIndicator.kt$0.5f</ID>
    <ID>MagicNumber:GestureHandler.kt$GestureHandler$0.05F</ID>
    <ID>MagicNumber:GestureHandler.kt$GestureHandler$0.4F</ID>
    <ID>MagicNumber:GestureHandler.kt$GestureHandler$0.6F</ID>
    <ID>MagicNumber:GestureHandler.kt$GestureHandler$0.95F</ID>
    <ID>MagicNumber:GestureHandler.kt$GestureHandler$1.5F</ID>
    <ID>MagicNumber:GestureHandler.kt$GestureHandler$150F</ID>
    <ID>MagicNumber:GlobalSearchItem.kt$99f</ID>
    <ID>MagicNumber:ItemCover.kt$ItemCover.Book$3f</ID>
    <ID>MagicNumber:Jellyfin.kt$Jellyfin$11</ID>
    <ID>MagicNumber:Jellyfin.kt$Jellyfin$37</ID>
    <ID>MagicNumber:JellyfinApi.kt$JellyfinApi$0.001</ID>
    <ID>MagicNumber:JellyfinApi.kt$JellyfinApi$3</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$0xff</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$148</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$198</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$3</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$7</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$74</ID>
    <ID>MagicNumber:Kavita.kt$Kavita$8</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$200</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$204</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$401</ID>
    <ID>MagicNumber:KavitaApi.kt$KavitaApi$500</ID>
    <ID>MagicNumber:KavitaModels.kt$OAuth$3</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$20</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$37</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$50</ID>
    <ID>MagicNumber:Kitsu.kt$Kitsu$51</ID>
    <ID>MagicNumber:KitsuModels.kt$1000</ID>
    <ID>MagicNumber:KitsuModels.kt$3600</ID>
    <ID>MagicNumber:Komga.kt$Komga$37</ID>
    <ID>MagicNumber:Komga.kt$Komga$50</ID>
    <ID>MagicNumber:Komga.kt$Komga$51</ID>
    <ID>MagicNumber:LibraryToolbar.kt$0.08f</ID>
    <ID>MagicNumber:LibraryToolbar.kt$0.12f</ID>
    <ID>MagicNumber:MangaDownload.kt$MangaDownload.State.DOWNLOADED$3</ID>
    <ID>MagicNumber:MangaDownload.kt$MangaDownload.State.ERROR$4</ID>
    <ID>MagicNumber:MangaDownloadCache.kt$MangaDownloadCache$1000</ID>
    <ID>MagicNumber:MangaDownloadHolder.kt$MangaDownloadHolder$100</ID>
    <ID>MagicNumber:MangaDownloadNotifier.kt$MangaDownloadNotifier$15</ID>
    <ID>MagicNumber:MangaDownloadNotifier.kt$MangaDownloadNotifier$30</ID>
    <ID>MagicNumber:MangaDownloadProvider.kt$MangaDownloadProvider$4</ID>
    <ID>MagicNumber:MangaDownloadQueueScreenModel.kt$MangaDownloadQueueScreenModel$50</ID>
    <ID>MagicNumber:MangaDownloader.kt$MangaDownloader$100</ID>
    <ID>MagicNumber:MangaDownloader.kt$MangaDownloader$1000</ID>
    <ID>MagicNumber:MangaDownloader.kt$MangaDownloader$1024</ID>
    <ID>MagicNumber:MangaDownloader.kt$MangaDownloader$3</ID>
    <ID>MagicNumber:MangaDownloader.kt$MangaDownloader$5</ID>
    <ID>MagicNumber:MangaExtensionDetailsScreen.kt$1.5f</ID>
    <ID>MagicNumber:MangaExtensionInstallService.kt$MangaExtensionInstallService$100</ID>
    <ID>MagicNumber:MangaInfoHeader.kt$0.2f</ID>
    <ID>MagicNumber:MangaInfoHeader.kt$0.65f</ID>
    <ID>MagicNumber:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$10</ID>
    <ID>MagicNumber:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$25</ID>
    <ID>MagicNumber:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$5</ID>
    <ID>MagicNumber:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$5</ID>
    <ID>MagicNumber:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob.Companion$10</ID>
    <ID>MagicNumber:MangaLibraryUpdateNotifier.kt$MangaLibraryUpdateNotifier$40</ID>
    <ID>MagicNumber:MangaMetadataUpdateJob.kt$MangaMetadataUpdateJob$5</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$10</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$103</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$25</ID>
    <ID>MagicNumber:MangaScreenModel.kt$MangaScreenModel$5</ID>
    <ID>MagicNumber:MangaTrackInfoDialog.kt$TrackChapterSelectorScreen.Model$10000</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$10</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$100</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$1000L</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$100L</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$30</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$365</ID>
    <ID>MagicNumber:MangaTrackerSearchPreviewProvider.kt$MangaTrackerSearchPreviewProvider$40</ID>
    <ID>MagicNumber:MangaUpdates.kt$MangaUpdates$146</ID>
    <ID>MagicNumber:MangaUpdates.kt$MangaUpdates$160</ID>
    <ID>MagicNumber:MangaUpdates.kt$MangaUpdates$173</ID>
    <ID>MagicNumber:MangaUpdatesApi.kt$MangaUpdatesApi$200</ID>
    <ID>MagicNumber:MangaUpdatesScreenModel.kt$MangaUpdatesScreenModel$3</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$105</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$106</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$113</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$114</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$116</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$117</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$12</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$120</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$121</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$123</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$15</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$19</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$26</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$3</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$4</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$44</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$5</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$52</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$54</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$57</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$59</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$6</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$60</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$61</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$64</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$7</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$70</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$71</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$72</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$75</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$77</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$8</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$81</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$82</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$84</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$85</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$86</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$92</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$93</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$96</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$97</ID>
    <ID>MagicNumber:Migrations.kt$Migrations$99</ID>
    <ID>MagicNumber:MonetColorScheme.kt$MonetColorScheme.Companion$128</ID>
    <ID>MagicNumber:MyAnimeList.kt$MyAnimeList$162</ID>
    <ID>MagicNumber:MyAnimeList.kt$MyAnimeList$46</ID>
    <ID>MagicNumber:MyAnimeList.kt$MyAnimeList$81</ID>
    <ID>MagicNumber:MyAnimeListApi.kt$MyAnimeListApi$64</ID>
    <ID>MagicNumber:MyAnimeListInterceptor.kt$MyAnimeListInterceptor$401</ID>
    <ID>MagicNumber:PageIndicatorText.kt$235</ID>
    <ID>MagicNumber:PageIndicatorText.kt$45</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$3</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$4</ID>
    <ID>MagicNumber:PagerConfig.kt$PagerConfig$5</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$16</ID>
    <ID>MagicNumber:PagerPageHolder.kt$PagerPageHolder$90f</ID>
    <ID>MagicNumber:PagerViewer.kt$PagerViewer$5</ID>
    <ID>MagicNumber:PictureInPictureHandler.kt$PictureInPictureHandler$10000</ID>
    <ID>MagicNumber:PictureInPictureHandler.kt$PictureInPictureHandler$23899</ID>
    <ID>MagicNumber:PictureInPictureHandler.kt$PictureInPictureHandler$23900</ID>
    <ID>MagicNumber:PictureInPictureHandler.kt$PictureInPictureHandler$4184</ID>
    <ID>MagicNumber:PictureInPictureHandler.kt$PictureInPictureHandler$4185</ID>
    <ID>MagicNumber:PkceUtil.kt$PkceUtil$50</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$0.02F</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$0.15f</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$0.2F</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$0.5F</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$0.75F</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$0.8F</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$100</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$1000</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$1000.0</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$1000F</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$1000L</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$2</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$2.0</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$256</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$500</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$500L</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$70000000</ID>
    <ID>MagicNumber:PlayerActivity.kt$PlayerActivity$750L</ID>
    <ID>MagicNumber:PlayerControlsView.kt$PlayerControlsView$100</ID>
    <ID>MagicNumber:PlayerControlsView.kt$PlayerControlsView$1000L</ID>
    <ID>MagicNumber:PlayerControlsView.kt$PlayerControlsView$3500L</ID>
    <ID>MagicNumber:PlayerControlsView.kt$PlayerControlsView$500L</ID>
    <ID>MagicNumber:PlayerControlsView.kt$PlayerControlsView$75</ID>
    <ID>MagicNumber:PlayerControlsView.kt$PlayerControlsView$750L</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$0.85F</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$10</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$16777216</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$5</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$55</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$6</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$7</ID>
    <ID>MagicNumber:PlayerPreferences.kt$PlayerPreferences$85</ID>
    <ID>MagicNumber:PlayerViewModel.kt$PlayerViewModel$0.35</ID>
    <ID>MagicNumber:PlayerViewModel.kt$PlayerViewModel$1000L</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity$230</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity$242</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$0.01f</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$100</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$100f</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$255f</ID>
    <ID>MagicNumber:ReaderActivity.kt$ReaderActivity.ReaderConfig$3</ID>
    <ID>MagicNumber:ReaderContentOverlay.kt$100f</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.FREE$0x00000008</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.LANDSCAPE$0x00000018</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.LOCKED_LANDSCAPE$0x00000028</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.LOCKED_PORTRAIT$0x00000020</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.PORTRAIT$0x00000010</ID>
    <ID>MagicNumber:ReaderOrientation.kt$ReaderOrientation.REVERSE_PORTRAIT$0x00000030</ID>
    <ID>MagicNumber:ReaderPageImageView.kt$ReaderPageImageView$180</ID>
    <ID>MagicNumber:ReaderPageImageView.kt$ReaderPageImageView$250</ID>
    <ID>MagicNumber:ReaderPageImageView.kt$ReaderPageImageView$500</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences$500</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.HIGH$13</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.HIGHEST$5</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.LOW$31</ID>
    <ID>MagicNumber:ReaderPreferences.kt$ReaderPreferences.ReaderHideThreshold.LOWEST$47</ID>
    <ID>MagicNumber:ReaderProgressIndicator.kt$ReaderProgressIndicator$100f</ID>
    <ID>MagicNumber:ReaderSettingsDialog.kt$0.5f</ID>
    <ID>MagicNumber:ReaderViewModel.kt$ReaderViewModel$0.25</ID>
    <ID>MagicNumber:ReadingMode.kt$ReadingMode.CONTINUOUS_VERTICAL$0x00000005</ID>
    <ID>MagicNumber:ReadingMode.kt$ReadingMode.VERTICAL$0x00000003</ID>
    <ID>MagicNumber:ReadingMode.kt$ReadingMode.WEBTOON$0x00000004</ID>
    <ID>MagicNumber:ReadingModePage.kt$100f</ID>
    <ID>MagicNumber:ReadingModePage.kt$5</ID>
    <ID>MagicNumber:RevealAnimationView.kt$RevealAnimationView$350</ID>
    <ID>MagicNumber:RevealAnimationView.kt$RevealAnimationView$500</ID>
    <ID>MagicNumber:SaveImageNotifier.kt$SaveImageNotifier$1280</ID>
    <ID>MagicNumber:SaveImageNotifier.kt$SaveImageNotifier$720</ID>
    <ID>MagicNumber:SecureActivityDelegate.kt$SecureActivityDelegate.Companion$60_000</ID>
    <ID>MagicNumber:Seekbar.kt$2</ID>
    <ID>MagicNumber:SetAnimeViewerFlags.kt$SetAnimeViewerFlags$16.0</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$12</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$168</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$24</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$48</ID>
    <ID>MagicNumber:SettingsDataScreen.kt$SettingsDataScreen$6</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$10</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$3</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$4</ID>
    <ID>MagicNumber:SettingsDownloadScreen.kt$SettingsDownloadScreen$5</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$12</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$168</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$24</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$48</ID>
    <ID>MagicNumber:SettingsLibraryScreen.kt$SettingsLibraryScreen$72</ID>
    <ID>MagicNumber:SettingsMainScreen.kt$SettingsMainScreen$0.02f</ID>
    <ID>MagicNumber:SettingsMainScreen.kt$SettingsMainScreen$0.05f</ID>
    <ID>MagicNumber:SettingsMainScreen.kt$SettingsMainScreen$3</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$0.70F</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$0.75F</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$0.80F</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$0.85F</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$0.90F</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$0.95F</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$10</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$20</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$255</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$3</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$30</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$5</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$6</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$7</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$8</ID>
    <ID>MagicNumber:SettingsPlayerScreen.kt$SettingsPlayerScreen$9</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$100f</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$250</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$3</ID>
    <ID>MagicNumber:SettingsReaderScreen.kt$SettingsReaderScreen$500</ID>
    <ID>MagicNumber:SettingsSearchScreen.kt$10</ID>
    <ID>MagicNumber:Shikimori.kt$Shikimori$40</ID>
    <ID>MagicNumber:ShikimoriModels.kt$1000</ID>
    <ID>MagicNumber:ShikimoriModels.kt$3600</ID>
    <ID>MagicNumber:SkipIntroLengthDialog.kt$255</ID>
    <ID>MagicNumber:SourcePreferences.kt$SourcePreferences$80</ID>
    <ID>MagicNumber:StorageScreenContent.kt$10</ID>
    <ID>MagicNumber:StorageScreenContent.kt$20</ID>
    <ID>MagicNumber:StorageScreenContent.kt$255</ID>
    <ID>MagicNumber:StorageScreenContent.kt$3f</ID>
    <ID>MagicNumber:StorageUtil.kt$1000</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$0x000000FFL</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$0x0000FF00L</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$0x00FF0000L</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$0x00FFFFFFL</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$0xFF</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$0xFF000000L</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$16</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$24</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$8</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.ALPHA$0xFF000000L</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.ALPHA$24</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.BLUE$0x000000FFL</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.GREEN$0x0000FF00L</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.GREEN$8</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.RED$0x00FF0000L</ID>
    <ID>MagicNumber:SubtitleColorPage.kt$ARGBValue.RED$16</ID>
    <ID>MagicNumber:SubtitleDelayPage.kt$1000</ID>
    <ID>MagicNumber:SubtitleDelayPage.kt$1000.0</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$0.25f</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$0.8f</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$12f</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$3</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$4</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$48f</ID>
    <ID>MagicNumber:SubtitleSettingsSheet.kt$8f</ID>
    <ID>MagicNumber:Suwayomi.kt$Suwayomi$255</ID>
    <ID>MagicNumber:Suwayomi.kt$Suwayomi$35</ID>
    <ID>MagicNumber:TimeUtils.kt$4</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$3L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$4L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$5L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$6L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$7L</ID>
    <ID>MagicNumber:TrackInfoDialogSelector.kt$8L</ID>
    <ID>MagicNumber:TrackingPreferenceWidget.kt$0xFF4CAF50</ID>
    <ID>MagicNumber:TvUtils.kt$30</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0x11</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0x28</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0x7D</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.LEFT$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0x81</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0x8D</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0x95</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.MENU$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0x84</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0x96</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.NEXT$0xE2</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0x33</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0x77</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.PREV$0xFF</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xA6</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xCC</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xCF</ID>
    <ID>MagicNumber:ViewerNavigation.kt$ViewerNavigation.NavigationRegion.RIGHT$0xD5</ID>
    <ID>MagicNumber:WebtoonConfig.kt$WebtoonConfig$3</ID>
    <ID>MagicNumber:WebtoonConfig.kt$WebtoonConfig$4</ID>
    <ID>MagicNumber:WebtoonConfig.kt$WebtoonConfig$5</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$0.8</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$100f</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$16</ID>
    <ID>MagicNumber:WebtoonPageHolder.kt$WebtoonPageHolder$90f</ID>
    <ID>MagicNumber:WebtoonRecyclerView.kt$WebtoonRecyclerView$0.4f</ID>
    <ID>MagicNumber:WebtoonRecyclerView.kt$WebtoonRecyclerView$400</ID>
    <ID>MagicNumber:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$0.5f</ID>
    <ID>MagicNumber:WebtoonViewer.kt$WebtoonViewer$3</ID>
    <ID>MagicNumber:WebtoonViewer.kt$WebtoonViewer$5</ID>
    <ID>MagicNumber:WorkManagerExtensions.kt$500</ID>
    <ID>MatchingDeclarationName:ChapterDownloadIndicator.kt$ChapterDownloadAction</ID>
    <ID>MatchingDeclarationName:CommonEntryItem.kt$CommonEntryItemDefaults</ID>
    <ID>MatchingDeclarationName:CreateAniyomiExtensionRepo.kt$CreateAnimeExtensionRepo</ID>
    <ID>MatchingDeclarationName:EpisodeDownloadIndicator.kt$EpisodeDownloadAction</ID>
    <ID>MatchingDeclarationName:MyAnimeListModels.kt$OAuth</ID>
    <ID>MatchingDeclarationName:NetworkStateTracker.kt$NetworkState</ID>
    <ID>MatchingDeclarationName:ShikimoriModels.kt$OAuth</ID>
    <ID>MatchingDeclarationName:SimklModels.kt$OAuth</ID>
    <ID>MatchingDeclarationName:TabbedDialog.kt$TabbedDialogPaddings</ID>
    <ID>MaxLineLength:AnimeDownloader.kt$AnimeDownloader$// If job has been asked to close then set the download as failed and collaborate</ID>
    <ID>MaxLineLength:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$// failedUpdates will already have the source, don't need to copy it into the message</ID>
    <ID>MaxLineLength:BrowseTab.kt$BrowseTab$// TODO: Find a way to let it open Global Anime/Manga Search depending on what Tab(e.g. Anime/Manga Source Tab) is open</ID>
    <ID>MaxLineLength:MainActivity.kt$MainActivity$// or the Google-specific search intent (triggered by saying or typing "search *query* on *Tachiyomi*" in Google Search/Google Assistant)</ID>
    <ID>MaxLineLength:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$// failedUpdates will already have the source, don't need to copy it into the message</ID>
    <ID>MaxLineLength:PreferenceScreen.kt$*</ID>
    <ID>MaxLineLength:SourcePreferences.kt$SourcePreferences$// fun sourcesTabSourcesInCategories() = preferenceStore.getStringSet("sources_tab_source_categories", mutableSetOf())</ID>
    <ID>MemberNameEqualsClassName:ExternalIntents.kt$ExternalIntents.Companion$val externalIntents: ExternalIntents by injectLazy()</ID>
    <ID>ModifierClickableOrder:ScanlatorFilterDialog.kt$clickable { if (isExcluded) { mutableExcludedScanlators.remove(scanlator) } else { mutableExcludedScanlators.add(scanlator) } }</ID>
    <ID>ModifierMissing:AnimeCategoryScreen.kt$AnimeCategoryScreen</ID>
    <ID>ModifierMissing:AnimeCoverDialog.kt$AnimeCoverDialog</ID>
    <ID>ModifierMissing:AnimeDownloadQueueScreen.kt$AnimeDownloadQueueScreen</ID>
    <ID>ModifierMissing:AnimeExtensionDetailsScreen.kt$AnimeExtensionDetailsScreen</ID>
    <ID>ModifierMissing:AnimeExtensionFilterScreen.kt$AnimeExtensionFilterScreen</ID>
    <ID>ModifierMissing:AnimeExtensionsScreen.kt$AnimeExtensionScreen</ID>
    <ID>ModifierMissing:AnimeHistoryScreen.kt$AnimeHistoryScreen</ID>
    <ID>ModifierMissing:AnimeLibraryCompactGrid.kt$AnimeLibraryCompactGrid</ID>
    <ID>ModifierMissing:AnimeLibraryContent.kt$AnimeLibraryContent</ID>
    <ID>ModifierMissing:AnimeLibraryPager.kt$AnimeLibraryPager</ID>
    <ID>ModifierMissing:AnimeLibrarySettingsDialog.kt$AnimeLibrarySettingsDialog</ID>
    <ID>ModifierMissing:AnimeScreen.kt$AnimeScreenLargeImpl</ID>
    <ID>ModifierMissing:AnimeSourcesFilterScreen.kt$AnimeSourcesFilterScreen</ID>
    <ID>ModifierMissing:AnimeSourcesScreen.kt$AnimeSourcesScreen</ID>
    <ID>ModifierMissing:AnimeStatsScreenContent.kt$AnimeStatsScreenContent</ID>
    <ID>ModifierMissing:AnimeTrackInfoDialogHome.kt$AnimeTrackInfoDialogHome</ID>
    <ID>ModifierMissing:AnimeTrackerSearch.kt$AnimeTrackerSearch</ID>
    <ID>ModifierMissing:AnimeUpdatesScreen.kt$AnimeUpdateScreen</ID>
    <ID>ModifierMissing:AppBar.kt$AppBarActions</ID>
    <ID>ModifierMissing:AppThemePreferenceWidget.kt$AppThemePreviewItem</ID>
    <ID>ModifierMissing:BottomReaderBar.kt$BottomReaderBar</ID>
    <ID>ModifierMissing:BrowseAnimeSourceComfortableGrid.kt$BrowseAnimeSourceComfortableGrid</ID>
    <ID>ModifierMissing:BrowseAnimeSourceCompactGrid.kt$BrowseAnimeSourceCompactGrid</ID>
    <ID>ModifierMissing:BrowseAnimeSourceList.kt$BrowseAnimeSourceList</ID>
    <ID>ModifierMissing:BrowseAnimeSourceScreen.kt$BrowseAnimeSourceContent</ID>
    <ID>ModifierMissing:BrowseAnimeSourceToolbar.kt$BrowseAnimeSourceToolbar</ID>
    <ID>ModifierMissing:BrowseMangaSourceComfortableGrid.kt$BrowseMangaSourceComfortableGrid</ID>
    <ID>ModifierMissing:BrowseMangaSourceCompactGrid.kt$BrowseMangaSourceCompactGrid</ID>
    <ID>ModifierMissing:BrowseMangaSourceList.kt$BrowseMangaSourceList</ID>
    <ID>ModifierMissing:BrowseMangaSourceScreen.kt$BrowseSourceContent</ID>
    <ID>ModifierMissing:BrowseMangaSourceToolbar.kt$BrowseMangaSourceToolbar</ID>
    <ID>ModifierMissing:ChapterNavigator.kt$ChapterNavigator</ID>
    <ID>ModifierMissing:ChapterSettingsDialog.kt$ChapterSettingsDialog</ID>
    <ID>ModifierMissing:ChapterSettingsDialog.kt$ScanlatorFilterItem</ID>
    <ID>ModifierMissing:CommonEntryItem.kt$EntryComfortableGridItem</ID>
    <ID>ModifierMissing:CommonEntryItem.kt$EntryCompactGridItem</ID>
    <ID>ModifierMissing:CommonEntryItem.kt$EntryListItem</ID>
    <ID>ModifierMissing:CrashScreen.kt$CrashScreen</ID>
    <ID>ModifierMissing:EpisodeListDialog.kt$EpisodeListDialog</ID>
    <ID>ModifierMissing:EpisodeOptionsDialogScreen.kt$EpisodeOptionsDialog</ID>
    <ID>ModifierMissing:EpisodeSettingsDialog.kt$EpisodeSettingsDialog</ID>
    <ID>ModifierMissing:ExtensionReposScreen.kt$ExtensionReposScreen</ID>
    <ID>ModifierMissing:GlobalAnimeSearchCardRow.kt$GlobalAnimeSearchCardRow</ID>
    <ID>ModifierMissing:GlobalAnimeSearchScreen.kt$GlobalAnimeSearchScreen</ID>
    <ID>ModifierMissing:GlobalAnimeSearchToolbar.kt$GlobalAnimeSearchToolbar</ID>
    <ID>ModifierMissing:GlobalMangaSearchCardRow.kt$GlobalMangaSearchCardRow</ID>
    <ID>ModifierMissing:GlobalMangaSearchScreen.kt$GlobalMangaSearchScreen</ID>
    <ID>ModifierMissing:GlobalMangaSearchToolbar.kt$GlobalMangaSearchToolbar</ID>
    <ID>ModifierMissing:GlobalSearchResultItems.kt$GlobalSearchErrorResultItem</ID>
    <ID>ModifierMissing:GlobalSearchResultItems.kt$GlobalSearchLoadingResultItem</ID>
    <ID>ModifierMissing:GlobalSearchResultItems.kt$GlobalSearchResultItem</ID>
    <ID>ModifierMissing:GlobalSerachCard.kt$GlobalSearchCard</ID>
    <ID>ModifierMissing:HomeScreen.kt$HomeScreen$NavigationRailItem</ID>
    <ID>ModifierMissing:LogoHeader.kt$LogoHeader</ID>
    <ID>ModifierMissing:MangaCategoryScreen.kt$MangaCategoryScreen</ID>
    <ID>ModifierMissing:MangaCoverDialog.kt$MangaCoverDialog</ID>
    <ID>ModifierMissing:MangaDownloadQueueScreen.kt$DownloadQueueScreen</ID>
    <ID>ModifierMissing:MangaExtensionDetailsScreen.kt$MangaExtensionDetailsScreen</ID>
    <ID>ModifierMissing:MangaExtensionFilterScreen.kt$MangaExtensionFilterScreen</ID>
    <ID>ModifierMissing:MangaExtensionsScreen.kt$MangaExtensionScreen</ID>
    <ID>ModifierMissing:MangaHistoryScreen.kt$MangaHistoryScreen</ID>
    <ID>ModifierMissing:MangaLibraryContent.kt$MangaLibraryContent</ID>
    <ID>ModifierMissing:MangaLibraryPager.kt$MangaLibraryPager</ID>
    <ID>ModifierMissing:MangaLibrarySettingsDialog.kt$MangaLibrarySettingsDialog</ID>
    <ID>ModifierMissing:MangaScreen.kt$MangaScreenLargeImpl</ID>
    <ID>ModifierMissing:MangaSourcesFilterScreen.kt$MangaSourcesFilterScreen</ID>
    <ID>ModifierMissing:MangaSourcesScreen.kt$MangaSourcesScreen</ID>
    <ID>ModifierMissing:MangaStatsScreenContent.kt$MangaStatsScreenContent</ID>
    <ID>ModifierMissing:MangaTrackInfoDialogHome.kt$MangaTrackInfoDialogHome</ID>
    <ID>ModifierMissing:MangaTrackInfoDialogHome.kt$TrackInfoItemMenu</ID>
    <ID>ModifierMissing:MangaTrackerSearch.kt$MangaTrackerSearch</ID>
    <ID>ModifierMissing:MangaUpdatesScreen.kt$MangaUpdateScreen</ID>
    <ID>ModifierMissing:MigrateAnimeScreen.kt$MigrateAnimeScreen</ID>
    <ID>ModifierMissing:MigrateAnimeSearchScreen.kt$MigrateAnimeSearchScreen</ID>
    <ID>ModifierMissing:MigrateAnimeSourceScreen.kt$MigrateAnimeSourceScreen</ID>
    <ID>ModifierMissing:MigrateMangaScreen.kt$MigrateMangaScreen</ID>
    <ID>ModifierMissing:MigrateMangaSearchScreen.kt$MigrateMangaSearchScreen</ID>
    <ID>ModifierMissing:MigrateMangaSourceScreen.kt$MigrateMangaSourceScreen</ID>
    <ID>ModifierMissing:ModeSelectionDialog.kt$ModeSelectionDialog</ID>
    <ID>ModifierMissing:MoreScreen.kt$MoreScreen</ID>
    <ID>ModifierMissing:NewUpdateScreen.kt$NewUpdateScreen</ID>
    <ID>ModifierMissing:OnboardingScreen.kt$OnboardingScreen</ID>
    <ID>ModifierMissing:PageIndicatorText.kt$PageIndicatorText</ID>
    <ID>ModifierMissing:PlayerSettingsScreenModel.kt$PlayerSettingsScreenModel$NoSubtitlesWarning</ID>
    <ID>ModifierMissing:PlayerSettingsScreenModel.kt$PlayerSettingsScreenModel$OverrideSubtitlesSwitch</ID>
    <ID>ModifierMissing:PlayerSettingsScreenModel.kt$PlayerSettingsScreenModel$ToggleableRow</ID>
    <ID>ModifierMissing:PlayerSettingsSheet.kt$PlayerSettingsSheet</ID>
    <ID>ModifierMissing:PreferenceGroupHeader.kt$PreferenceGroupHeader</ID>
    <ID>ModifierMissing:PreferenceScaffold.kt$PreferenceScaffold</ID>
    <ID>ModifierMissing:ReaderAppBars.kt$ReaderAppBars</ID>
    <ID>ModifierMissing:ReaderPageActionsDialog.kt$ReaderPageActionsDialog</ID>
    <ID>ModifierMissing:ReaderSettingsDialog.kt$ReaderSettingsDialog</ID>
    <ID>ModifierMissing:ScreenshotOptionsSheet.kt$ScreenshotOptionsSheet</ID>
    <ID>ModifierMissing:SettingsMainScreen.kt$SettingsMainScreen$Content</ID>
    <ID>ModifierMissing:SkipIntroLengthDialog.kt$SkipIntroLengthDialog</ID>
    <ID>ModifierMissing:SourceFilterAnimeDialog.kt$SourceFilterAnimeDialog</ID>
    <ID>ModifierMissing:SourceFilterMangaDialog.kt$SourceFilterMangaDialog</ID>
    <ID>ModifierMissing:SpeedPickerDialog.kt$SpeedPickerDialog</ID>
    <ID>ModifierMissing:StreamsCatalogSheet.kt$StreamsCatalogSheet</ID>
    <ID>ModifierMissing:SubtitleDelayPage.kt$StreamsDelayPage</ID>
    <ID>ModifierMissing:SubtitleSettingsSheet.kt$OutLineText</ID>
    <ID>ModifierMissing:SubtitleSettingsSheet.kt$SubtitlePreview</ID>
    <ID>ModifierMissing:SubtitleSettingsSheet.kt$SubtitleSettingsSheet</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$BaseSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackDateSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackItemSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackScoreSelector</ID>
    <ID>ModifierMissing:TrackInfoDialogSelector.kt$TrackStatusSelector</ID>
    <ID>ModifierMissing:TrackLogoIcon.kt$TrackLogoIcon</ID>
    <ID>ModifierMissing:VideoChaptersSheet.kt$VideoChaptersSheet</ID>
    <ID>ModifierMissing:WebViewScreenContent.kt$WebViewScreenContent</ID>
    <ID>ModifierNotUsedAtRoot:AnimeEpisodeListItem.kt$modifier = modifier .selectedBackground(selected) .combinedClickable( onClick = onClick, onLongClick = onLongClick, ) .padding(start = 16.dp, top = 12.dp, end = 8.dp, bottom = 12.dp)</ID>
    <ID>ModifierNotUsedAtRoot:DropdownMenu.kt$modifier = modifier</ID>
    <ID>ModifierNotUsedAtRoot:MangaChapterListItem.kt$modifier = modifier .selectedBackground(selected) .combinedClickable( onClick = onClick, onLongClick = onLongClick, ) .padding(start = 16.dp, top = 12.dp, end = 8.dp, bottom = 12.dp)</ID>
    <ID>ModifierNotUsedAtRoot:TabbedScreen.kt$modifier = modifier</ID>
    <ID>ModifierNotUsedAtRoot:TrackingPreferenceWidget.kt$modifier = modifier .clickable(enabled = onClick != null, onClick = { onClick?.invoke() }) .fillMaxWidth() .padding(horizontal = PrefsHorizontalPadding, vertical = 8.dp)</ID>
    <ID>ModifierReused:StorageScreenContent.kt$Column( modifier = modifier, horizontalAlignment = Alignment.CenterHorizontally, verticalArrangement = Arrangement.Center, content = { SelectStorageCategory( selectedCategory = state.selectedCategory, categories = state.categories, onCategorySelected = onCategorySelected, ) CumulativeStorage( modifier = Modifier .padding( horizontal = MaterialTheme.padding.small, vertical = MaterialTheme.padding.medium, ) .run { if (isTabletUi()) { this } else { padding(bottom = MaterialTheme.padding.medium) } }, items = state.items, ) }, )</ID>
    <ID>ModifierReused:StorageScreenContent.kt$Row( modifier = modifier .padding(horizontal = MaterialTheme.padding.small) .padding(contentPadding), content = { if (isTabletUi()) { Info( modifier = Modifier .weight(2f) .padding(end = MaterialTheme.padding.extraLarge) .fillMaxHeight(), ) } LazyColumn( modifier = Modifier.weight(3f), content = { item { Spacer(Modifier.height(MaterialTheme.padding.small)) } item { if (!isTabletUi()) { Info() } } items( state.items.size, itemContent = { index -&gt; StorageItem( item = state.items[index], isManga = isManga, onDelete = onDelete, ) Spacer(Modifier.height(MaterialTheme.padding.medium)) }, ) }, ) }, )</ID>
    <ID>MultipleEmitters:SubtitleColorPage.kt$SubtitleColors</ID>
    <ID>NestedBlockDepth:Anilist.kt$Anilist$override suspend fun update(track: AnimeTrack, didWatchEpisode: Boolean): AnimeTrack</ID>
    <ID>NestedBlockDepth:Anilist.kt$Anilist$override suspend fun update(track: MangaTrack, didReadChapter: Boolean): MangaTrack</ID>
    <ID>NestedBlockDepth:AnimeDownloadQueueScreenModel.kt$AnimeDownloadQueueScreenModel.&lt;no name provided&gt;$override fun onMenuItemClick(position: Int, menuItem: MenuItem)</ID>
    <ID>NestedBlockDepth:AnimeDownloader.kt$AnimeDownloader$private fun downloadVideoExternal( video: Video, source: AnimeHttpSource, tmpDir: UniFile, filename: String, ): UniFile</ID>
    <ID>NestedBlockDepth:AnimeDownloader.kt$AnimeDownloader$private suspend fun attemptDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, safe: Boolean, ): UniFile</ID>
    <ID>NestedBlockDepth:AnimeDownloader.kt$AnimeDownloader$private suspend fun httpDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, threadNumber: Int, safeDownload: Boolean, ): UniFile</ID>
    <ID>NestedBlockDepth:AnimeExtensionInstaller.kt$AnimeExtensionInstaller$fun installApk(downloadId: Long, uri: Uri)</ID>
    <ID>NestedBlockDepth:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$private fun writeErrorFile(errors: List&lt;Pair&lt;Anime, String?&gt;&gt;): File</ID>
    <ID>NestedBlockDepth:AppLanguageScreen.kt$AppLanguageScreen$private fun getLangs(context: Context): ImmutableList&lt;Language&gt;</ID>
    <ID>NestedBlockDepth:BackupRestorer.kt$BackupRestorer$private fun writeErrorLog(): File</ID>
    <ID>NestedBlockDepth:BrowseAnimeSourceScreenModel.kt$BrowseAnimeSourceScreenModel$fun searchGenre(genreName: String)</ID>
    <ID>NestedBlockDepth:BrowseMangaSourceScreenModel.kt$BrowseMangaSourceScreenModel$fun searchGenre(genreName: String)</ID>
    <ID>NestedBlockDepth:ChapterLoader.kt$ChapterLoader$private fun getPageLoader(chapter: ReaderChapter): PageLoader</ID>
    <ID>NestedBlockDepth:CloseableExtensions.kt$inline fun &lt;T : Closeable?&gt; Array&lt;T&gt;.use(block: () -&gt; Unit)</ID>
    <ID>NestedBlockDepth:ContextExtensions.kt$fun Context.openInBrowser(uri: Uri, forceDefaultBrowser: Boolean = false)</ID>
    <ID>NestedBlockDepth:GestureHandler.kt$GestureHandler$@SuppressLint("ClickableViewAccessibility") override fun onTouch(v: View, event: MotionEvent): Boolean</ID>
    <ID>NestedBlockDepth:GestureHandler.kt$GestureHandler$override fun onScroll( e1: MotionEvent?, e2: MotionEvent, distanceX: Float, distanceY: Float, ): Boolean</ID>
    <ID>NestedBlockDepth:KavitaApi.kt$KavitaApi$fun getNewToken(apiUrl: String, apiKey: String): String?</ID>
    <ID>NestedBlockDepth:KavitaApi.kt$KavitaApi$private fun getLatestChapterRead(url: String): Double</ID>
    <ID>NestedBlockDepth:Kitsu.kt$Kitsu$override suspend fun update(track: AnimeTrack, didWatchEpisode: Boolean): AnimeTrack</ID>
    <ID>NestedBlockDepth:Kitsu.kt$Kitsu$override suspend fun update(track: MangaTrack, didReadChapter: Boolean): MangaTrack</ID>
    <ID>NestedBlockDepth:MangaDownloadQueueScreenModel.kt$MangaDownloadQueueScreenModel.&lt;no name provided&gt;$override fun onMenuItemClick(position: Int, menuItem: MenuItem)</ID>
    <ID>NestedBlockDepth:MangaDownloader.kt$MangaDownloader$private fun archiveChapter( mangaDir: UniFile, dirname: String, tmpDir: UniFile, )</ID>
    <ID>NestedBlockDepth:MangaExtensionInstaller.kt$MangaExtensionInstaller$fun installApk(downloadId: Long, uri: Uri)</ID>
    <ID>NestedBlockDepth:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$private fun writeErrorFile(errors: List&lt;Pair&lt;Manga, String?&gt;&gt;): File</ID>
    <ID>NestedBlockDepth:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, playerPreferences: PlayerPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>NestedBlockDepth:MyAnimeList.kt$MyAnimeList$override suspend fun update(track: AnimeTrack, didWatchEpisode: Boolean): AnimeTrack</ID>
    <ID>NestedBlockDepth:MyAnimeList.kt$MyAnimeList$override suspend fun update(track: MangaTrack, didReadChapter: Boolean): MangaTrack</ID>
    <ID>NestedBlockDepth:PlayerActivity.kt$PlayerActivity$private fun setVideoList( qualityIndex: Int, videos: List&lt;Video&gt;?, fromStart: Boolean = false, position: Long? = null, )</ID>
    <ID>NestedBlockDepth:PlayerViewModel.kt$PlayerViewModel$suspend fun init( animeId: Long, initialEpisodeId: Long, vidList: String, vidIndex: Int, ): Pair&lt;InitResult, Result&lt;Boolean&gt;&gt;</ID>
    <ID>NestedBlockDepth:StorageUtil.kt$fun UniFile.size(): Long</ID>
    <ID>NestedBlockDepth:SyncChaptersWithSource.kt$SyncChaptersWithSource$suspend fun await( rawSourceChapters: List&lt;SChapter&gt;, manga: Manga, source: MangaSource, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Chapter&gt;</ID>
    <ID>NestedBlockDepth:SyncEpisodesWithSource.kt$SyncEpisodesWithSource$suspend fun await( rawSourceEpisodes: List&lt;SEpisode&gt;, anime: Anime, source: AnimeSource, manualFetch: Boolean = false, fetchWindow: Pair&lt;Long, Long&gt; = Pair(0, 0), ): List&lt;Episode&gt;</ID>
    <ID>NestedBlockDepth:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>ReturnCount:AndroidAnimeSourceManager.kt$AndroidAnimeSourceManager$private suspend fun createStubSource(id: Long): StubAnimeSource</ID>
    <ID>ReturnCount:AndroidMangaSourceManager.kt$AndroidMangaSourceManager$private suspend fun createStubSource(id: Long): StubMangaSource</ID>
    <ID>ReturnCount:AnimeCoverFetcher.kt$AnimeCoverFetcher$private suspend fun httpLoader(): FetchResult</ID>
    <ID>ReturnCount:AnimeDownload.kt$AnimeDownload.Companion$suspend fun fromEpisodeId( episodeId: Long, getEpisode: GetEpisode = Injekt.get(), getAnimeById: GetAnime = Injekt.get(), sourceManager: AnimeSourceManager = Injekt.get(), ): AnimeDownload?</ID>
    <ID>ReturnCount:AnimeDownloadCache.kt$AnimeDownloadCache$fun isEpisodeDownloaded( episodeName: String, episodeScanlator: String?, animeTitle: String, sourceId: Long, skipCache: Boolean, ): Boolean</ID>
    <ID>ReturnCount:AnimeDownloadManager.kt$AnimeDownloadManager$fun renameSource(oldSource: AnimeSource, newSource: AnimeSource)</ID>
    <ID>ReturnCount:AnimeDownloader.kt$AnimeDownloader$private fun parseDuration(durationString: String): Long?</ID>
    <ID>ReturnCount:AnimeExtensionInstallReceiver.kt$AnimeExtensionInstallReceiver$override fun onReceive(context: Context, intent: Intent?)</ID>
    <ID>ReturnCount:AnimeExtensionInstallService.kt$AnimeExtensionInstallService$override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int</ID>
    <ID>ReturnCount:AnimeExtensionInstaller.kt$AnimeExtensionInstaller.DownloadCompletionReceiver$override fun onReceive(context: Context, intent: Intent?)</ID>
    <ID>ReturnCount:AnimeExtensionLoader.kt$AnimeExtensionLoader$fun installPrivateExtensionFile(context: Context, file: File): Boolean</ID>
    <ID>ReturnCount:AnimeExtensionLoader.kt$AnimeExtensionLoader$private fun loadExtension(context: Context, extensionInfo: AnimeExtensionInfo): AnimeLoadResult</ID>
    <ID>ReturnCount:AnimeExtensionLoader.kt$AnimeExtensionLoader$private fun selectExtensionPackage(shared: AnimeExtensionInfo?, private: AnimeExtensionInfo?): AnimeExtensionInfo?</ID>
    <ID>ReturnCount:AnimeExtensions.kt$fun Anime.prepUpdateCover(coverCache: AnimeCoverCache, remoteAnime: SAnime, refreshSameUrl: Boolean): Anime</ID>
    <ID>ReturnCount:AnimeExtensions.kt$fun Anime.removeCovers(coverCache: AnimeCoverCache = Injekt.get()): Anime</ID>
    <ID>ReturnCount:AnimeExtensions.kt$fun Anime.shouldDownloadNewEpisodes(dbCategories: List&lt;Long&gt;, preferences: DownloadPreferences): Boolean</ID>
    <ID>ReturnCount:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$override suspend fun doWork(): Result</ID>
    <ID>ReturnCount:AnimeScreen.kt$AnimeScreen$private fun getAnimeUrl(anime_: Anime?, source_: AnimeSource?): String?</ID>
    <ID>ReturnCount:AnimeScreenModel.kt$AnimeScreenModel$fun runEpisodeDownloadActions( items: List&lt;EpisodeList.Item&gt;, action: EpisodeDownloadAction, )</ID>
    <ID>ReturnCount:BackupCreateJob.kt$BackupCreateJob$override suspend fun doWork(): Result</ID>
    <ID>ReturnCount:BaseColorScheme.kt$BaseColorScheme$fun getColorScheme(isDark: Boolean, isAmoled: Boolean): ColorScheme</ID>
    <ID>ReturnCount:CreateAniyomiExtensionRepo.kt$CreateAnimeExtensionRepo$fun await(name: String): Result</ID>
    <ID>ReturnCount:CreateMangaExtensionRepo.kt$CreateMangaExtensionRepo$fun await(name: String): Result</ID>
    <ID>ReturnCount:ExtensionInstallerPreference.kt$ExtensionInstallerPreference$private fun check(value: ExtensionInstaller): ExtensionInstaller</ID>
    <ID>ReturnCount:ExternalIntents.kt$ExternalIntents$suspend fun getExternalIntent( context: Context, animeId: Long?, episodeId: Long?, chosenVideo: Video?, ): Intent?</ID>
    <ID>ReturnCount:GestureHandler.kt$GestureHandler$override fun onDoubleTap(e: MotionEvent): Boolean</ID>
    <ID>ReturnCount:GestureHandler.kt$GestureHandler$override fun onScroll( e1: MotionEvent?, e2: MotionEvent, distanceX: Float, distanceY: Float, ): Boolean</ID>
    <ID>ReturnCount:GestureHandler.kt$GestureHandler$override fun onSingleTapUp(e: MotionEvent): Boolean</ID>
    <ID>ReturnCount:HttpPageLoader.kt$HttpPageLoader$private fun preloadNextPages(currentPage: ReaderPage, amount: Int): List&lt;PriorityPage&gt;</ID>
    <ID>ReturnCount:JellyfinApi.kt$JellyfinApi$private suspend fun getTrackFromSeries(track: AnimeTrackSearch, url: HttpUrl): AnimeTrackSearch</ID>
    <ID>ReturnCount:KavitaApi.kt$KavitaApi$fun getNewToken(apiUrl: String, apiKey: String): String?</ID>
    <ID>ReturnCount:KavitaApi.kt$KavitaApi$private fun getLatestChapterRead(url: String): Double</ID>
    <ID>ReturnCount:KitsuDateHelper.kt$KitsuDateHelper$fun parse(dateString: String?): Long</ID>
    <ID>ReturnCount:MainActivity.kt$MainActivity$private fun handleIntentAction(intent: Intent, navigator: Navigator): Boolean</ID>
    <ID>ReturnCount:MangaCoverFetcher.kt$MangaCoverFetcher$private suspend fun httpLoader(): FetchResult</ID>
    <ID>ReturnCount:MangaDownload.kt$MangaDownload.Companion$suspend fun fromChapterId( chapterId: Long, getChapter: GetChapter = Injekt.get(), getManga: GetManga = Injekt.get(), sourceManager: MangaSourceManager = Injekt.get(), ): MangaDownload?</ID>
    <ID>ReturnCount:MangaDownloadCache.kt$MangaDownloadCache$fun isChapterDownloaded( chapterName: String, chapterScanlator: String?, mangaTitle: String, sourceId: Long, skipCache: Boolean, ): Boolean</ID>
    <ID>ReturnCount:MangaDownloadManager.kt$MangaDownloadManager$fun renameSource(oldSource: MangaSource, newSource: MangaSource)</ID>
    <ID>ReturnCount:MangaDownloader.kt$MangaDownloader$private fun isDownloadSuccessful( download: MangaDownload, tmpDir: UniFile, ): Boolean</ID>
    <ID>ReturnCount:MangaExtensionInstallReceiver.kt$MangaExtensionInstallReceiver$override fun onReceive(context: Context, intent: Intent?)</ID>
    <ID>ReturnCount:MangaExtensionInstallService.kt$MangaExtensionInstallService$override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int</ID>
    <ID>ReturnCount:MangaExtensionInstaller.kt$MangaExtensionInstaller.DownloadCompletionReceiver$override fun onReceive(context: Context, intent: Intent?)</ID>
    <ID>ReturnCount:MangaExtensionLoader.kt$MangaExtensionLoader$fun installPrivateExtensionFile(context: Context, file: File): Boolean</ID>
    <ID>ReturnCount:MangaExtensionLoader.kt$MangaExtensionLoader$private fun loadMangaExtension(context: Context, extensionInfo: MangaExtensionInfo): MangaLoadResult</ID>
    <ID>ReturnCount:MangaExtensionLoader.kt$MangaExtensionLoader$private fun selectExtensionPackage(shared: MangaExtensionInfo?, private: MangaExtensionInfo?): MangaExtensionInfo?</ID>
    <ID>ReturnCount:MangaExtensions.kt$fun Manga.prepUpdateCover(coverCache: MangaCoverCache, remoteManga: SManga, refreshSameUrl: Boolean): Manga</ID>
    <ID>ReturnCount:MangaExtensions.kt$fun Manga.removeCovers(coverCache: MangaCoverCache = Injekt.get()): Manga</ID>
    <ID>ReturnCount:MangaExtensions.kt$fun Manga.shouldDownloadNewChapters(dbCategories: List&lt;Long&gt;, preferences: DownloadPreferences): Boolean</ID>
    <ID>ReturnCount:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$override suspend fun doWork(): Result</ID>
    <ID>ReturnCount:MangaScreen.kt$MangaScreen$private fun getMangaUrl(manga_: Manga?, source_: MangaSource?): String?</ID>
    <ID>ReturnCount:Migrations.kt$Migrations$fun upgrade( context: Context, preferenceStore: PreferenceStore, basePreferences: BasePreferences, uiPreferences: UiPreferences, networkPreferences: NetworkPreferences, sourcePreferences: SourcePreferences, securityPreferences: SecurityPreferences, libraryPreferences: LibraryPreferences, readerPreferences: ReaderPreferences, playerPreferences: PlayerPreferences, backupPreferences: BackupPreferences, trackerManager: TrackerManager, ): Boolean</ID>
    <ID>ReturnCount:MyAnimeList.kt$MyAnimeList$override suspend fun searchAnime(query: String): List&lt;AnimeTrackSearch&gt;</ID>
    <ID>ReturnCount:MyAnimeList.kt$MyAnimeList$override suspend fun searchManga(query: String): List&lt;MangaTrackSearch&gt;</ID>
    <ID>ReturnCount:NetworkExtensions.kt$fun Context.isConnectedToWifi(): Boolean</ID>
    <ID>ReturnCount:NetworkExtensions.kt$fun Context.isOnline(): Boolean</ID>
    <ID>ReturnCount:NotificationReceiver.kt$NotificationReceiver$override fun onReceive(context: Context, intent: Intent)</ID>
    <ID>ReturnCount:PagerPageHolder.kt$PagerPageHolder$private fun process(page: ReaderPage, imageStream: BufferedInputStream): InputStream</ID>
    <ID>ReturnCount:PagerViewer.kt$PagerViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>ReturnCount:PagerViewer.kt$PagerViewer$private fun checkAllowPreload(page: ReaderPage?): Boolean</ID>
    <ID>ReturnCount:PagerViewerAdapter.kt$PagerViewerAdapter$fun onPageSplit(currentPage: Any?, newPage: InsertPage)</ID>
    <ID>ReturnCount:PlayerActivity.kt$PlayerActivity$internal fun updatePip(start: Boolean)</ID>
    <ID>ReturnCount:PlayerActivity.kt$PlayerActivity$override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean</ID>
    <ID>ReturnCount:PlayerActivity.kt$PlayerActivity$private fun openContentFd(uri: Uri): String?</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$fun isEpisodeOnline(): Boolean?</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$fun onSecondReached(position: Int, duration: Int)</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$fun saveImage(imageStream: () -&gt; InputStream, timePos: Int?)</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$fun shareImage(imageStream: () -&gt; InputStream, timePos: Int?)</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$private fun downloadNextEpisodes()</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$private fun updateTrackEpisodeSeen(episode: Episode)</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$suspend fun aniSkipResponse(playerDuration: Int?): List&lt;Stamp&gt;?</ID>
    <ID>ReturnCount:PlayerViewModel.kt$PlayerViewModel$suspend fun loadEpisode(episodeId: Long?): Pair&lt;List&lt;Video&gt;?, String&gt;?</ID>
    <ID>ReturnCount:ReaderActivity.kt$ReaderActivity$override fun onKeyUp(keyCode: Int, event: KeyEvent?): Boolean</ID>
    <ID>ReturnCount:ReaderActivity.kt$ReaderActivity$private fun moveToPageIndex(index: Int)</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$fun getChapterUrl(): String?</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$fun setAsCover()</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$private fun downloadNextChapters()</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$private fun updateTrackChapterRead(readerChapter: ReaderChapter)</ID>
    <ID>ReturnCount:ReaderViewModel.kt$ReaderViewModel$suspend fun preload(chapter: ReaderChapter)</ID>
    <ID>ReturnCount:TvUtils.kt$fun isTvBox(context: Context): Boolean</ID>
    <ID>ReturnCount:ViewExtensions.kt$fun View?.isVisibleOnScreen(): Boolean</ID>
    <ID>ReturnCount:WebtoonFrame.kt$WebtoonFrame$override fun dispatchTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>ReturnCount:WebtoonPageHolder.kt$WebtoonPageHolder$private fun process(imageStream: BufferedInputStream): InputStream</ID>
    <ID>ReturnCount:WebtoonRecyclerView.kt$WebtoonRecyclerView.Detector$override fun onTouchEvent(ev: MotionEvent): Boolean</ID>
    <ID>ReturnCount:WebtoonViewer.kt$WebtoonViewer$override fun handleKeyEvent(event: KeyEvent): Boolean</ID>
    <ID>ReturnCount:WebtoonViewer.kt$WebtoonViewer$private fun checkAllowPreload(page: ReaderPage?): Boolean</ID>
    <ID>SpreadOperator:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel$(*prefFlows)</ID>
    <ID>SpreadOperator:AnimeSourcesScreenModel.kt$AnimeSourcesScreenModel$( AnimeSourceUiModel.Header(it.key), *it.value.map { source -&gt; AnimeSourceUiModel.Item(source) }.toTypedArray(), )</ID>
    <ID>SpreadOperator:CommonStorageScreenModel.kt$CommonStorageScreenModel$(AllCategory, *categories.toTypedArray())</ID>
    <ID>SpreadOperator:MangaLibraryScreenModel.kt$MangaLibraryScreenModel$(*prefFlows)</ID>
    <ID>SpreadOperator:MangaSourcesScreenModel.kt$MangaSourcesScreenModel$( MangaSourceUiModel.Header(it.key), *it.value.map { source -&gt; MangaSourceUiModel.Item(source) }.toTypedArray(), )</ID>
    <ID>SwallowedException:AboutScreen.kt$AboutScreen$e: Exception</ID>
    <ID>SwallowedException:AniChartApi.kt$AniChartApi$e: Exception</ID>
    <ID>SwallowedException:AniSkipApi.kt$AniSkipApi$e: Exception</ID>
    <ID>SwallowedException:Anilist.kt$Anilist$e: ClassCastException</ID>
    <ID>SwallowedException:Anilist.kt$Anilist$e: Exception</ID>
    <ID>SwallowedException:Anilist.kt$Anilist$e: Throwable</ID>
    <ID>SwallowedException:AnilistModels.kt$ALAnime$e: Exception</ID>
    <ID>SwallowedException:AnilistModels.kt$ALManga$e: Exception</ID>
    <ID>SwallowedException:AnimeDownloadPendingDeleter.kt$AnimeDownloadPendingDeleter$e: Exception</ID>
    <ID>SwallowedException:AnimeDownloadStore.kt$AnimeDownloadStore$e: Exception</ID>
    <ID>SwallowedException:AnimeDownloader.kt$AnimeDownloader$e: Exception</ID>
    <ID>SwallowedException:AnimeExtensionLoader.kt$AnimeExtensionLoader$error: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:AnimeMetadataUpdateJob.kt$AnimeMetadataUpdateJob$e: Exception</ID>
    <ID>SwallowedException:AnimeScreen.kt$AnimeScreen$e: Exception</ID>
    <ID>SwallowedException:AnimeTrackInfoDialog.kt$AnimeTrackInfoDialogHomeScreen.Model$e: Exception</ID>
    <ID>SwallowedException:BackupRestorer.kt$BackupRestorer$e: Exception</ID>
    <ID>SwallowedException:Bangumi.kt$Bangumi$e: Exception</ID>
    <ID>SwallowedException:Bangumi.kt$Bangumi$e: Throwable</ID>
    <ID>SwallowedException:BrowseAnimeIcons.kt$e: Exception</ID>
    <ID>SwallowedException:BrowseMangaIcons.kt$e: Exception</ID>
    <ID>SwallowedException:ChapterCache.kt$ChapterCache$e: IOException</ID>
    <ID>SwallowedException:ChapterLoader.kt$ChapterLoader$e: UnsupportedRarV5Exception</ID>
    <ID>SwallowedException:ContextExtensions.kt$e: Exception</ID>
    <ID>SwallowedException:ContextExtensions.kt$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:CrashLogUtil.kt$CrashLogUtil$e: Throwable</ID>
    <ID>SwallowedException:CreateBackupScreen.kt$CreateBackupScreen$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:EpisodeLoader.kt$EpisodeLoader.Companion$e: Throwable</ID>
    <ID>SwallowedException:ExternalIntents.kt$ExternalIntents$e: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:Jellyfin.kt$Jellyfin$e: Exception</ID>
    <ID>SwallowedException:Kavita.kt$Kavita$e: Exception</ID>
    <ID>SwallowedException:KavitaApi.kt$KavitaApi$e: SocketTimeoutException</ID>
    <ID>SwallowedException:Kitsu.kt$Kitsu$e: Exception</ID>
    <ID>SwallowedException:KitsuModels.kt$KitsuSearchAnime$e: IllegalArgumentException</ID>
    <ID>SwallowedException:KitsuModels.kt$KitsuSearchManga$e: IllegalArgumentException</ID>
    <ID>SwallowedException:Komga.kt$Komga$e: Exception</ID>
    <ID>SwallowedException:MangaDownloadPendingDeleter.kt$MangaDownloadPendingDeleter$e: Exception</ID>
    <ID>SwallowedException:MangaDownloadStore.kt$MangaDownloadStore$e: Exception</ID>
    <ID>SwallowedException:MangaDownloader.kt$MangaDownloader$e: Throwable</ID>
    <ID>SwallowedException:MangaExtensionLoader.kt$MangaExtensionLoader$error: PackageManager.NameNotFoundException</ID>
    <ID>SwallowedException:MangaMetadataUpdateJob.kt$MangaMetadataUpdateJob$e: Exception</ID>
    <ID>SwallowedException:MangaScreen.kt$MangaScreen$e: Exception</ID>
    <ID>SwallowedException:MangaTrackInfoDialog.kt$MangaTrackInfoDialogHomeScreen.Model$e: Exception</ID>
    <ID>SwallowedException:MangaUpdates.kt$MangaUpdates$e: Exception</ID>
    <ID>SwallowedException:MangaUpdatesApi.kt$MangaUpdatesApi$e: Exception</ID>
    <ID>SwallowedException:Migrations.kt$Migrations$e: ClassCastException</ID>
    <ID>SwallowedException:MyAnimeList.kt$MyAnimeList$e: Exception</ID>
    <ID>SwallowedException:MyAnimeList.kt$MyAnimeList$e: Throwable</ID>
    <ID>SwallowedException:MyAnimeListApi.kt$MyAnimeListApi$e: Exception</ID>
    <ID>SwallowedException:Pager.kt$Pager$e: IllegalArgumentException</ID>
    <ID>SwallowedException:Pager.kt$Pager$e: IndexOutOfBoundsException</ID>
    <ID>SwallowedException:Pager.kt$Pager$e: NullPointerException</ID>
    <ID>SwallowedException:PlayerViewModel.kt$PlayerViewModel$e: Exception</ID>
    <ID>SwallowedException:RarPageLoader.kt$RarPageLoader$e: Exception</ID>
    <ID>SwallowedException:ReaderActivity.kt$ReaderActivity$e: ArrayIndexOutOfBoundsException</ID>
    <ID>SwallowedException:ReaderViewModel.kt$ReaderViewModel$e: Exception</ID>
    <ID>SwallowedException:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:SettingsDataScreen.kt$SettingsDataScreen$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:Shikimori.kt$Shikimori$e: Exception</ID>
    <ID>SwallowedException:Shikimori.kt$Shikimori$e: Throwable</ID>
    <ID>SwallowedException:Simkl.kt$Simkl$e: Exception</ID>
    <ID>SwallowedException:Simkl.kt$Simkl$e: Throwable</ID>
    <ID>SwallowedException:StorageStep.kt$StorageStep$e: ActivityNotFoundException</ID>
    <ID>SwallowedException:Suwayomi.kt$Suwayomi$e: Exception</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:AnimeScreenModel.kt$AnimeScreenModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:AnimeTrackInfoDialog.kt$AnimeTrackInfoDialogHomeScreen.Model$Exception()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:MangaScreenModel.kt$MangaScreenModel$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:MangaTrackInfoDialog.kt$MangaTrackInfoDialogHomeScreen.Model$Exception()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:PackageInstallerInstallerAnime.kt$PackageInstallerInstallerAnime$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:PackageInstallerInstallerManga.kt$PackageInstallerInstallerManga$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShizukuInstallerAnime.kt$ShizukuInstallerAnime$IllegalStateException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:ShizukuInstallerManga.kt$ShizukuInstallerManga$IllegalStateException()</ID>
    <ID>ThrowsCount:AnimeDownloader.kt$AnimeDownloader$private suspend fun httpDownload( download: AnimeDownload, tmpDir: UniFile, filename: String, threadNumber: Int, safeDownload: Boolean, ): UniFile</ID>
    <ID>ThrowsCount:BackupCreator.kt$BackupCreator$suspend fun backup(uri: Uri, options: BackupOptions): String</ID>
    <ID>ThrowsCount:KavitaApi.kt$KavitaApi$fun getNewToken(apiUrl: String, apiKey: String): String?</ID>
    <ID>ThrowsCount:PlayerViewModel.kt$PlayerViewModel$suspend fun init( animeId: Long, initialEpisodeId: Long, vidList: String, vidIndex: Int, ): Pair&lt;InitResult, Result&lt;Boolean&gt;&gt;</ID>
    <ID>TooGenericExceptionCaught:AboutScreen.kt$AboutScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AddAnimeTracks.kt$AddAnimeTracks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AddMangaTracks.kt$AddMangaTracks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AniChartApi.kt$AniChartApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AniSkipApi.kt$AniSkipApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Anilist.kt$Anilist$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Anilist.kt$Anilist$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnilistModels.kt$ALAnime$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnilistModels.kt$ALManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeCoverFetcher.kt$AnimeCoverFetcher$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeCoverScreenModel.kt$AnimeCoverScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeCoverScreenModel.kt$AnimeCoverScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeDownloadCache.kt$AnimeDownloadCache$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeDownloadPendingDeleter.kt$AnimeDownloadPendingDeleter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeDownloadProvider.kt$AnimeDownloadProvider$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeDownloadStore.kt$AnimeDownloadStore$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeDownloader.kt$AnimeDownloader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeDownloader.kt$AnimeDownloader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionApi.kt$AnimeExtensionApi$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionDetailsScreenModel.kt$AnimeExtensionDetailsScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionInstallActivity.kt$AnimeExtensionInstallActivity$error: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionInstaller.kt$AnimeExtensionInstaller$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionLoader.kt$AnimeExtensionLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionLoader.kt$AnimeExtensionLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeExtensionManager.kt$AnimeExtensionManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeMetadataUpdateJob.kt$AnimeMetadataUpdateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeMetadataUpdateJob.kt$AnimeMetadataUpdateJob$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeScreen.kt$AnimeScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeScreenModel.kt$AnimeScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeSearchScreenModel.kt$AnimeSearchScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeTrackInfoDialog.kt$AnimeTrackInfoDialogHomeScreen.Model$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeTrackInfoDialog.kt$TrackServiceSearchScreen.Model$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:AnimeTracker.kt$AnimeTracker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeTracker.kt$AnimeTracker$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:App.kt$App$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupCreateJob.kt$BackupCreateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupCreator.kt$BackupCreator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupFileValidator.kt$BackupFileValidator$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupRestoreJob.kt$BackupRestoreJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BackupRestorer.kt$BackupRestorer$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Bangumi.kt$Bangumi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Bangumi.kt$Bangumi$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:BrowseAnimeIcons.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:BrowseMangaIcons.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ChapterCache.kt$ChapterCache$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ChapterLoader.kt$ChapterLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:CloseableExtensions.kt$closeException: Throwable</ID>
    <ID>TooGenericExceptionCaught:CloseableExtensions.kt$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ContextExtensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ContextExtensions.kt$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:CrashLogUtil.kt$CrashLogUtil$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:EpisodeLoader.kt$EpisodeLoader.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EpisodeLoader.kt$EpisodeLoader.Companion$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:EpisodeOptionsDialogScreen.kt$EpisodeOptionsDialogScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:GlobalExceptionHandler.kt$GlobalExceptionHandler.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HttpPageLoader.kt$HttpPageLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ImageSaver.kt$ImageSaver$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Jellyfin.kt$Jellyfin$e: Exception</ID>
    <ID>TooGenericExceptionCaught:JellyfinApi.kt$JellyfinApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Kavita.kt$Kavita$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KavitaApi.kt$KavitaApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Kitsu.kt$Kitsu$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Komga.kt$Komga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:KomgaApi.kt$KomgaApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MainActivity.kt$MainActivity.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaCoverFetcher.kt$MangaCoverFetcher$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaCoverScreenModel.kt$MangaCoverScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaCoverScreenModel.kt$MangaCoverScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaDownloadCache.kt$MangaDownloadCache$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaDownloadPendingDeleter.kt$MangaDownloadPendingDeleter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaDownloadProvider.kt$MangaDownloadProvider$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaDownloadStore.kt$MangaDownloadStore$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaDownloader.kt$MangaDownloader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaDownloader.kt$MangaDownloader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaDownloader.kt$MangaDownloader$error: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionApi.kt$MangaExtensionApi$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionDetailsScreenModel.kt$MangaExtensionDetailsScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionInstallActivity.kt$MangaExtensionInstallActivity$error: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionInstaller.kt$MangaExtensionInstaller$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionLoader.kt$MangaExtensionLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionLoader.kt$MangaExtensionLoader$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaExtensionManager.kt$MangaExtensionManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaMetadataUpdateJob.kt$MangaMetadataUpdateJob$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaMetadataUpdateJob.kt$MangaMetadataUpdateJob$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaScreen.kt$MangaScreen$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaScreenModel.kt$MangaScreenModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaSearchScreenModel.kt$MangaSearchScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaTrackInfoDialog.kt$MangaTrackInfoDialogHomeScreen.Model$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaTrackInfoDialog.kt$TrackServiceSearchScreen.Model$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaTracker.kt$MangaTracker$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaTracker.kt$MangaTracker$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MangaUpdates.kt$MangaUpdates$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaUpdatesApi.kt$MangaUpdatesApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MyAnimeList.kt$MyAnimeList$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MyAnimeList.kt$MyAnimeList$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:MyAnimeListApi.kt$MyAnimeListApi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OkioExtensions.kt$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PackageInstallerInstallerAnime.kt$PackageInstallerInstallerAnime$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PackageInstallerInstallerManga.kt$PackageInstallerInstallerManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Pager.kt$Pager$e: IndexOutOfBoundsException</ID>
    <ID>TooGenericExceptionCaught:Pager.kt$Pager$e: NullPointerException</ID>
    <ID>TooGenericExceptionCaught:PagerPageHolder.kt$PagerPageHolder$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:PlayerActivity.kt$PlayerActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlayerViewModel.kt$PlayerViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:PlayerViewModel.kt$PlayerViewModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:RarPageLoader.kt$RarPageLoader$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReaderActivity.kt$ReaderActivity$e: ArrayIndexOutOfBoundsException</ID>
    <ID>TooGenericExceptionCaught:ReaderViewModel.kt$ReaderViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReaderViewModel.kt$ReaderViewModel$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:RefreshAnimeTracks.kt$RefreshAnimeTracks$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:RefreshMangaTracks.kt$RefreshMangaTracks$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:RestoreBackupScreen.kt$RestoreBackupScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetReadStatus.kt$SetReadStatus$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetSeenStatus.kt$SetSeenStatus$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SettingsAdvancedScreen.kt$SettingsAdvancedScreen$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SettingsDataScreen.kt$SettingsDataScreen$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SettingsTrackingScreen.kt$SettingsTrackingScreen$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:Shikimori.kt$Shikimori$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Shikimori.kt$Shikimori$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ShizukuInstallerAnime.kt$ShizukuInstallerAnime$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ShizukuInstallerManga.kt$ShizukuInstallerManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Simkl.kt$Simkl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:Simkl.kt$Simkl$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:Suwayomi.kt$Suwayomi$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SyncChapterProgressWithTrack.kt$SyncChapterProgressWithTrack$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SyncEpisodeProgressWithTrack.kt$SyncEpisodeProgressWithTrack$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:TrackChapter.kt$TrackChapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebViewActivity.kt$WebViewActivity$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebViewScreenModel.kt$WebViewScreenModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebtoonPageHolder.kt$WebtoonPageHolder$e: Throwable</ID>
    <ID>TooGenericExceptionThrown:Anilist.kt$Anilist$throw Exception("$track not found on user library")</ID>
    <ID>TooGenericExceptionThrown:Anilist.kt$Anilist$throw Exception("Unknown score type")</ID>
    <ID>TooGenericExceptionThrown:AnilistApi.kt$AnilistApi$throw Exception("Could not find anime")</ID>
    <ID>TooGenericExceptionThrown:AnilistApi.kt$AnilistApi$throw Exception("Could not find manga")</ID>
    <ID>TooGenericExceptionThrown:AnilistInterceptor.kt$AnilistInterceptor$throw Exception("Not authenticated with Anilist")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloadManager.kt$AnimeDownloadManager$throw Exception(context.stringResource(MR.strings.video_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloadProvider.kt$AnimeDownloadProvider$throw Exception( context.stringResource( MR.strings.invalid_location, downloadsDir?.displayablePath ?: "", ), )</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception( "Launch intent not found", )</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Base file not found")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Cannot merge tmp part file")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Could not get video size")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Download failed")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Download has been stopped")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Download stopped")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Downloaded file not found")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Error in ffmpeg!")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception("Unable to finalize download")</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception(context.stringResource(MR.strings.download_insufficient_space))</ID>
    <ID>TooGenericExceptionThrown:AnimeDownloader.kt$AnimeDownloader$throw Exception(context.stringResource(MR.strings.video_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:AnimeExtensionLoader.kt$AnimeExtensionLoader$throw Exception("Unknown source class type: ${obj.javaClass}")</ID>
    <ID>TooGenericExceptionThrown:AnimeTrackInfoDialog.kt$AnimeTrackInfoDialogHomeScreen.Model$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:AppUpdateDownloadJob.kt$AppUpdateDownloadJob$throw Exception("Unsuccessful response")</ID>
    <ID>TooGenericExceptionThrown:BangumiApi.kt$BangumiApi$throw Exception("Null Response")</ID>
    <ID>TooGenericExceptionThrown:BangumiInterceptor.kt$BangumiInterceptor$throw Exception("Not authenticated with Bangumi")</ID>
    <ID>TooGenericExceptionThrown:ChapterLoader.kt$ChapterLoader$throw Exception(context.stringResource(MR.strings.page_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:ExternalIntents.kt$ExternalIntents$throw Exception("Video list is empty")</ID>
    <ID>TooGenericExceptionThrown:Jellyfin.kt$Jellyfin$throw Exception("Not used")</ID>
    <ID>TooGenericExceptionThrown:KitsuApi.kt$KitsuApi$throw Exception("Could not find anime")</ID>
    <ID>TooGenericExceptionThrown:KitsuApi.kt$KitsuApi$throw Exception("Could not find manga")</ID>
    <ID>TooGenericExceptionThrown:KitsuInterceptor.kt$KitsuInterceptor$throw Exception("Not authenticated with Kitsu")</ID>
    <ID>TooGenericExceptionThrown:KitsuModels.kt$KitsuLibAnime$throw Exception("Unknown status")</ID>
    <ID>TooGenericExceptionThrown:KitsuModels.kt$KitsuLibManga$throw Exception("Unknown status")</ID>
    <ID>TooGenericExceptionThrown:KitsuModels.kt$throw Exception("Unknown status")</ID>
    <ID>TooGenericExceptionThrown:Komga.kt$Komga$throw Exception( "Not used", )</ID>
    <ID>TooGenericExceptionThrown:MangaDownloadManager.kt$MangaDownloadManager$throw Exception(context.stringResource(MR.strings.page_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:MangaDownloadProvider.kt$MangaDownloadProvider$throw Exception( context.stringResource( MR.strings.invalid_location, downloadsDir?.displayablePath ?: "", ), )</ID>
    <ID>TooGenericExceptionThrown:MangaDownloader.kt$MangaDownloader$throw Exception(context.stringResource(MR.strings.page_list_empty_error))</ID>
    <ID>TooGenericExceptionThrown:MangaExtensionLoader.kt$MangaExtensionLoader$throw Exception("Unknown source class type: ${obj.javaClass}")</ID>
    <ID>TooGenericExceptionThrown:MangaTrackInfoDialog.kt$MangaTrackInfoDialogHomeScreen.Model$throw Exception()</ID>
    <ID>TooGenericExceptionThrown:MangaUpdates.kt$MangaUpdates$throw Throwable( "Unable to login", )</ID>
    <ID>TooGenericExceptionThrown:PlayerViewModel.kt$PlayerViewModel$throw Exception("No episode loaded.")</ID>
    <ID>TooGenericExceptionThrown:PlayerViewModel.kt$PlayerViewModel$throw Exception("Video list is empty.")</ID>
    <ID>TooGenericExceptionThrown:PlayerViewModel.kt$PlayerViewModel$throw Exception("Video selected from empty list?")</ID>
    <ID>TooGenericExceptionThrown:ShikimoriApi.kt$ShikimoriApi$throw Exception("Too much animes in response")</ID>
    <ID>TooGenericExceptionThrown:ShikimoriApi.kt$ShikimoriApi$throw Exception("Too much mangas in response")</ID>
    <ID>TooGenericExceptionThrown:ShikimoriInterceptor.kt$ShikimoriInterceptor$throw Exception("Not authenticated with Shikimori")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstallerAnime.kt$ShizukuInstallerAnime$throw RuntimeException("Failed to commit install session $sessionId")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstallerAnime.kt$ShizukuInstallerAnime$throw RuntimeException("Failed to create install session")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstallerAnime.kt$ShizukuInstallerAnime$throw RuntimeException("Failed to write APK to session $sessionId")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstallerManga.kt$ShizukuInstallerManga$throw RuntimeException("Failed to commit install session $sessionId")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstallerManga.kt$ShizukuInstallerManga$throw RuntimeException("Failed to create install session")</ID>
    <ID>TooGenericExceptionThrown:ShizukuInstallerManga.kt$ShizukuInstallerManga$throw RuntimeException("Failed to write APK to session $sessionId")</ID>
    <ID>TooGenericExceptionThrown:SimklInterceptor.kt$SimklInterceptor$throw Exception("Not authenticated with Simkl")</ID>
    <ID>TooManyFunctions:Anilist.kt$Anilist : BaseTrackerMangaTrackerAnimeTrackerDeletableMangaTrackerDeletableAnimeTracker</ID>
    <ID>TooManyFunctions:AnilistApi.kt$AnilistApi</ID>
    <ID>TooManyFunctions:AnimeCoverFetcher.kt$AnimeCoverFetcher : Fetcher</ID>
    <ID>TooManyFunctions:AnimeDownloadCache.kt$AnimeDownloadCache</ID>
    <ID>TooManyFunctions:AnimeDownloadManager.kt$AnimeDownloadManager</ID>
    <ID>TooManyFunctions:AnimeDownloadProvider.kt$AnimeDownloadProvider</ID>
    <ID>TooManyFunctions:AnimeDownloadQueueScreenModel.kt$AnimeDownloadQueueScreenModel : ScreenModel</ID>
    <ID>TooManyFunctions:AnimeDownloader.kt$AnimeDownloader</ID>
    <ID>TooManyFunctions:AnimeExtensionLoader.kt$AnimeExtensionLoader</ID>
    <ID>TooManyFunctions:AnimeExtensionManager.kt$AnimeExtensionManager</ID>
    <ID>TooManyFunctions:AnimeExtensionsScreenModel.kt$AnimeExtensionsScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:AnimeLibraryScreenModel.kt$AnimeLibraryScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:AnimeRestorer.kt$AnimeRestorer</ID>
    <ID>TooManyFunctions:AnimeScreenModel.kt$AnimeScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:AnimeTracker.kt$AnimeTracker</ID>
    <ID>TooManyFunctions:AnimeUpdatesScreenModel.kt$AnimeUpdatesScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:Bangumi.kt$Bangumi : BaseTrackerMangaTrackerAnimeTracker</ID>
    <ID>TooManyFunctions:BangumiApi.kt$BangumiApi</ID>
    <ID>TooManyFunctions:BrowseAnimeSourceScreenModel.kt$BrowseAnimeSourceScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:BrowseMangaSourceScreenModel.kt$BrowseMangaSourceScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:ChapterTransition.kt$eu.kanade.presentation.reader.ChapterTransition.kt</ID>
    <ID>TooManyFunctions:ContextExtensions.kt$eu.kanade.tachiyomi.util.system.ContextExtensions.kt</ID>
    <ID>TooManyFunctions:ExternalIntents.kt$ExternalIntents</ID>
    <ID>TooManyFunctions:Jellyfin.kt$Jellyfin : BaseTrackerEnhancedAnimeTrackerAnimeTracker</ID>
    <ID>TooManyFunctions:Kavita.kt$Kavita : BaseTrackerEnhancedMangaTrackerMangaTracker</ID>
    <ID>TooManyFunctions:Kitsu.kt$Kitsu : BaseTrackerAnimeTrackerMangaTrackerDeletableMangaTrackerDeletableAnimeTracker</ID>
    <ID>TooManyFunctions:KitsuApi.kt$KitsuApi</ID>
    <ID>TooManyFunctions:Komga.kt$Komga : BaseTrackerEnhancedMangaTrackerMangaTracker</ID>
    <ID>TooManyFunctions:MangaCoverFetcher.kt$MangaCoverFetcher : Fetcher</ID>
    <ID>TooManyFunctions:MangaDownloadCache.kt$MangaDownloadCache</ID>
    <ID>TooManyFunctions:MangaDownloadManager.kt$MangaDownloadManager</ID>
    <ID>TooManyFunctions:MangaDownloadProvider.kt$MangaDownloadProvider</ID>
    <ID>TooManyFunctions:MangaDownloadQueueScreenModel.kt$MangaDownloadQueueScreenModel : ScreenModel</ID>
    <ID>TooManyFunctions:MangaDownloader.kt$MangaDownloader</ID>
    <ID>TooManyFunctions:MangaExtensionLoader.kt$MangaExtensionLoader</ID>
    <ID>TooManyFunctions:MangaExtensionManager.kt$MangaExtensionManager</ID>
    <ID>TooManyFunctions:MangaExtensionsScreenModel.kt$MangaExtensionsScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:MangaLibraryScreenModel.kt$MangaLibraryScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:MangaRestorer.kt$MangaRestorer</ID>
    <ID>TooManyFunctions:MangaScreenModel.kt$MangaScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:MangaTracker.kt$MangaTracker</ID>
    <ID>TooManyFunctions:MangaUpdates.kt$MangaUpdates : BaseTrackerMangaTrackerDeletableMangaTracker</ID>
    <ID>TooManyFunctions:MangaUpdatesScreenModel.kt$MangaUpdatesScreenModel : StateScreenModel</ID>
    <ID>TooManyFunctions:MyAnimeList.kt$MyAnimeList : BaseTrackerMangaTrackerAnimeTrackerDeletableMangaTrackerDeletableAnimeTracker</ID>
    <ID>TooManyFunctions:MyAnimeListApi.kt$MyAnimeListApi</ID>
    <ID>TooManyFunctions:NotificationReceiver.kt$NotificationReceiver : BroadcastReceiver</ID>
    <ID>TooManyFunctions:NotificationReceiver.kt$NotificationReceiver$Companion</ID>
    <ID>TooManyFunctions:PagerPageHolder.kt$PagerPageHolder : ReaderPageImageViewPositionableView</ID>
    <ID>TooManyFunctions:PagerViewer.kt$PagerViewer : Viewer</ID>
    <ID>TooManyFunctions:PlayerActivity.kt$PlayerActivity : BaseActivity</ID>
    <ID>TooManyFunctions:PlayerControlsView.kt$PlayerControlsView : LinearLayout</ID>
    <ID>TooManyFunctions:PlayerPreferences.kt$PlayerPreferences</ID>
    <ID>TooManyFunctions:PlayerViewModel.kt$PlayerViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ReaderActivity.kt$ReaderActivity : BaseActivity</ID>
    <ID>TooManyFunctions:ReaderPageImageView.kt$ReaderPageImageView : FrameLayout</ID>
    <ID>TooManyFunctions:ReaderPreferences.kt$ReaderPreferences</ID>
    <ID>TooManyFunctions:ReaderViewModel.kt$ReaderViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SharedPreferencesDataStore.kt$SharedPreferencesDataStore : PreferenceDataStore</ID>
    <ID>TooManyFunctions:Shikimori.kt$Shikimori : BaseTrackerMangaTrackerAnimeTrackerDeletableMangaTrackerDeletableAnimeTracker</ID>
    <ID>TooManyFunctions:ShikimoriApi.kt$ShikimoriApi</ID>
    <ID>TooManyFunctions:Simkl.kt$Simkl : BaseTrackerAnimeTracker</ID>
    <ID>TooManyFunctions:SimklApi.kt$SimklApi</ID>
    <ID>TooManyFunctions:SourcePreferences.kt$SourcePreferences</ID>
    <ID>TooManyFunctions:SubtitleColorPage.kt$eu.kanade.tachiyomi.ui.player.settings.sheets.subtitle.SubtitleColorPage.kt</ID>
    <ID>TooManyFunctions:Suwayomi.kt$Suwayomi : BaseTrackerEnhancedMangaTrackerMangaTracker</ID>
    <ID>TooManyFunctions:WebtoonPageHolder.kt$WebtoonPageHolder : WebtoonBaseHolder</ID>
    <ID>TooManyFunctions:WebtoonRecyclerView.kt$WebtoonRecyclerView : RecyclerView</ID>
    <ID>TooManyFunctions:WebtoonViewer.kt$WebtoonViewer : Viewer</ID>
    <ID>TopLevelPropertyNaming:AnimeDownloader.kt$// Arbitrary minimum required space to start a download: 200 MB private const val MIN_DISK_SPACE = 200L * 1024 * 1024</ID>
    <ID>TopLevelPropertyNaming:AnimeExtensionInstallActivity.kt$private const val INSTALL_REQUEST_CODE = 500</ID>
    <ID>TopLevelPropertyNaming:AnimeLibraryUpdateNotifier.kt$private const val ANIME_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>TopLevelPropertyNaming:AnimeLibraryUpdateNotifier.kt$private const val NOTIF_ICON_SIZE = 192</ID>
    <ID>TopLevelPropertyNaming:AnimeLibraryUpdateNotifier.kt$private const val NOTIF_MAX_EPISODES = 5</ID>
    <ID>TopLevelPropertyNaming:AnimeLibraryUpdateNotifier.kt$private const val NOTIF_TITLE_MAX_LEN = 45</ID>
    <ID>TopLevelPropertyNaming:App.kt$private const val ACTION_DISABLE_INCOGNITO_MODE = "tachi.action.DISABLE_INCOGNITO_MODE"</ID>
    <ID>TopLevelPropertyNaming:AppBar.kt$const val SEARCH_DEBOUNCE_MILLIS = 250L</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val IS_AUTO_BACKUP_KEY = "is_auto_backup" // Boolean</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val LOCATION_URI_KEY = "location_uri" // String</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val OPTIONS_KEY = "options" // BooleanArray</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val TAG_AUTO = "BackupCreator"</ID>
    <ID>TopLevelPropertyNaming:BackupCreateJob.kt$private const val TAG_MANUAL = "$TAG_AUTO:manual"</ID>
    <ID>TopLevelPropertyNaming:BackupRestoreJob.kt$private const val LOCATION_URI_KEY = "location_uri" // String</ID>
    <ID>TopLevelPropertyNaming:BackupRestoreJob.kt$private const val OPTIONS_KEY = "options" // BooleanArray</ID>
    <ID>TopLevelPropertyNaming:BackupRestoreJob.kt$private const val SYNC_KEY = "sync" // Boolean</ID>
    <ID>TopLevelPropertyNaming:ChapterCache.kt$/** Application cache version. */ private const val PARAMETER_APP_VERSION = 1</ID>
    <ID>TopLevelPropertyNaming:ChapterCache.kt$/** The maximum number of bytes this cache should use to store. */ private const val PARAMETER_CACHE_SIZE = 100L * 1024 * 1024</ID>
    <ID>TopLevelPropertyNaming:ChapterCache.kt$/** The number of values per cache entry. Must be positive. */ private const val PARAMETER_VALUE_COUNT = 1</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val ALPHA_MASK: Long = 0xFF000000</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val BLUE_MASK: Long = 0x000000FF</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val GREEN_MASK: Long = 0x0000FF00</ID>
    <ID>TopLevelPropertyNaming:ColorFilterPage.kt$private const val RED_MASK: Long = 0x00FF0000</ID>
    <ID>TopLevelPropertyNaming:CreateAniyomiExtensionRepo.kt$const val OFFICIAL_ANIYOMI_REPO_BASE_URL = "https://raw.githubusercontent.com/aniyomiorg/aniyomi-extensions/repo"</ID>
    <ID>TopLevelPropertyNaming:DisplayExtensions.kt$// make sure icons on the nav rail fit private const val TABLET_UI_MIN_SCREEN_WIDTH_LANDSCAPE_DP = 600</ID>
    <ID>TopLevelPropertyNaming:DisplayExtensions.kt$// some tablets have screen width like 711dp = 1600px / 2.25 private const val TABLET_UI_MIN_SCREEN_WIDTH_PORTRAIT_DP = 700</ID>
    <ID>TopLevelPropertyNaming:DisplayExtensions.kt$private const val TABLET_UI_REQUIRED_SCREEN_WIDTH_DP = 720</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$// List of supported external players and their packages const val MPV_PLAYER = "is.xyz.mpv"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val JUST_PLAYER = "com.brouken.player"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val MPV_REMOTE = "com.husudosu.mpvremote"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val MX_PLAYER = "com.mxtech.videoplayer"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val MX_PLAYER_FREE = "com.mxtech.videoplayer.ad"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val MX_PLAYER_PRO = "com.mxtech.videoplayer.pro"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val NEXT_PLAYER = "dev.anilbeesetti.nextplayer"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val VLC_PLAYER = "org.videolan.vlc"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val WEB_VIDEO_CASTER = "com.instantbits.cast.webvideo"</ID>
    <ID>TopLevelPropertyNaming:ExternalIntents.kt$const val X_PLAYER = "video.player.videoplayer"</ID>
    <ID>TopLevelPropertyNaming:GLUtil.kt$// Safe minimum default size private const val IMAGE_MAX_BITMAP_DIMENSION = 2048</ID>
    <ID>TopLevelPropertyNaming:GestureHandler.kt$private const val STATE_HORIZONTAL = 1</ID>
    <ID>TopLevelPropertyNaming:GestureHandler.kt$private const val STATE_UP = 0</ID>
    <ID>TopLevelPropertyNaming:GestureHandler.kt$private const val STATE_VERTICAL_LEFT = 2</ID>
    <ID>TopLevelPropertyNaming:GestureHandler.kt$private const val STATE_VERTICAL_RIGHT = 3</ID>
    <ID>TopLevelPropertyNaming:GuidesStep.kt$const val GETTING_STARTED_URL = "https://aniyomi.org/docs/guides/getting-started"</ID>
    <ID>TopLevelPropertyNaming:HistoriesTab.kt$private const val TAB_ANIME = 0</ID>
    <ID>TopLevelPropertyNaming:HistoriesTab.kt$private const val TAB_MANGA = 1</ID>
    <ID>TopLevelPropertyNaming:KomgaApi.kt$private const val READLIST_API = "/api/v1/readlists"</ID>
    <ID>TopLevelPropertyNaming:LocaleHelper.kt$internal const val LAST_USED_KEY = "last_used"</ID>
    <ID>TopLevelPropertyNaming:LocaleHelper.kt$internal const val PINNED_KEY = "pinned"</ID>
    <ID>TopLevelPropertyNaming:MainActivity.kt$// Splash screen private const val SPLASH_MIN_DURATION = 500 // ms</ID>
    <ID>TopLevelPropertyNaming:MainActivity.kt$private const val SPLASH_EXIT_ANIM_DURATION = 400L // ms</ID>
    <ID>TopLevelPropertyNaming:MainActivity.kt$private const val SPLASH_MAX_DURATION = 5000 // ms</ID>
    <ID>TopLevelPropertyNaming:MangaDownloader.kt$// Arbitrary minimum required space to start a download: 200 MB private const val MIN_DISK_SPACE = 200L * 1024 * 1024</ID>
    <ID>TopLevelPropertyNaming:MangaExtensionInstallActivity.kt$private const val INSTALL_REQUEST_CODE = 500</ID>
    <ID>TopLevelPropertyNaming:MangaLibraryUpdateNotifier.kt$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>TopLevelPropertyNaming:MangaLibraryUpdateNotifier.kt$private const val NOTIF_ICON_SIZE = 192</ID>
    <ID>TopLevelPropertyNaming:MangaLibraryUpdateNotifier.kt$private const val NOTIF_MAX_CHAPTERS = 5</ID>
    <ID>TopLevelPropertyNaming:MangaLibraryUpdateNotifier.kt$private const val NOTIF_TITLE_MAX_LEN = 45</ID>
    <ID>TopLevelPropertyNaming:PackageInstallerInstallerAnime.kt$private const val INSTALL_ACTION = "PackageInstallerInstaller.INSTALL_ACTION"</ID>
    <ID>TopLevelPropertyNaming:PackageInstallerInstallerManga.kt$private const val INSTALL_ACTION = "PackageInstallerInstaller.INSTALL_ACTION"</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val ACTION_MEDIA_CONTROL = "media_control"</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val EXTRA_CONTROL_TYPE = "control_type"</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val PIP_NEXT = 4</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val PIP_PAUSE = 2</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val PIP_PLAY = 1</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val PIP_PREVIOUS = 3</ID>
    <ID>TopLevelPropertyNaming:PictureInPictureHandler.kt$internal const val PIP_SKIP = 5</ID>
    <ID>TopLevelPropertyNaming:ReaderNavigationOverlayView.kt$private const val FADE_DURATION = 1000L</ID>
    <ID>TopLevelPropertyNaming:ReaderPageImageView.kt$private const val MAX_ZOOM_SCALE = 5F</ID>
    <ID>TopLevelPropertyNaming:ShizukuInstallerAnime.kt$private const val SHIZUKU_PERMISSION_REQUEST_CODE = 14045</ID>
    <ID>TopLevelPropertyNaming:ShizukuInstallerManga.kt$private const val SHIZUKU_PERMISSION_REQUEST_CODE = 14045</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val ADDRESS_DEFAULT = ""</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val ADDRESS_TITLE = "Server URL Address"</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val LOGIN_DEFAULT = ""</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val LOGIN_TITLE = "Login (Basic Auth)"</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val PASSWORD_DEFAULT = ""</ID>
    <ID>TopLevelPropertyNaming:SuwayomiApi.kt$private const val PASSWORD_TITLE = "Password (Basic Auth)"</ID>
    <ID>TopLevelPropertyNaming:TrustAnimeExtension.kt$// jmir1's key private const val officialSignature = "50ab1d1e3a20d204d0ad6d334c7691c632e41b98dfa132bf385695fdfa63839c"</ID>
    <ID>TopLevelPropertyNaming:TrustMangaExtension.kt$// inorichi's key private const val officialSignature = "7ce04da7773d41b489f4693a366c36bcd0a11fc39b547168553c285bd7348e23"</ID>
    <ID>TopLevelPropertyNaming:UpdatesTab.kt$private const val TAB_ANIME = 0</ID>
    <ID>TopLevelPropertyNaming:UpdatesTab.kt$private const val TAB_MANGA = 1</ID>
    <ID>TopLevelPropertyNaming:WebtoonAdapter.kt$/** * View holder type of a chapter page view. */ private const val PAGE_VIEW = 0</ID>
    <ID>TopLevelPropertyNaming:WebtoonAdapter.kt$/** * View holder type of a chapter transition view. */ private const val TRANSITION_VIEW = 1</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val ANIMATOR_DURATION_TIME = 200</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val DEFAULT_RATE = 1f</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val MAX_SCALE_RATE = 3f</ID>
    <ID>TopLevelPropertyNaming:WebtoonRecyclerView.kt$private const val MIN_RATE = 0.5f</ID>
    <ID>UnstableCollections:AnimeCategoryScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:AnimeDownloadQueueScreen.kt$List&lt;AnimeDownloadHeaderItem&gt;</ID>
    <ID>UnstableCollections:AnimeHistoryScreen.kt$List&lt;AnimeHistoryUiModel&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryComfortableGrid.kt$List&lt;AnimeLibraryItem&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryComfortableGrid.kt$List&lt;LibraryAnime&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryCompactGrid.kt$List&lt;AnimeLibraryItem&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryCompactGrid.kt$List&lt;LibraryAnime&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryContent.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryContent.kt$List&lt;LibraryAnime&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryList.kt$List&lt;AnimeLibraryItem&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryList.kt$List&lt;LibraryAnime&gt;</ID>
    <ID>UnstableCollections:AnimeLibraryPager.kt$List&lt;LibraryAnime&gt;</ID>
    <ID>UnstableCollections:AnimeScreen.kt$List&lt;EpisodeList.Item&gt;</ID>
    <ID>UnstableCollections:AnimeTrackInfoDialogHome.kt$List&lt;AnimeTrackItem&gt;</ID>
    <ID>UnstableCollections:AnimeUpdatesScreen.kt$List&lt;AnimeUpdatesItem&gt;</ID>
    <ID>UnstableCollections:Commons.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:Commons.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:CumulativeStorage.kt$List&lt;StorageItem&gt;</ID>
    <ID>UnstableCollections:DownloadsTab.kt$DownloadsTab$List&lt;AnimeDownloadHeaderItem&gt;</ID>
    <ID>UnstableCollections:DownloadsTab.kt$DownloadsTab$List&lt;MangaDownloadHeaderItem&gt;</ID>
    <ID>UnstableCollections:EpisodeListDialog.kt$List&lt;Episode&gt;</ID>
    <ID>UnstableCollections:EpisodeOptionsDialogScreen.kt$List&lt;Video&gt;</ID>
    <ID>UnstableCollections:GlobalAnimeSearchCardRow.kt$List&lt;Anime&gt;</ID>
    <ID>UnstableCollections:GlobalAnimeSearchScreen.kt$Map&lt;AnimeCatalogueSource, AnimeSearchItemResult&gt;</ID>
    <ID>UnstableCollections:GlobalMangaSearchCardRow.kt$List&lt;Manga&gt;</ID>
    <ID>UnstableCollections:GlobalMangaSearchScreen.kt$Map&lt;CatalogueSource, MangaSearchItemResult&gt;</ID>
    <ID>UnstableCollections:LibraryTabs.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:ListPreferenceWidget.kt$Map&lt;out T, String&gt;</ID>
    <ID>UnstableCollections:MangaCategoryScreen.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:MangaDownloadQueueScreen.kt$List&lt;MangaDownloadHeaderItem&gt;</ID>
    <ID>UnstableCollections:MangaHistoryScreen.kt$List&lt;MangaHistoryUiModel&gt;</ID>
    <ID>UnstableCollections:MangaLibraryComfortableGrid.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:MangaLibraryComfortableGrid.kt$List&lt;MangaLibraryItem&gt;</ID>
    <ID>UnstableCollections:MangaLibraryCompactGrid.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:MangaLibraryCompactGrid.kt$List&lt;MangaLibraryItem&gt;</ID>
    <ID>UnstableCollections:MangaLibraryContent.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:MangaLibraryContent.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:MangaLibraryList.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:MangaLibraryList.kt$List&lt;MangaLibraryItem&gt;</ID>
    <ID>UnstableCollections:MangaLibraryPager.kt$List&lt;LibraryManga&gt;</ID>
    <ID>UnstableCollections:MangaScreen.kt$List&lt;ChapterList.Item&gt;</ID>
    <ID>UnstableCollections:MangaTrackInfoDialogHome.kt$List&lt;MangaTrackItem&gt;</ID>
    <ID>UnstableCollections:MangaUpdatesScreen.kt$List&lt;MangaUpdatesItem&gt;</ID>
    <ID>UnstableCollections:MultiSelectListPreferenceWidget.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:PreferenceScreen.kt$List&lt;Preference&gt;</ID>
    <ID>UnstableCollections:ScanlatorFilterDialog.kt$Set&lt;String&gt;</ID>
    <ID>UnstableCollections:Seekbar.kt$Seekbar$List&lt;Segment&gt;</ID>
    <ID>UnstableCollections:SelectStorageCategory.kt$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:SettingsLibraryScreen.kt$SettingsLibraryScreen$List&lt;Category&gt;</ID>
    <ID>UnstableCollections:TrackInfoDialogSelector.kt$Map&lt;Long, StringResource?&gt;</ID>
    <ID>UnstableCollections:TriStateListDialog.kt$List&lt;T&gt;</ID>
    <ID>UnstableCollections:VideoChaptersSheet.kt$List&lt;VideoChapter&gt;</ID>
    <ID>UnstableCollections:WebViewScreenContent.kt$Map&lt;String, String&gt;</ID>
    <ID>UnusedParameter:AnimeUpdatesScreen.kt$onInvertSelection: () -&gt; Unit</ID>
    <ID>UnusedParameter:MangaUpdatesScreen.kt$onInvertSelection: () -&gt; Unit</ID>
    <ID>UnusedParameter:MoreScreen.kt$onClickStorage: () -&gt; Unit</ID>
    <ID>UnusedPrivateMember:AnimeHistoryItem.kt$@PreviewLightDark @Composable private fun HistoryItemPreviews( @PreviewParameter(AnimeHistoryWithRelationsProvider::class) historyWithRelations: AnimeHistoryWithRelations, )</ID>
    <ID>UnusedPrivateMember:AnimeTrackInfoDialogHome.kt$@PreviewLightDark @Composable private fun TrackInfoDialogHomePreviews( @PreviewParameter(AnimeTrackInfoDialogHomePreviewProvider::class) content: @Composable () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:AnimeTrackerSearch.kt$@PreviewLightDark @Composable private fun TrackerSearchPreviews( @PreviewParameter(AnimeTrackerSearchPreviewProvider::class) content: @Composable () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:AppThemePreferenceWidget.kt$@PreviewLightDark @Composable private fun AppThemesListPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextLongTitlePreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextNoNextPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextNoPreviousPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextPreview()</ID>
    <ID>UnusedPrivateMember:ChapterTransition.kt$@PreviewLightDark @Composable private fun TransitionTextWithGapPreview()</ID>
    <ID>UnusedPrivateMember:CrashScreen.kt$@PreviewLightDark @Composable private fun CrashScreenPreview()</ID>
    <ID>UnusedPrivateMember:EmptyScreen.kt$@PreviewLightDark @Composable private fun NoActionPreview()</ID>
    <ID>UnusedPrivateMember:EmptyScreen.kt$@PreviewLightDark @Composable private fun WithActionPreview()</ID>
    <ID>UnusedPrivateMember:GuidesStep.kt$@PreviewLightDark @Composable private fun GuidesStepPreview()</ID>
    <ID>UnusedPrivateMember:HistoryDialogs.kt$@PreviewLightDark @Composable private fun HistoryDeleteDialogPreview()</ID>
    <ID>UnusedPrivateMember:InfoWidget.kt$@PreviewLightDark @Composable private fun InfoWidgetPreview()</ID>
    <ID>UnusedPrivateMember:LibraryBadges.kt$@PreviewLightDark @Composable private fun BadgePreview()</ID>
    <ID>UnusedPrivateMember:MangaTrackInfoDialogHome.kt$@PreviewLightDark @Composable private fun TrackInfoDialogHomePreviews( @PreviewParameter(MangaTrackInfoDialogHomePreviewProvider::class) content: @Composable () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:MangaTrackerSearch.kt$@PreviewLightDark @Composable private fun TrackerSearchPreviews( @PreviewParameter(MangaTrackerSearchPreviewProvider::class) content: @Composable () -&gt; Unit, )</ID>
    <ID>UnusedPrivateMember:MissingItemCountListItem.kt$@PreviewLightDark @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:ModeSelectionDialog.kt$@PreviewLightDark @Composable private fun Preview()</ID>
    <ID>UnusedPrivateMember:NewUpdateScreen.kt$@PreviewLightDark @Composable private fun NewUpdateScreenPreview()</ID>
    <ID>UnusedPrivateMember:OrientationSelectDialog.kt$@PreviewLightDark @Composable private fun DialogContentPreview()</ID>
    <ID>UnusedPrivateMember:PageIndicatorText.kt$@PreviewLightDark @Composable private fun PageIndicatorTextPreview()</ID>
    <ID>UnusedPrivateMember:PermissionStep.kt$PermissionStep$@Composable private fun SectionHeader( text: String, modifier: Modifier = Modifier, )</ID>
    <ID>UnusedPrivateMember:ReadingModeSelectDialog.kt$@PreviewLightDark @Composable private fun DialogContentPreview()</ID>
    <ID>UnusedPrivateMember:SwitchPreferenceWidget.kt$@PreviewLightDark @Composable private fun SwitchPreferenceWidgetPreview()</ID>
    <ID>UnusedPrivateMember:TextPreferenceWidget.kt$@PreviewLightDark @Composable private fun TextPreferenceWidgetPreview()</ID>
    <ID>UnusedPrivateMember:TrackInfoDialogSelector.kt$@PreviewLightDark @Composable private fun TrackStatusSelectorPreviews()</ID>
    <ID>UnusedPrivateMember:TrackLogoIcon.kt$@PreviewLightDark @Composable private fun TrackLogoIconPreviews( @PreviewParameter(TrackLogoIconPreviewProvider::class) tracker: Tracker, )</ID>
    <ID>UnusedPrivateProperty:AnimeExtensionLoader.kt$AnimeExtensionLoader$private const val METADATA_HAS_CHANGELOG = "tachiyomi.animeextension.hasChangelog"</ID>
    <ID>UnusedPrivateProperty:AnimeExtensionLoader.kt$AnimeExtensionLoader$private const val METADATA_HAS_README = "tachiyomi.animeextension.hasReadme"</ID>
    <ID>UnusedPrivateProperty:AnimeLibraryUpdateJob.kt$AnimeLibraryUpdateJob.Companion$private const val ANIME_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>UnusedPrivateProperty:AnimeMetadataUpdateJob.kt$AnimeMetadataUpdateJob.Companion$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>UnusedPrivateProperty:AnimeSourcesScreenModel.kt$AnimeSourcesScreenModel$private val preferences: BasePreferences = Injekt.get()</ID>
    <ID>UnusedPrivateProperty:AnimeSourcesScreenModel.kt$AnimeSourcesScreenModel$private val sourcePreferences: SourcePreferences = Injekt.get()</ID>
    <ID>UnusedPrivateProperty:HistoriesTab.kt$private const val TAB_ANIME = 0</ID>
    <ID>UnusedPrivateProperty:HistoriesTab.kt$private const val TAB_MANGA = 1</ID>
    <ID>UnusedPrivateProperty:MangaLibraryUpdateJob.kt$MangaLibraryUpdateJob.Companion$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>UnusedPrivateProperty:MangaMetadataUpdateJob.kt$MangaMetadataUpdateJob.Companion$private const val MANGA_PER_SOURCE_QUEUE_WARNING_THRESHOLD = 60</ID>
    <ID>UnusedPrivateProperty:MangaSourcesScreenModel.kt$MangaSourcesScreenModel$private val preferences: BasePreferences = Injekt.get()</ID>
    <ID>UnusedPrivateProperty:TrackerManager.kt$TrackerManager$context: Context</ID>
    <ID>UnusedPrivateProperty:UpdatesTab.kt$private const val TAB_ANIME = 0</ID>
    <ID>UnusedPrivateProperty:UpdatesTab.kt$private const val TAB_MANGA = 1</ID>
    <ID>UseCheckOrError:AnimeScreenModel.kt$AnimeScreenModel$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:MangaScreenModel.kt$MangaScreenModel$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:PackageInstallerInstallerAnime.kt$PackageInstallerInstallerAnime$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:PackageInstallerInstallerManga.kt$PackageInstallerInstallerManga$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:ReadingMode.kt$ReadingMode.Companion$throw IllegalStateException( "Preference value must be resolved: $preference", )</ID>
    <ID>UseCheckOrError:ShizukuInstallerAnime.kt$ShizukuInstallerAnime$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:ShizukuInstallerManga.kt$ShizukuInstallerManga$throw IllegalStateException()</ID>
    <ID>UseCheckOrError:SourceFilterAnimeDialog.kt$throw IllegalStateException("Unknown TriState state: $this")</ID>
    <ID>UseCheckOrError:SourceFilterMangaDialog.kt$throw IllegalStateException("Unknown TriState state: $this")</ID>
    <ID>UtilityClassWithPublicConstructor:EpisodeLoader.kt$EpisodeLoader</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var anime_id: Long</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var finished_watching_date: Long</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var last_episode_seen: Double</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var library_id: Long?</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var remote_id: Long</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var started_watching_date: Long</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var total_episodes: Long</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var tracker_id: Long</ID>
    <ID>VariableNaming:AnimeTrack.kt$AnimeTrack$var tracking_url: String</ID>
    <ID>VariableNaming:AnimeTrackSearch.kt$AnimeTrackSearch$var cover_url: String = ""</ID>
    <ID>VariableNaming:AnimeTrackSearch.kt$AnimeTrackSearch$var publishing_status: String = ""</ID>
    <ID>VariableNaming:AnimeTrackSearch.kt$AnimeTrackSearch$var publishing_type: String = ""</ID>
    <ID>VariableNaming:AnimeTrackSearch.kt$AnimeTrackSearch$var start_date: String = ""</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var date_fetch: Long</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var last_modified: Long</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var last_page_read: Int</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var manga_id: Long?</ID>
    <ID>VariableNaming:Chapter.kt$Chapter$var source_order: Int</ID>
    <ID>VariableNaming:Episode.kt$Episode$var anime_id: Long?</ID>
    <ID>VariableNaming:Episode.kt$Episode$var date_fetch: Long</ID>
    <ID>VariableNaming:Episode.kt$Episode$var last_modified: Long</ID>
    <ID>VariableNaming:Episode.kt$Episode$var last_second_seen: Long</ID>
    <ID>VariableNaming:Episode.kt$Episode$var source_order: Int</ID>
    <ID>VariableNaming:Episode.kt$Episode$var total_seconds: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var finished_reading_date: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var last_chapter_read: Double</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var library_id: Long?</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var manga_id: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var remote_id: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var started_reading_date: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var total_chapters: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var tracker_id: Long</ID>
    <ID>VariableNaming:MangaTrack.kt$MangaTrack$var tracking_url: String</ID>
    <ID>VariableNaming:MangaTrackSearch.kt$MangaTrackSearch$var cover_url: String = ""</ID>
    <ID>VariableNaming:MangaTrackSearch.kt$MangaTrackSearch$var publishing_status: String = ""</ID>
    <ID>VariableNaming:MangaTrackSearch.kt$MangaTrackSearch$var publishing_type: String = ""</ID>
    <ID>VariableNaming:MangaTrackSearch.kt$MangaTrackSearch$var start_date: String = ""</ID>
    <ID>ForbiddenComment:BaselineProfileGenerator.kt$BaselineProfileGenerator$// TODO: automate storage permissions and possibly open manga details screen too?</ID>
    <ID>ConstructorParameterNaming:ChapterDetails.kt$ChapterDetails$val chapter_number: Float</ID>
    <ID>ConstructorParameterNaming:ChapterDetails.kt$ChapterDetails$val date_upload: String? = null</ID>
    <ID>ConstructorParameterNaming:EpisodeDetails.kt$EpisodeDetails$val date_upload: String? = null</ID>
    <ID>ConstructorParameterNaming:EpisodeDetails.kt$EpisodeDetails$val episode_number: Float</ID>
    <ID>TopLevelPropertyNaming:ComicInfo.kt$const val COMIC_INFO_FILE = "ComicInfo.xml"</ID>
    <ID>ForEachOnRange:UpdatesAnimeWidget.kt$0..&lt;rowCount</ID>
    <ID>ForEachOnRange:UpdatesMangaWidget.kt$0..&lt;rowCount</ID>
    <ID>LongMethod:UpdatesAnimeWidget.kt$@Composable fun UpdatesAnimeWidget( data: ImmutableList&lt;Pair&lt;Long, Bitmap?&gt;&gt;?, contentColor: ColorProvider, topPadding: Dp, bottomPadding: Dp, modifier: GlanceModifier = GlanceModifier, )</ID>
    <ID>LongMethod:UpdatesMangaWidget.kt$@Composable fun UpdatesMangaWidget( data: ImmutableList&lt;Pair&lt;Long, Bitmap?&gt;&gt;?, contentColor: ColorProvider, topPadding: Dp, bottomPadding: Dp, modifier: GlanceModifier = GlanceModifier, )</ID>
    <ID>MagicNumber:GlanceUtils.kt$10</ID>
    <ID>MagicNumber:GlanceUtils.kt$64</ID>
    <ID>MagicNumber:GlanceUtils.kt$95</ID>
    <ID>TooGenericExceptionCaught:AnimeWidgetManager.kt$AnimeWidgetManager$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaWidgetManager.kt$MangaWidgetManager$e: Exception</ID>
    <ID>LongParameterList:AnimeHistoryMapper.kt$AnimeHistoryMapper$( historyId: Long, animeId: Long, episodeId: Long, title: String, thumbnailUrl: String?, sourceId: Long, isFavorite: Boolean, coverLastModified: Long, episodeNumber: Double, seenAt: Date?, )</ID>
    <ID>LongParameterList:AnimeMapper.kt$AnimeMapper$( id: Long, source: Long, url: String, artist: String?, author: String?, description: String?, genre: List&lt;String&gt;?, title: String, status: Long, thumbnailUrl: String?, favorite: Boolean, lastUpdate: Long?, nextUpdate: Long?, initialized: Boolean, viewerFlags: Long, chapterFlags: Long, coverLastModified: Long, dateAdded: Long, updateStrategy: AnimeUpdateStrategy, calculateInterval: Long, lastModifiedAt: Long, favoriteModifiedAt: Long?, )</ID>
    <ID>LongParameterList:AnimeMapper.kt$AnimeMapper$( id: Long, source: Long, url: String, artist: String?, author: String?, description: String?, genre: List&lt;String&gt;?, title: String, status: Long, thumbnailUrl: String?, favorite: Boolean, lastUpdate: Long?, nextUpdate: Long?, initialized: Boolean, viewerFlags: Long, chapterFlags: Long, coverLastModified: Long, dateAdded: Long, updateStrategy: AnimeUpdateStrategy, calculateInterval: Long, lastModifiedAt: Long, favoriteModifiedAt: Long?, totalCount: Long, seenCount: Double, latestUpload: Long, episodeFetchedAt: Long, lastSeen: Long, bookmarkCount: Double, category: Long, )</ID>
    <ID>LongParameterList:AnimeTrackMapper.kt$AnimeTrackMapper$( id: Long, animeId: Long, syncId: Long, remoteId: Long, libraryId: Long?, title: String, lastEpisodeSeen: Double, totalEpisodes: Long, status: Long, score: Double, remoteUrl: String, startDate: Long, finishDate: Long, )</ID>
    <ID>LongParameterList:AnimeUpdatesRepositoryImpl.kt$AnimeUpdatesRepositoryImpl$( animeId: Long, animeTitle: String, episodeId: Long, episodeName: String, scanlator: String?, seen: Boolean, bookmark: Boolean, lastSecondSeen: Long, totalSeconds: Long, sourceId: Long, favorite: Boolean, thumbnailUrl: String?, coverLastModified: Long, dateUpload: Long, dateFetch: Long, )</ID>
    <ID>LongParameterList:ChapterRepositoryImpl.kt$ChapterRepositoryImpl$( id: Long, mangaId: Long, url: String, name: String, scanlator: String?, read: Boolean, bookmark: Boolean, lastPageRead: Long, chapterNumber: Double, sourceOrder: Long, dateFetch: Long, dateUpload: Long, lastModifiedAt: Long, )</ID>
    <ID>LongParameterList:EpisodeRepositoryImpl.kt$EpisodeRepositoryImpl$( id: Long, animeId: Long, url: String, name: String, scanlator: String?, seen: Boolean, bookmark: Boolean, lastSecondSeen: Long, totalSeconds: Long, episodeNumber: Double, sourceOrder: Long, dateFetch: Long, dateUpload: Long, lastModifiedAt: Long, )</ID>
    <ID>LongParameterList:MangaHistoryMapper.kt$MangaHistoryMapper$( historyId: Long, mangaId: Long, chapterId: Long, title: String, thumbnailUrl: String?, sourceId: Long, isFavorite: Boolean, coverLastModified: Long, chapterNumber: Double, readAt: Date?, readDuration: Long, )</ID>
    <ID>LongParameterList:MangaMapper.kt$MangaMapper$( id: Long, source: Long, url: String, artist: String?, author: String?, description: String?, genre: List&lt;String&gt;?, title: String, status: Long, thumbnailUrl: String?, favorite: Boolean, lastUpdate: Long?, nextUpdate: Long?, initialized: Boolean, viewerFlags: Long, chapterFlags: Long, coverLastModified: Long, dateAdded: Long, updateStrategy: UpdateStrategy, calculateInterval: Long, lastModifiedAt: Long, favoriteModifiedAt: Long?, )</ID>
    <ID>LongParameterList:MangaMapper.kt$MangaMapper$( id: Long, source: Long, url: String, artist: String?, author: String?, description: String?, genre: List&lt;String&gt;?, title: String, status: Long, thumbnailUrl: String?, favorite: Boolean, lastUpdate: Long?, nextUpdate: Long?, initialized: Boolean, viewerFlags: Long, chapterFlags: Long, coverLastModified: Long, dateAdded: Long, updateStrategy: UpdateStrategy, calculateInterval: Long, lastModifiedAt: Long, favoriteModifiedAt: Long?, totalCount: Long, readCount: Double, latestUpload: Long, chapterFetchedAt: Long, lastRead: Long, bookmarkCount: Double, category: Long, )</ID>
    <ID>LongParameterList:MangaTrackMapper.kt$MangaTrackMapper$( id: Long, mangaId: Long, syncId: Long, remoteId: Long, libraryId: Long?, title: String, lastChapterRead: Double, totalChapters: Long, status: Long, score: Double, remoteUrl: String, startDate: Long, finishDate: Long, )</ID>
    <ID>LongParameterList:MangaUpdatesRepositoryImpl.kt$MangaUpdatesRepositoryImpl$( mangaId: Long, mangaTitle: String, chapterId: Long, chapterName: String, scanlator: String?, read: Boolean, bookmark: Boolean, lastPageRead: Long, sourceId: Long, favorite: Boolean, thumbnailUrl: String?, coverLastModified: Long, dateUpload: Long, dateFetch: Long, )</ID>
    <ID>ReturnCount:AndroidAnimeDatabaseHandler.kt$AndroidAnimeDatabaseHandler$private suspend fun &lt;T&gt; dispatch(inTransaction: Boolean, block: suspend AnimeDatabase.() -&gt; T): T</ID>
    <ID>ReturnCount:AndroidMangaDatabaseHandler.kt$AndroidMangaDatabaseHandler$private suspend fun &lt;T&gt; dispatch(inTransaction: Boolean, block: suspend Database.() -&gt; T): T</ID>
    <ID>SpreadOperator:AnimeRepositoryImpl.kt$AnimeRepositoryImpl$(*animeUpdates.toTypedArray())</ID>
    <ID>SpreadOperator:AnimeTrackRepositoryImpl.kt$AnimeTrackRepositoryImpl$(*tracks.toTypedArray())</ID>
    <ID>SpreadOperator:ChapterRepositoryImpl.kt$ChapterRepositoryImpl$(*chapterUpdates.toTypedArray())</ID>
    <ID>SpreadOperator:ChapterSanitizer.kt$ChapterSanitizer$(*CHAPTER_TRIM_CHARS)</ID>
    <ID>SpreadOperator:EpisodeRepositoryImpl.kt$EpisodeRepositoryImpl$(*episodeUpdates.toTypedArray())</ID>
    <ID>SpreadOperator:EpisodeSanitizer.kt$EpisodeSanitizer$(*EPISODE_TRIM_CHARS)</ID>
    <ID>SpreadOperator:MangaRepositoryImpl.kt$MangaRepositoryImpl$(*mangaUpdates.toTypedArray())</ID>
    <ID>SpreadOperator:MangaTrackRepositoryImpl.kt$MangaTrackRepositoryImpl$(*tracks.toTypedArray())</ID>
    <ID>TooGenericExceptionCaught:AnimeHistoryRepositoryImpl.kt$AnimeHistoryRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeRepositoryImpl.kt$AnimeRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeSourcePagingSource.kt$AnimeSourcePagingSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ChapterRepositoryImpl.kt$ChapterRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:EpisodeRepositoryImpl.kt$EpisodeRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaHistoryRepositoryImpl.kt$MangaHistoryRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaRepositoryImpl.kt$MangaRepositoryImpl$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaSourcePagingSource.kt$SourcePagingSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QueryPagingAnimeSource.kt$QueryPagingAnimeSource$e: Exception</ID>
    <ID>TooGenericExceptionCaught:QueryPagingMangaSource.kt$QueryPagingMangaSource$e: Exception</ID>
    <ID>TooManyFunctions:AndroidAnimeDatabaseHandler.kt$AndroidAnimeDatabaseHandler : AnimeDatabaseHandler</ID>
    <ID>TooManyFunctions:AndroidMangaDatabaseHandler.kt$AndroidMangaDatabaseHandler : MangaDatabaseHandler</ID>
    <ID>TooManyFunctions:AnimeCategoryRepositoryImpl.kt$AnimeCategoryRepositoryImpl : AnimeCategoryRepository</ID>
    <ID>TooManyFunctions:AnimeRepositoryImpl.kt$AnimeRepositoryImpl : AnimeRepository</ID>
    <ID>TooManyFunctions:ChapterRepositoryImpl.kt$ChapterRepositoryImpl : ChapterRepository</ID>
    <ID>TooManyFunctions:EpisodeRepositoryImpl.kt$EpisodeRepositoryImpl : EpisodeRepository</ID>
    <ID>TooManyFunctions:MangaCategoryRepositoryImpl.kt$MangaCategoryRepositoryImpl : MangaCategoryRepository</ID>
    <ID>TooManyFunctions:MangaRepositoryImpl.kt$MangaRepositoryImpl : MangaRepository</ID>
    <ID>TopLevelPropertyNaming:DatabaseAdapter.kt$private const val LIST_OF_STRINGS_SEPARATOR = ", "</ID>
    <ID>UnusedParameter:AnimeUpdatesRepositoryImpl.kt$AnimeUpdatesRepositoryImpl$dateUpload: Long</ID>
    <ID>UnusedParameter:MangaUpdatesRepositoryImpl.kt$MangaUpdatesRepositoryImpl$dateUpload: Long</ID>
    <ID>UseCheckOrError:AnimeTransactionContext.kt$AnimeTransactionElement$throw IllegalStateException("Transaction was never started or was already released")</ID>
    <ID>UseCheckOrError:MangaTransactionContext.kt$TransactionElement$throw IllegalStateException("Transaction was never started or was already released")</ID>
    <ID>ComposableParamOrder:SettingsItems.kt$RepeatingIconButton</ID>
    <ID>ComposableParamOrder:SettingsItems.kt$SelectItem</ID>
    <ID>CyclomaticComplexMethod:Button.kt$ButtonElevation$@OptIn(InternalCoroutinesApi::class) @Composable private fun animateElevation( enabled: Boolean, interactionSource: InteractionSource, ): State&lt;Dp&gt;</ID>
    <ID>CyclomaticComplexMethod:Scaffold.kt$@Composable private fun ScaffoldLayout( fabPosition: FabPosition, topBar: @Composable () -&gt; Unit, startBar: @Composable () -&gt; Unit, content: @Composable (PaddingValues) -&gt; Unit, snackbar: @Composable () -&gt; Unit, fab: @Composable () -&gt; Unit, contentWindowInsets: WindowInsets, bottomBar: @Composable () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:VerticalFastScroller.kt$@OptIn(FlowPreview::class) @Composable fun VerticalFastScroller( listState: LazyListState, modifier: Modifier = Modifier, thumbAllowed: () -&gt; Boolean = { true }, thumbColor: Color = MaterialTheme.colorScheme.primary, topContentPadding: Dp = Dp.Hairline, bottomContentPadding: Dp = Dp.Hairline, endContentPadding: Dp = Dp.Hairline, content: @Composable () -&gt; Unit, )</ID>
    <ID>CyclomaticComplexMethod:VerticalFastScroller.kt$@OptIn(FlowPreview::class) @Composable fun VerticalGridFastScroller( state: LazyGridState, columns: GridCells, arrangement: Arrangement.Horizontal, contentPadding: PaddingValues, modifier: Modifier = Modifier, thumbAllowed: () -&gt; Boolean = { true }, thumbColor: Color = MaterialTheme.colorScheme.primary, topContentPadding: Dp = Dp.Hairline, bottomContentPadding: Dp = Dp.Hairline, endContentPadding: Dp = Dp.Hairline, content: @Composable () -&gt; Unit, )</ID>
    <ID>ForbiddenComment:VerticalFastScroller.kt$// TODO: Sometimes item height is not available when scrolling up</ID>
    <ID>FunctionNaming:PullRefresh.kt$PullToRefreshStateImpl.Companion$fun Saver( extraVerticalOffset: Float, positionalThreshold: Float, enabled: () -&gt; Boolean, onRefresh: () -&gt; Unit, )</ID>
    <ID>LongMethod:AdaptiveSheet.kt$@Composable fun AdaptiveSheet( isTabletUi: Boolean, tonalElevation: Dp, enableSwipeDismiss: Boolean, onDismissRequest: () -&gt; Unit, modifier: Modifier = Modifier, content: @Composable () -&gt; Unit, )</ID>
    <ID>LongMethod:Button.kt$ButtonElevation$@OptIn(InternalCoroutinesApi::class) @Composable private fun animateElevation( enabled: Boolean, interactionSource: InteractionSource, ): State&lt;Dp&gt;</ID>
    <ID>LongMethod:InfoScreen.kt$@Composable fun InfoScreen( icon: ImageVector, headingText: String, subtitleText: String, acceptText: String, onAcceptClick: () -&gt; Unit, canAccept: Boolean = true, rejectText: String? = null, onRejectClick: (() -&gt; Unit)? = null, content: @Composable ColumnScope.() -&gt; Unit, )</ID>
    <ID>LongMethod:Scaffold.kt$@Composable private fun ScaffoldLayout( fabPosition: FabPosition, topBar: @Composable () -&gt; Unit, startBar: @Composable () -&gt; Unit, content: @Composable (PaddingValues) -&gt; Unit, snackbar: @Composable () -&gt; Unit, fab: @Composable () -&gt; Unit, contentWindowInsets: WindowInsets, bottomBar: @Composable () -&gt; Unit, )</ID>
    <ID>LongMethod:VerticalFastScroller.kt$@OptIn(FlowPreview::class) @Composable fun VerticalFastScroller( listState: LazyListState, modifier: Modifier = Modifier, thumbAllowed: () -&gt; Boolean = { true }, thumbColor: Color = MaterialTheme.colorScheme.primary, topContentPadding: Dp = Dp.Hairline, bottomContentPadding: Dp = Dp.Hairline, endContentPadding: Dp = Dp.Hairline, content: @Composable () -&gt; Unit, )</ID>
    <ID>LongMethod:VerticalFastScroller.kt$@OptIn(FlowPreview::class) @Composable fun VerticalGridFastScroller( state: LazyGridState, columns: GridCells, arrangement: Arrangement.Horizontal, contentPadding: PaddingValues, modifier: Modifier = Modifier, thumbAllowed: () -&gt; Boolean = { true }, thumbColor: Color = MaterialTheme.colorScheme.primary, topContentPadding: Dp = Dp.Hairline, bottomContentPadding: Dp = Dp.Hairline, endContentPadding: Dp = Dp.Hairline, content: @Composable () -&gt; Unit, )</ID>
    <ID>LongMethod:WheelPicker.kt$@Composable private fun &lt;T&gt; WheelPicker( items: ImmutableList&lt;T&gt;, modifier: Modifier = Modifier, startIndex: Int = 0, size: DpSize = DpSize(128.dp, 128.dp), onSelectionChanged: (index: Int) -&gt; Unit = {}, manualInputType: KeyboardType? = null, backgroundContent: (@Composable (size: DpSize) -&gt; Unit)? = { WheelPickerDefaults.Background(size = it) }, itemContent: @Composable LazyItemScope.(item: T) -&gt; Unit, )</ID>
    <ID>LongParameterList:InfoScreen.kt$( icon: ImageVector, headingText: String, subtitleText: String, acceptText: String, onAcceptClick: () -&gt; Unit, canAccept: Boolean = true, rejectText: String? = null, onRejectClick: (() -&gt; Unit)? = null, content: @Composable ColumnScope.() -&gt; Unit, )</ID>
    <ID>LongParameterList:Scaffold.kt$( fabPosition: FabPosition, topBar: @Composable () -&gt; Unit, startBar: @Composable () -&gt; Unit, content: @Composable (PaddingValues) -&gt; Unit, snackbar: @Composable () -&gt; Unit, fab: @Composable () -&gt; Unit, contentWindowInsets: WindowInsets, bottomBar: @Composable () -&gt; Unit, )</ID>
    <ID>LongParameterList:Scrollbar.kt$( orientation: Orientation, reverseDirection: Boolean, atEnd: Boolean, showScrollbar: Boolean, thickness: Float, color: Color, alpha: () -&gt; Float, thumbSize: Float, scrollOffset: Float, positionOffset: Float, )</ID>
    <ID>LongParameterList:SettingsItems.kt$( label: String, placeholder: String, suffix: String, value: Int, step: Int, min: Int? = null, onValueChanged: (Int) -&gt; Unit, )</ID>
    <ID>MagicNumber:CircularProgressIndicator.kt$2000</ID>
    <ID>MagicNumber:Modifier.kt$0.16f</ID>
    <ID>MagicNumber:Modifier.kt$0.22f</ID>
    <ID>MagicNumber:PullRefresh.kt$PullToRefreshStateImpl$4</ID>
    <ID>MagicNumber:Scaffold.kt$3</ID>
    <ID>MagicNumber:Scaffold.kt$4</ID>
    <ID>MagicNumber:Scaffold.kt$5</ID>
    <ID>MagicNumber:Scaffold.kt$6</ID>
    <ID>MagicNumber:Scaffold.kt$7</ID>
    <ID>MagicNumber:Scaffold.kt$8</ID>
    <ID>MagicNumber:Scaffold.kt$9</ID>
    <ID>MagicNumber:Scrollbar.kt$100</ID>
    <ID>MagicNumber:Scrollbar.kt$50</ID>
    <ID>MagicNumber:SettingsItems.kt$0.5f</ID>
    <ID>MagicNumber:SettingsItems.kt$1.5f</ID>
    <ID>MagicNumber:Surface.kt$100f</ID>
    <ID>MagicNumber:Surface.kt$4.5f</ID>
    <ID>MagicNumber:Tabs.kt$0.08f</ID>
    <ID>MagicNumber:Tabs.kt$0.12f</ID>
    <ID>MagicNumber:VerticalFastScroller.kt$100</ID>
    <ID>MagicNumber:WheelPicker.kt$0.2f</ID>
    <ID>MagicNumber:WheelPicker.kt$1.2f</ID>
    <ID>MatchingDeclarationName:EmptyScreen.kt$EmptyScreenAction</ID>
    <ID>MatchingDeclarationName:SettingsItems.kt$SettingsItemsPaddings</ID>
    <ID>MaxLineLength:Scaffold.kt$*</ID>
    <ID>ModifierMissing:CollapsibleBox.kt$CollapsibleBox</ID>
    <ID>ModifierMissing:InfoScreen.kt$InfoScreen</ID>
    <ID>ModifierMissing:SectionCard.kt$SectionCard</ID>
    <ID>ModifierMissing:SettingsItems.kt$CheckboxItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$HeadingItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$IconItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$OutlinedNumericChooser</ID>
    <ID>ModifierMissing:SettingsItems.kt$RadioItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$SelectItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$SettingsChipRow</ID>
    <ID>ModifierMissing:SettingsItems.kt$SettingsIconGrid</ID>
    <ID>ModifierMissing:SettingsItems.kt$SliderItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$SortItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$TextItem</ID>
    <ID>ModifierMissing:SettingsItems.kt$TriStateItem</ID>
    <ID>ModifierMissing:Tabs.kt$TabText</ID>
    <ID>ModifierMissing:WheelPicker.kt$WheelPickerDefaults$Background</ID>
    <ID>ModifierMissing:WheelPicker.kt$WheelPickerDefaults$Item</ID>
    <ID>PreviewAnnotationNaming:ThemePreviews.kt$ThemePreviews$ThemePreviews</ID>
    <ID>PreviewPublic:Scrollbar.kt$LazyListHorizontalScrollbarPreview</ID>
    <ID>PreviewPublic:Scrollbar.kt$LazyListScrollbarPreview</ID>
    <ID>TooManyFunctions:SettingsItems.kt$tachiyomi.presentation.core.components.SettingsItems.kt</ID>
    <ID>UnusedPrivateMember:InfoScreen.kt$@PreviewLightDark @Composable private fun InfoScaffoldPreview()</ID>
    <ID>CyclomaticComplexMethod:AnimeLibrarySortMode.kt$AnimeLibrarySort.Companion$fun deserialize(serialized: String): AnimeLibrarySort</ID>
    <ID>FunctionNaming:Pin.kt$fun Pins(vararg pins: Pin)</ID>
    <ID>LongParameterList:SetAnimeEpisodeFlags.kt$SetAnimeEpisodeFlags$( animeId: Long, unseenFilter: Long, downloadedFilter: Long, bookmarkedFilter: Long, sortingMode: Long, sortingDirection: Long, displayMode: Long, )</ID>
    <ID>LongParameterList:SetMangaChapterFlags.kt$SetMangaChapterFlags$( mangaId: Long, unreadFilter: Long, downloadedFilter: Long, bookmarkedFilter: Long, sortingMode: Long, sortingDirection: Long, displayMode: Long, )</ID>
    <ID>MagicNumber:Anime.kt$Anime$16.0</ID>
    <ID>MagicNumber:AnimeFetchInterval.kt$AnimeFetchInterval$10</ID>
    <ID>MagicNumber:AnimeFetchInterval.kt$AnimeFetchInterval$1000</ID>
    <ID>MagicNumber:AnimeFetchInterval.kt$AnimeFetchInterval$3</ID>
    <ID>MagicNumber:AnimeFetchInterval.kt$AnimeFetchInterval$7</ID>
    <ID>MagicNumber:AnimeFetchInterval.kt$AnimeFetchInterval$8</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Direction.Ascending$0b01000000</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.AiringTime$0b00110000</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.DateAdded$0b00011100</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.EpisodeFetchDate$0b00011000</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.LastSeen$0b00000100</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.LastUpdate$0b00001000</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.LatestEpisode$0b00010100</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.TotalEpisodes$0b00010000</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.TrackerMean$0b000100000</ID>
    <ID>MagicNumber:AnimeLibrarySortMode.kt$AnimeLibrarySort.Type.UnseenCount$0b00001100</ID>
    <ID>MagicNumber:BackupPreferences.kt$BackupPreferences$12</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$10</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$10.0</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$2.0</ID>
    <ID>MagicNumber:ChapterRecognition.kt$ChapterRecognition$3</ID>
    <ID>MagicNumber:EpisodeRecognition.kt$EpisodeRecognition$10</ID>
    <ID>MagicNumber:EpisodeRecognition.kt$EpisodeRecognition$10.0</ID>
    <ID>MagicNumber:EpisodeRecognition.kt$EpisodeRecognition$2.0</ID>
    <ID>MagicNumber:EpisodeRecognition.kt$EpisodeRecognition$3</ID>
    <ID>MagicNumber:GetApplicationRelease.kt$GetApplicationRelease$3</ID>
    <ID>MagicNumber:MangaFetchInterval.kt$MangaFetchInterval$10</ID>
    <ID>MagicNumber:MangaFetchInterval.kt$MangaFetchInterval$1000</ID>
    <ID>MagicNumber:MangaFetchInterval.kt$MangaFetchInterval$3</ID>
    <ID>MagicNumber:MangaFetchInterval.kt$MangaFetchInterval$7</ID>
    <ID>MagicNumber:MangaFetchInterval.kt$MangaFetchInterval$8</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Direction.Ascending$0b01000000</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.ChapterFetchDate$0b00011000</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.DateAdded$0b00011100</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.LastRead$0b00000100</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.LastUpdate$0b00001000</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.LatestChapter$0b00010100</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.TotalChapters$0b00010000</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.TrackerMean$0b000100000</ID>
    <ID>MagicNumber:MangaLibrarySortMode.kt$MangaLibrarySort.Type.UnreadCount$0b00001100</ID>
    <ID>MatchingDeclarationName:AnimeLibrarySortMode.kt$AnimeLibrarySort : FlagWithMask</ID>
    <ID>MatchingDeclarationName:MangaLibrarySortMode.kt$MangaLibrarySort : FlagWithMask</ID>
    <ID>ReturnCount:ChapterRecognition.kt$ChapterRecognition$fun parseChapterNumber(mangaTitle: String, chapterName: String, chapterNumber: Double? = null): Double</ID>
    <ID>ReturnCount:ChapterRecognition.kt$ChapterRecognition$private fun checkForDecimal(decimal: String?, alpha: String?): Double</ID>
    <ID>ReturnCount:EpisodeRecognition.kt$EpisodeRecognition$fun parseEpisodeNumber(animeTitle: String, episodeName: String, episodeNumber: Double? = null): Double</ID>
    <ID>ReturnCount:EpisodeRecognition.kt$EpisodeRecognition$private fun checkForDecimal(decimal: String?, alpha: String?): Double</ID>
    <ID>ReturnCount:MissingChapters.kt$fun List&lt;Double&gt;.missingChaptersCount(): Int</ID>
    <ID>ReturnCount:MissingChapters.kt$fun calculateChapterGap(higherChapter: Chapter?, lowerChapter: Chapter?): Int</ID>
    <ID>ReturnCount:MissingEpisodes.kt$fun List&lt;Double&gt;.missingEpisodesCount(): Int</ID>
    <ID>ReturnCount:MissingEpisodes.kt$fun calculateEpisodeGap(higherEpisode: Episode?, lowerEpisode: Episode?): Int</ID>
    <ID>SerialVersionUIDInSerializableClass:Anime.kt$Anime : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Category.kt$Category : Serializable</ID>
    <ID>SerialVersionUIDInSerializableClass:Manga.kt$Manga : Serializable</ID>
    <ID>SwallowedException:AnimeLibrarySortMode.kt$AnimeLibrarySort.Companion$e: Exception</ID>
    <ID>SwallowedException:GetChapterByUrlAndMangaId.kt$GetChapterByUrlAndMangaId$e: Exception</ID>
    <ID>SwallowedException:GetEpisodeByUrlAndAnimeId.kt$GetEpisodeByUrlAndAnimeId$e: Exception</ID>
    <ID>SwallowedException:MangaLibrarySortMode.kt$MangaLibrarySort.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:AnimeLibrarySortMode.kt$AnimeLibrarySort.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CreateAnimeCategoryWithName.kt$CreateAnimeCategoryWithName$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CreateMangaCategoryWithName.kt$CreateMangaCategoryWithName$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeleteAnimeCategory.kt$DeleteAnimeCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeleteAnimeTrack.kt$DeleteAnimeTrack$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeleteMangaCategory.kt$DeleteMangaCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeleteMangaTrack.kt$DeleteMangaTrack$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetAnime.kt$GetAnime$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetAnimeTracks.kt$GetAnimeTracks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChapter.kt$GetChapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChapterByUrlAndMangaId.kt$GetChapterByUrlAndMangaId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetChaptersByMangaId.kt$GetChaptersByMangaId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetEpisode.kt$GetEpisode$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetEpisodeByUrlAndAnimeId.kt$GetEpisodeByUrlAndAnimeId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetEpisodesByAnimeId.kt$GetEpisodesByAnimeId$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetManga.kt$GetManga$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GetMangaTracks.kt$GetMangaTracks$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HideAnimeCategory.kt$HideAnimeCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:HideMangaCategory.kt$HideMangaCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsertAnimeTrack.kt$InsertAnimeTrack$e: Exception</ID>
    <ID>TooGenericExceptionCaught:InsertMangaTrack.kt$InsertMangaTrack$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MangaLibrarySortMode.kt$MangaLibrarySort.Companion$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RenameAnimeCategory.kt$RenameAnimeCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:RenameMangaCategory.kt$RenameMangaCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReorderAnimeCategory.kt$ReorderAnimeCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReorderMangaCategory.kt$ReorderMangaCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetAnimeCategories.kt$SetAnimeCategories$e: Exception</ID>
    <ID>TooGenericExceptionCaught:SetMangaCategories.kt$SetMangaCategories$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateAnimeCategory.kt$UpdateAnimeCategory$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateChapter.kt$UpdateChapter$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateEpisode.kt$UpdateEpisode$e: Exception</ID>
    <ID>TooGenericExceptionCaught:UpdateMangaCategory.kt$UpdateMangaCategory$e: Exception</ID>
    <ID>TooManyFunctions:AnimeCategoryRepository.kt$AnimeCategoryRepository</ID>
    <ID>TooManyFunctions:AnimeRepository.kt$AnimeRepository</ID>
    <ID>TooManyFunctions:ChapterRepository.kt$ChapterRepository</ID>
    <ID>TooManyFunctions:DownloadPreferences.kt$DownloadPreferences</ID>
    <ID>TooManyFunctions:LibraryPreferences.kt$LibraryPreferences</ID>
    <ID>TooManyFunctions:MangaCategoryRepository.kt$MangaCategoryRepository</ID>
    <ID>TooManyFunctions:MangaRepository.kt$MangaRepository</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_CATEGORIES = "1"</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_CHAPTERS = "2"</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_EXTENSIONS = "40"</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_EXT_SETTINGS = "20"</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_HISTORY = "4"</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_SETTINGS = "10"</ID>
    <ID>TopLevelPropertyNaming:PreferenceValues.kt$const val FLAG_TRACK = "8"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val AUTOMATIC_BACKUPS_PATH = "autobackup"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val DOWNLOADS_PATH = "downloads"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val FONTS_PATH = "fonts"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val LOCAL_ANIMESOURCE_PATH = "localanime"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val LOCAL_SOURCE_PATH = "local"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val MPV_CONFIG_PATH = "mpv-config"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val SCRIPTS_PATH = "scripts"</ID>
    <ID>TopLevelPropertyNaming:StorageManager.kt$private const val SCRIPT_OPTS_PATH = "script-opts"</ID>
    <ID>CyclomaticComplexMethod:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>CyclomaticComplexMethod:RateLimitInterceptor.kt$RateLimitInterceptor$override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>ForbiddenComment:Localize.kt$// TODO: janky workaround for https://github.com/icerockdev/moko-resources/issues/337</ID>
    <ID>FunctionNaming:Requests.kt$fun DELETE( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun GET( url: HttpUrl, headers: Headers = DEFAULT_HEADERS, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun GET( url: String, headers: Headers = DEFAULT_HEADERS, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun POST( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionNaming:Requests.kt$fun PUT( url: String, headers: Headers = DEFAULT_HEADERS, body: RequestBody = DEFAULT_BODY, cache: CacheControl = DEFAULT_CACHE_CONTROL, ): Request</ID>
    <ID>FunctionParameterNaming:WebViewInterceptor.kt$_name: String</ID>
    <ID>FunctionParameterNaming:WebViewInterceptor.kt$_value: String</ID>
    <ID>InstanceOfCheckForException:UncaughtExceptionInterceptor.kt$UncaughtExceptionInterceptor$e is IOException</ID>
    <ID>InvalidPackageDeclaration:Constants.kt$package eu.kanade.tachiyomi.core.common</ID>
    <ID>LongMethod:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>LoopWithTooManyJumpStatements:ImageUtil.kt$ImageUtil$for</ID>
    <ID>LoopWithTooManyJumpStatements:RateLimitInterceptor.kt$RateLimitInterceptor$while</ID>
    <ID>MagicNumber:DeviceUtil.kt$DeviceUtil$1024</ID>
    <ID>MagicNumber:DeviceUtil.kt$DeviceUtil$3L</ID>
    <ID>MagicNumber:DeviceUtil.kt$DeviceUtil$90000</ID>
    <ID>MagicNumber:DiskUtil.kt$DiskUtil$240</ID>
    <ID>MagicNumber:Hash.kt$Hash$15</ID>
    <ID>MagicNumber:Hash.kt$Hash$240</ID>
    <ID>MagicNumber:Hash.kt$Hash$4</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$0.01</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$0.0275</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$100</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$14</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$18</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$200</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$22</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$25</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$3</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$30</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$32</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$40</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$5</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$50</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$6</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$740</ID>
    <ID>MagicNumber:ImageUtil.kt$ImageUtil$9</ID>
    <ID>MagicNumber:NetworkHelper.kt$NetworkHelper$30</ID>
    <ID>MagicNumber:OkHttpExtensions.kt$30</ID>
    <ID>MagicNumber:UniFileTempFileManager.kt$UniFileTempFileManager$3</ID>
    <ID>MagicNumber:UniFileTempFileManager.kt$UniFileTempFileManager$8192</ID>
    <ID>MagicNumber:WebViewInterceptor.kt$WebViewInterceptor$30</ID>
    <ID>MaxLineLength:CoroutinesExtensions.kt$*</ID>
    <ID>MaxLineLength:SpecificHostRateLimitInterceptor.kt$*</ID>
    <ID>MaxLineLength:WebViewUtil.kt$WebViewUtil$*</ID>
    <ID>NestedBlockDepth:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>NestedBlockDepth:UniFileTempFileManager.kt$UniFileTempFileManager$fun createTempFile(file: UniFile): File</ID>
    <ID>ReturnCount:ImageUtil.kt$ImageUtil$fun chooseBackground(context: Context, imageStream: InputStream): Drawable</ID>
    <ID>ReturnCount:ImageUtil.kt$ImageUtil$fun isAnimatedAndSupported(stream: InputStream): Boolean</ID>
    <ID>ReturnCount:ImageUtil.kt$ImageUtil$fun splitTallImage(tmpDir: UniFile, imageFile: UniFile, filenamePrefix: String): Boolean</ID>
    <ID>ReturnCount:WebViewInterceptor.kt$WebViewInterceptor$@OptIn(DelicateCoroutinesApi::class) override fun intercept(chain: Interceptor.Chain): Response</ID>
    <ID>ReturnCount:WebViewInterceptor.kt$private fun isRequestHeaderSafe(_name: String, _value: String): Boolean</ID>
    <ID>SwallowedException:AndroidPreference.kt$AndroidPreference$e: ClassCastException</ID>
    <ID>SwallowedException:AndroidPreference.kt$AndroidPreference.Object$e: Exception</ID>
    <ID>SwallowedException:DeviceUtil.kt$DeviceUtil$e: Exception</ID>
    <ID>SwallowedException:ImageUtil.kt$ImageUtil$e: Exception</ID>
    <ID>SwallowedException:OkHttpExtensions.kt$ex: Throwable</ID>
    <ID>SwallowedException:PreferenceStore.kt$e: IllegalArgumentException</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:OkHttpExtensions.kt$Exception()</ID>
    <ID>ThrowsCount:FileExtensions.kt$fun File.copyAndSetReadOnlyTo(target: File, overwrite: Boolean = false, bufferSize: Int = DEFAULT_BUFFER_SIZE): File</ID>
    <ID>TooGenericExceptionCaught:AndroidPreference.kt$AndroidPreference.Object$e: Exception</ID>
    <ID>TooGenericExceptionCaught:CloudflareInterceptor.kt$CloudflareInterceptor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:DeviceUtil.kt$DeviceUtil$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ImageUtil.kt$ImageUtil$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OkHttpExtensions.kt$&lt;no name provided&gt;$e: Exception</ID>
    <ID>TooGenericExceptionCaught:OkHttpExtensions.kt$ex: Throwable</ID>
    <ID>TooGenericExceptionCaught:UncaughtExceptionInterceptor.kt$UncaughtExceptionInterceptor$e: Exception</ID>
    <ID>TooGenericExceptionCaught:WebViewUtil.kt$WebViewUtil$e: Throwable</ID>
    <ID>TooManyFunctions:DohProviders.kt$eu.kanade.tachiyomi.network.DohProviders.kt</ID>
    <ID>TooManyFunctions:EpubFile.kt$EpubFile : Closeable</ID>
    <ID>TooManyFunctions:ImageUtil.kt$ImageUtil</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$/** * Based on https://github.com/square/okhttp/blob/ef5d0c83f7bbd3a0c0534e7ca23cbc4ee7550f3b/okhttp-dnsoverhttps/src/test/java/okhttp3/dnsoverhttps/DohProviders.java */ const val PREF_DOH_CLOUDFLARE = 1</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_360 = 7</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_ADGUARD = 3</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_ALIDNS = 5</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_CONTROLD = 10</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_DNSPOD = 6</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_GOOGLE = 2</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_LIBREDNS = 13</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_MULLVAD = 9</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_NJALLA = 11</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_QUAD101 = 8</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_QUAD9 = 4</ID>
    <ID>TopLevelPropertyNaming:DohProviders.kt$const val PREF_DOH_SHECAN = 12</ID>
    <ID>UnusedPrivateProperty:JavaScriptEngine.kt$JavaScriptEngine$context: Context</ID>
  </CurrentIssues>
</SmellBaseline>
